using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EtiLogger.Logging;

namespace OriBotV3.Utility.Music.FileRepresentation {
	public class AudioMetadata {

		private static readonly Dictionary<FileInfo, AudioMetadata> MetadataCache = new Dictionary<FileInfo, AudioMetadata>();

		private static Logger MDLogger { get; } = new Logger("^#ffaaaa;[AudioMetadata] ");

		/// <summary>
		/// A reference to the music file that uses this metadata.
		/// </summary>
		public FileInfo MusicFile { get; }

		/// <summary>
		/// A reference to the metadata file generated by ffmpeg.<para/>
		/// This may be null if an error occurs with ffmpeg.
		/// </summary>
		public FileInfo MetadataCacheFile { get; }

		/// <summary>
		/// The title of this music, or the filename if it has no title in metadata.
		/// </summary>
		public string Title { get; }

		/// <summary>
		/// If a text file with the name of the audio file is included and has the .exception extension (e.g. audio.mp3.exception), then this is the contents of that text file. This is null otherwise.
		/// </summary>
		public string ExtraNotes { get; set; }

		private AudioMetadata(FileInfo musicFile) {
			MusicFile = musicFile;

			MDLogger.WriteLine("§6Looking for metadata for " + musicFile.FullName, LogLevel.Trace);
			// Try to get an existing metadata cache file.
			string metadataFileName = musicFile.FullName + "-metadata.txt";
			FileInfo metadataFile = new FileInfo(metadataFileName);

			// If the metadata cache file doesn't exist, launch ffmpeg and snag the data.
			if (!metadataFile.Exists) {
				MDLogger.WriteLine("§6Metadata for " + musicFile.FullName + " does not exist. Running ffmpeg and exporting to " + metadataFile.FullName, LogLevel.Trace);
				// If not, run ffmpeg and snag the data.
				ProcessStartInfo ffmpeg_inf = new ProcessStartInfo {
					FileName = "ffmpeg",
					Arguments = $"-i \"{musicFile.FullName}\" -f ffmetadata \"{metadataFile.FullName}\"",
					UseShellExecute = false,
					RedirectStandardOutput = true,
					RedirectStandardError = true
				};

				Process ffmpeg = Process.Start(ffmpeg_inf);
				ffmpeg.WaitForExit();
				MDLogger.WriteLine("§6ffmpeg Exited and created " + metadataFile.FullName, LogLevel.Trace);
				metadataFile.Refresh();
			}

			if (metadataFile.Exists) {
				MetadataCacheFile = metadataFile;
				Dictionary<string, string> meta = GetMetadataFromFFMPEG(metadataFile);
				Title = meta.GetValueOrDefault("title", musicFile.Name.Replace(musicFile.Extension, ""));
			} else {
				MDLogger.WriteLine("§4DEBUG ERR: Metadata file still doesn't exist after being created by ffmpeg! A dummy file will be created.", LogLevel.Trace);
				File.WriteAllText(metadataFile.FullName, "");
				Title = musicFile.Name.Replace(musicFile.Extension, "");
			}

			if (File.Exists(musicFile.FullName + ".exception")) {
				ExtraNotes = File.ReadAllText(musicFile.FullName + ".exception");
			} else {
				ExtraNotes = null;
			}
			MDLogger.WriteLine("§6Created metadata for " + musicFile.FullName, LogLevel.Trace);
		}

		/// <summary>
		/// Gets a dictionary representing the entirety of the file's metadata.
		/// </summary>
		/// <param name="musicFile"></param>
		/// <param name="metadataFile"></param>
		/// <returns></returns>
		private static Dictionary<string, string> GetMetadataFromFFMPEG(FileInfo metadataFile) {
			Dictionary<string, string> metadata = new Dictionary<string, string>();
			try {
				foreach (string line in File.ReadAllLines(metadataFile.FullName)) {
					if (line.Contains("=")) {
						string[] splitLine = line.Split(new char[] { '=' }, 2);
						if (splitLine.Length == 2) {
							string key = splitLine[0].ToLower();
							string value = splitLine[1];
							metadata[key] = value;
						}
					}
				}
			} catch (Exception err) {
				MDLogger.WriteException(err);
			}
			return metadata;
		}

		/// <summary>
		/// Get the metadata for a given file. This will cache the metadata.
		/// </summary>
		/// <param name="musicFile"></param>
		/// <returns></returns>
		public static AudioMetadata For(FileInfo musicFile) { 
			if (MetadataCache.ContainsKey(musicFile)) {
				return MetadataCache[musicFile];
			}

			return new AudioMetadata(musicFile);
		}

	}
}
