<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EtiBotCore</name>
    </assembly>
    <members>
        <member name="T:EtiBotCore.Client.DiscordClient">
            <summary>
            A Discord client, which contains methods to connect to or disconnect from Discord, as well as utilities to interact with Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.OUTPUT_PRESENCE_UPDATE_EVENT_RECV">
            <summary>
            Whether or not to output receiving presence update events. These are by far the most common and spam the log with incredible amounts of garbage data.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.TARGET_API_VERSION">
            <summary>
            The API version that this bot targets.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.YieldEventHandlersWhileRequestsLive">
            <summary>
            Yield all event handlers until outgoing requests have completed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.DISCORD_GATEWAY_URL">
            <summary>
            The Discord API URL
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.DISCORD_GATEWAY_URI">
            <summary>
            A URI pointing to <see cref="P:EtiBotCore.Client.DiscordClient.DISCORD_GATEWAY_URL"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.Log">
            <summary>
            The <see cref="T:EtiLogger.Logging.Logger"/> used by this <see cref="T:EtiBotCore.Client.DiscordClient"/>. This is the core log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.LoggingLevel">
            <summary>
            Directly edits <see cref="P:EtiLogger.Logging.Logger.LoggingLevel"/>, which determines the kind of messages this logs.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.Token">
            <summary>
            The token for the bot.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.HttpAuthorization">
            <summary>
            When sending requests to Discord, this is the authorization used in the header.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.SessionID">
            <summary>
            The session ID, used in reconnecting.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.PayloadQueue">
            <summary>
            A queue of payloads to send after <see cref="P:EtiBotCore.Client.DiscordClient.RequestBudget"/> has been depleted.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.RequestBudget">
            <summary>
            Discord allows 120 requests per 60 seconds. This budget enforces that requests are sent in compliance with these rules.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.HeartbeatInterval">
            <summary>
            The interval at which to send heartbeats.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.MissedLastHeartbeat">
            <summary>
            Whether or not the bot missed the latest heartbeat. If this is true when the next heartbeat should be sent, the bot assumes it disconnected. It is set to false when receiving a heartbeat acknowledge signal.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.CancellationSource">
            <summary>
            The <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> for all socket operations.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.Socket">
            <summary>
            The socket used for this connection.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.LastReceivedSequenceNumber">
            <summary>
            The last received Sequence number.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.HeartbeatCanceller">
            <summary>
            A <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> that cancels the heartbeat task.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.ReceiveCanceller">
            <summary>
            A <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> that cancels the receiver.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.HeartbeatClockworks">
            <summary>
            Used to keep track of heartbeating.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.Connected">
            <summary>
            Whether or not the bot is connected to Discord.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.ReconnectOnFailure">
            <summary>
            Whether or not this connection should reconnect if it errors out.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.Current">
            <summary>
            The current <see cref="T:EtiBotCore.Client.DiscordClient"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.DeferNonGuildCreateEvents">
            <summary>
            If true, all events that are not essential but are subscribed to via intents will be ignored, with the exception of GUILD_CREATE
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.DevMode">
            <summary>
            Whether or not developer mode is enabled.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.RefreshActivity">
            <summary>
            An action that can be called to refresh the bot's status right now.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.ForceNextAsNoEndpoint">
            <summary>
            For debugging, can be used to force the next received backet to be treated as error 1001 endpoint unavailable.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.IncomingPayloadQueue">
            <summary>
            All incoming payloads in a queue for event processing.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.PayloadMembersByRequest">
            <summary>
            A list of member payloads from the get guild members chunk.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.NotYieldingForPayloadMembers">
            <summary>
            A <see cref="T:System.Threading.ManualResetEventSlim"/> to delay the member processing cycle.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.NotBusyWithRequestYielder">
            <summary>
            A <see cref="T:System.Threading.ManualResetEventSlim"/> to delay something that requested members.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.ReceivedChunks">
            <summary>
            The amount of received chunks.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.LastDidFullRequestAt">
            <summary>
            When the last request was done.
            </summary>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.Setup">
            <summary>
            Sets up the discord gateway URL. This should be <strong>awaited</strong> before running the constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.#ctor(System.String,EtiBotCore.Payloads.Data.GatewayIntent)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Client.DiscordClient"/> with the given token and intents.
            </summary>
            <param name="token">The token to the bot.</param>
            <param name="intents">The data that the bot plans on doing with Discord (sending and receiving).</param>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.ConnectAsync">
            <summary>
            Connects to Discord and sets up initial events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.ReconnectAsync(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Should be run if the bot receives opcode <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.Reconnect"/>, which is Discord telling the bot to immediately reconnect.
            </summary>
            <param name="withResume">If <see langword="true"/>, this is sent with a resume payload instead of reidentifying.</param>
            <param name="terminateVoice">If <see langword="true"/>, the voice connection will be terminated too.</param>
            <param name="isFromInnerReattempt">Only <see langword="true"/> if this method called <see cref="M:EtiBotCore.Client.DiscordClient.ReconnectAsync(System.Boolean,System.Boolean,System.Boolean)"/>, which is used to track a double-failure.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.RestartProgram">
            <summary>
            Restarts the program by starting a new instance of this EXE and exiting this one immediately after.
            </summary>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.DisconnectAsync(System.String,System.Net.WebSockets.WebSocketCloseStatus,System.Boolean)">
            <summary>
            Disconnects the client from Discord and stops all processes that ensure things are working as they should be.
            </summary>
            <param name="message">The message to include with the close.</param>
            <param name="status">The status to include with the close.</param>
            <param name="terminateVoice">If true, any ongoing voice channel connections will also be terminated.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.TerminateAsync(System.String,System.Net.WebSockets.WebSocketCloseStatus)">
            <summary>
            Identical to <see cref="M:EtiBotCore.Client.DiscordClient.DisconnectAsync(System.String,System.Net.WebSockets.WebSocketCloseStatus,System.Boolean)"/>, but this will also close the program.
            </summary>
            <param name="message"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.StartHeartbeatTask">
            <summary>
            Begins the heartbeat loop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.SendHeartbeat">
            <summary>
            Sends a heartbeat when called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.StartReceiveLoopTask">
            <summary>
            The main recieve loop. Sends out events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.InitialHandshake(System.Boolean)">
            <summary>
            Performs the initial handshake with Discord.
            </summary>
            <param name="sendResumeInstead">If <see langword="true"/>, the system will use the reconnection routine instead of sending an identify payload.</param>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.Send(EtiBotCore.Payloads.Payload,System.Boolean)">
            <summary>
            Sends the given <see cref="T:EtiBotCore.Payloads.Payload"/> to Discord.
            </summary>
            <param name="payload">The <see cref="T:EtiBotCore.Payloads.Payload"/> to send.</param>
            <param name="force">If <see langword="true"/>, this will skip the queue process and request limiter, and instead directly send.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.Receive(System.Boolean)">
            <summary>
            Recieves a <see cref="T:EtiBotCore.Payloads.Payload"/> from Discord and returns it. Also sets <see cref="P:EtiBotCore.Client.DiscordClient.LastReceivedSequenceNumber"/> if applicable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.OnRequestBudgetRestored">
            <summary>
            Executed when the request budget is restored. Clears out the payload queue.
            </summary>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.RequestAllGuildMembersAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Requests every single member from the given guild. This is very expensive. Please use it sparingly.<para/>
            If more than one request is done per minute, a cached value will be returned.
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.SetActivity(EtiBotCore.DiscordObjects.Guilds.MemberData.Activity,EtiBotCore.Payloads.Data.StatusType)">
            <summary>
            Sets the bot's current activity.
            </summary>
            <param name="activity">The activity to use.</param>
            <param name="statusType">The new status (online, away, etc.) - offline and invisible function identically.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.DisposeAsync">
            <summary>
            Disconnect this <see cref="T:EtiBotCore.Client.DiscordClient"/> from the gateway and dispose of its information.
            </summary>
            <returns></returns>
        </member>
        <member name="F:EtiBotCore.Client.DiscordClient.ActivePrivelegedIntents">
            <summary>
            Discord provides a number of intents that are privileged and cannot be used without being expressly enabled in the bot's app control panel.<para/>
            This property stores the intents that have been enabled. Valid cases are:
            <list type="bullet">
            <item><see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MEMBERS"/></item>
            <item><see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_PRESENCES"/></item>
            </list>
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.ActiveIntents">
            <summary>
            The intents that are active in this connection. Inactive intents will not receive events, and attempting to reference their corresponding event handler will raise 
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.Events">
            <summary>
            All of the events that can fire for this client.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.OnHeartbeat">
            <summary>
            An event that fires when a heartbeat is sent by Discord. This event will not reset. Only bind to it once.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.OnReconnect">
            <summary>
            An event that fires when the bot reconnects to Discord. This event will not reset. Only bind to it once.
            </summary>
        </member>
        <member name="T:EtiBotCore.Client.DiscordClient.EventContainer">
            <summary>
            A container class for the events.
            </summary>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.EventContainer.RequireIntent(EtiBotCore.Payloads.Data.GatewayIntent)">
            <summary>
            Throws <see cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException"/> if the given intent is not enabled.
            </summary>
            <param name="intent"></param>
        </member>
        <member name="M:EtiBotCore.Client.DiscordClient.EventContainer.RequireDualStateIntent(EtiBotCore.Payloads.Data.GatewayIntent,EtiBotCore.Payloads.Data.GatewayIntent)">
            <summary>
            Identical to <see cref="M:EtiBotCore.Client.DiscordClient.EventContainer.RequireIntent(EtiBotCore.Payloads.Data.GatewayIntent)"/> in that it will throw <see cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException"/>, but in this case, if at least one of the two intents is enabled, it will NOT throw (they must both be missing to throw)<para/>
            As implied by the parameter names, this is intended for intents that have both a guild and DM counterpart.
            </summary>
            <param name="guildIntent"></param>
            <param name="dmIntent"></param>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.PassthroughEvents">
            <summary>
            Most passthrough events (not all, as they are only relevant to the bot core). These do not require any intents.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.GuildEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILDS"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.MemberEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MEMBERS"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.BanEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_BANS"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.EmojiEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_EMOJIS"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.IntegrationEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_INTEGRATIONS"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.WebhookEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_WEBHOOKS"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.InviteEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_INVITES"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.VoiceStateEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_VOICE_STATES"/> intent are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.PresenceEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_PRESENCES"/> intent are included in this object.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.MessageEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MESSAGES"/> and <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGES"/> intents are included in this object.<para/>
            Some events may or may not fire in this container depending on the intents. Said events will be marked.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.ReactionEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MESSAGE_REACTIONS"/> and <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGE_REACTIONS"/> intents are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="P:EtiBotCore.Client.DiscordClient.EventContainer.TypingEvents">
            <summary>
            All events from the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MESSAGE_TYPING"/> and <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGE_TYPING"/> intents are included in this object.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">If the required intent is not enabled.</exception>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerBans">
            <summary>
            An event container pertaining to when a member is banned or unbanned.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerBans.OnMemberBanned">
            <summary>
            Fires when a member is banned from a server.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, user</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerBans.OnMemberUnbanned">
            <summary>
            Fires when a member is unbanned from a server.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, user</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerEmojis">
            <summary>
            An event container for events pertaining to when emojis in a server change.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerEmojis.OnEmojisUpdated">
            <summary>
            Fires when the emojis in a server update. Both emoji arrays are CustomEmoji objects.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, emojisBefore, emojisAfter</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerGuilds">
            <summary>
            Contains all event handlers for the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILDS"/> intent.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnGuildCreated">
            <summary>
            This event fires when a guild object is created. This is the best event to use for initializing the data of a server.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnGuildUpdated">
            <summary>
            This event fires when a property of a guild is changed.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>serverBefore, serverAfter</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnGuildDeleted">
            <summary>
            This event fires when a server is rendered unavailable, for instance, due to leaving, an outage, or being kicked/banned.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, isUnavailable</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnRoleCreated">
            <summary>
            This event fires when a new role is created in a server.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, newRole</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnRoleUpdated">
            <summary>
            This event fires when a role is changed.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, roleBefore, roleAfter</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnRoleDeleted">
            <summary>
            This event fires when a role is deleted. The given <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> object may be <see langword="null"/>, so its <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> is provided.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, roleIfExists, roleID</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnChannelCreated">
            <summary>
            This event fires when a channel is created.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>newChannel</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnChannelUpdated">
            <summary>
            This event fires when a channel is changed.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>channelBefore, channelAfter</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnChannelDeleted">
            <summary>
            This event fires when a channel is deleted. The given <see cref="T:EtiBotCore.DiscordObjects.Base.ChannelBase"/> may be <see langword="null"/>, so its <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> is provided.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>channelIfExists, channelId</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnPinsUpdated">
            <summary>
            This event fires when a channel's pin list is changed in any way. Discord does not include the message, nor does it include whether a message was pinned or unpinned. Isn't that grand?
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, inChannel, whenOccurred</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnThreadCreated">
            <summary>
            This event fires when a new thread is created. It contains a full thread object.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>newThreadInstance</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnThreadUpdated">
            <summary>
            This event fires when an existing thread is updated. Changes to the last_message_id field will not fire this event.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>threadBefore, threadNow</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnThreadDeleted">
            <summary>
            This event fires when a thread is completely deleted (not archived).<para/>
            The <c>threadIfExists</c> (first) parameter can be used, but may be null, from which the other four params must be used.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>threadIfExists, threadID, serverID, parentChannelID, channelType</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnThreadListSync">
            <summary>
            This event fires when the list of threads in the server needs to be synchronized. 
            If the second parameter (<see cref="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase"/>[]) is null, then this contains all threads in the entire server.
            Otherwise, it contains the IDs of the parent channels, from which all child threads will update.<para/>
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, parentChannelsUpdating, threads</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnSingleThreadMemberUpdated">
            <summary>
            This event fires when the current user updates in a thread. It is unlikely to be used by bots, according to Discord, in favor of <see cref="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnThreadMembersUpdated"/>.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>thisThreadMember</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerGuilds.OnThreadMembersUpdated">
            <summary>
            This event fires when anyone is added to or removed from a thread.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>threadID, serverID, addedMembers, removedMemberIDs</c><para/>
            <strong>Limits:</strong> If <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MEMBERS"/> is not enabled, this will strictly only fire for the bot itself and nobody else.
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerIntegrations">
            <summary>
            An event that fires when integrations of the server update.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerIntegrations.OnIntegrationsUpdated">
            <summary>
            Fires when the integrations to the server update.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerInvites">
            <summary>
            An event container storing events that fire when an instant invite is created or deleted.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerInvites.OnInviteCreated">
            <summary>
            Fires when an instant invite is created for a server. If this is a group DM invite, the guild argument in the <see cref="T:EtiBotCore.DiscordObjects.Guilds.Invite"/> will be <see langword="null"/>.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>newInvite</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerInvites.OnInviteDeleted">
            <summary>
            Fires when an instant invite is deleted from a server or group DM. If this is a group DM invite, the guild argument will be <see langword="null"/>.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>serverId, channelId, inviteCode</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerMembers">
            <summary>
            Contains all event handlers for the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MEMBERS"/> intent.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMembers.OnGuildMemberAdded">
            <summary>
            This event fires when a member is added to a guild.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, member</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMembers.OnGuildMemberUpdated">
            <summary>
            This event fires when a member changes (for instance, they change their nickname or the roles they have changes).<para/>
            Note: In some cases, this may be desynchronized. It is strongly advised to test <see cref="P:EtiBotCore.DiscordObjects.Guilds.Member.IsShallow"/> to determine if all of the data is present.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, memberBefore, memberAfter</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMembers.OnGuildMemberRemoved">
            <summary>
            This event fires when a member is removed from the guild for any reason.<para/>
            Note: In some cases, this may be desynchronized. It is strongly advised to test <see cref="P:EtiBotCore.DiscordObjects.Guilds.Member.IsShallow"/> to determine if all of the data is present.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, member</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerMessages">
            <summary>
            Contains events pertaining to messages being sent, edited, or deleted.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.EventContainers.EventContainerMessages.BulkMessages">
            <summary>
            Messages that have been part of a bulk delete event.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMessages.OnMessageCreated">
            <summary>
            An event that fires when a message is sent.<para/>
            The pinned argument will be true or false to signify whether or not the message is pinned, and null if it was not sent and is therefore unknown.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>message, isPinned</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMessages.OnMessageEdited">
            <summary>
            An event that fires when a message is edited.<para/>
            The pinned argument will be true or false to signify whether or not the message's pinned status changed (it was pinned or unpinned). It will be null if there was no change.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>messageBefore, messageAfter, pinStateIfChanged</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMessages.OnMessageDeleted">
            <summary>
            An event that fires when an individual message is deleted. Messages deleted in a bulk operation will not fire this event.<para/>
            This includes the message's ID. Depending on what the bot has seen, the message may still exist in memory, albeit with <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.Deleted"/> = <see langword="true"/>
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>messageId, inChannel</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMessages.OnMessagesBulkDeleted">
            <summary>
            An event that fires when several messages are deleted at once.<para/>
            This includes the messages' IDs. Depending on what the bot has seen, the messages may still exist in memory, albeit with <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.Deleted"/> = <see langword="true"/>
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>messageIds, inChannel</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerMessages.OnDirectMessagePinStateChanged">
            <summary>
            An event that fires if the <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGES"/> intent is active for when a message is pinned in a DM. <strong>This will never fire for pins in a server.</strong><para/>
            For messages being pinned in servers, see <see cref="T:EtiBotCore.Client.EventContainers.EventContainerGuilds"/> (<see cref="P:EtiBotCore.Client.DiscordClient.EventContainer.GuildEvents"/>).
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>dmChannel</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerPassthrough">
            <summary>
            Contains all events that are considered passthrough (the bot will receive these no matter what, even if it has no intents defined).
            </summary>
            <remarks>
            This class is purposely left incomplete as the other passthrough events are only relevant to the bot core.
            </remarks>
        </member>
        <member name="F:EtiBotCore.Client.EventContainers.EventContainerPassthrough.OnVoiceServerUpdated">
            <summary>
            An event that fires when the bot is instructed to connect to a voice server.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>serverId, token, endpoint</c><para/>
            A <see langword="null"/> endpoint means that the voice server allocated has gone away and is trying to be reallocated. You should attempt to disconnect from the currently connected voice server, and not attempt to reconnect until a new voice server is allocated.
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerPresences">
            <summary>
            An event container storing an event that fires when someone's presence (e.g. online, away, etc.) changes.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerPresences.OnPresenceUpdated">
            <summary>
            An event that fires when a member's presence is updated. The presence object contains the corresponding member ID. The old presence may be null.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>presenceBefore, presenceAfter</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerReactions">
            <summary>
            A container for reaction events.
            </summary>
        </member>
        <member name="M:EtiBotCore.Client.EventContainers.EventContainerReactions.#ctor">
            <summary>
            An event container storing information for when a reaction is added or removed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerReactions.OnReactionAdded">
            <summary>
            An event that fires when a reaction is added to a message.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>onMessage, emoji, reactor</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerReactions.OnReactionRemoved">
            <summary>
            An event that fires when a reaction is removed from a message.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>onMessage, emoji, reactor</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerReactions.OnAllReactionsRemoved">
            <summary>
            An event that fires when all reactions are removed from a message.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>onMessage</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerReactions.OnAllReactionsOfEmojiRemoved">
            <summary>
            An event that fires when all reactions of a specific emoji are removed from a message.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>onMessage, emoji</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerTyping">
            <summary>
            An event container storing an event that fires when someone starts typing in a text channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerTyping.OnTypingStarted">
            <summary>
            Fires when a user starts typing in a channel.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>user, inChannel, atTime</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerVoiceStates">
            <summary>
            A container for events pertaining to the voice chat presence of a member or user.
            </summary>
        </member>
        <member name="F:EtiBotCore.Client.EventContainers.EventContainerVoiceStates.OnVoiceStateChanged">
            <summary>
            An event that fires when the voice state of a member changes. The input channelId could be <see cref="F:EtiBotCore.Data.Structs.Snowflake.Invalid"/> under certain events, such as if they left the channel.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>voiceStateBefore, voiceStateAfter, serverId, channelId</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Client.EventContainers.EventContainerWebhooks">
            <summary>
            An event container for webhook changes, creations, or deletions.
            </summary>
        </member>
        <member name="P:EtiBotCore.Client.EventContainers.EventContainerWebhooks.OnWebhooksUpdated">
            <summary>
            An event that fires when the webhooks associated with a given channel update.
            </summary>
            <remarks>
            <strong>Parameters:</strong> <c>server, channel</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Clockwork.HeartbeatClockwork">
            <summary>
            A utility class that helps to manage heartbeating from an active <see cref="T:EtiBotCore.Client.DiscordClient"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.HeartbeatClockwork.TimeoutMS">
            <summary>
            If a heartbeat acknowledge is not received this much time after sending it, the connection is assumed to have died.<para/>
            <strong>Default:</strong> 15000
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.HeartbeatClockwork.LatencyMS">
            <summary>
            The time between a heartbeat and an acknowledge.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.HeartbeatClockwork.HasUnacknowledgedHeartbeat">
            <summary>
            Whether or not a heartbeat has been sent but not yet acknowledged.
            </summary>
        </member>
        <member name="F:EtiBotCore.Clockwork.HeartbeatClockwork.TokenSource">
            <summary>
            Provides the <see cref="T:System.Threading.CancellationToken"/> that stops this <see cref="T:EtiBotCore.Clockwork.HeartbeatClockwork"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Clockwork.HeartbeatClockwork.TimedOut">
            <summary>
            A delegate method run when the <see cref="T:EtiBotCore.Clockwork.HeartbeatClockwork"/> times out.
            </summary>
        </member>
        <member name="E:EtiBotCore.Clockwork.HeartbeatClockwork.OnTimedOut">
            <summary>
            Fired when a heartbeat acknowledge does not come back after <see cref="P:EtiBotCore.Clockwork.HeartbeatClockwork.TimeoutMS"/> ms
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.HeartbeatClockwork.Running">
            <summary>
            Whether or not this <see cref="T:EtiBotCore.Clockwork.HeartbeatClockwork"/> is running.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.HeartbeatClockwork.HasTimedOut">
            <summary>
            Whether or not this <see cref="T:EtiBotCore.Clockwork.HeartbeatClockwork"/> has timed out and must be restarted.
            </summary>
        </member>
        <member name="M:EtiBotCore.Clockwork.HeartbeatClockwork.#ctor(System.Boolean)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Clockwork.HeartbeatClockwork"/>.
            </summary>
            <param name="startAutomatically">If <see langword="true"/>, the <see cref="M:EtiBotCore.Clockwork.HeartbeatClockwork.StartChecking"/> method will be automatically called.</param>
        </member>
        <member name="M:EtiBotCore.Clockwork.HeartbeatClockwork.Sent">
            <summary>
            Should be called when a heartbeat is sent to Discord.
            </summary>
        </member>
        <member name="M:EtiBotCore.Clockwork.HeartbeatClockwork.Acknowledged">
            <summary>
            Should be called when a heartbeat is acknowledged from Discord.
            </summary>
        </member>
        <member name="M:EtiBotCore.Clockwork.HeartbeatClockwork.StopChecking">
            <summary>
            Stops the timer process and resets everything to its original state.
            </summary>
        </member>
        <member name="M:EtiBotCore.Clockwork.HeartbeatClockwork.StartChecking">
            <summary>
            Starts the timer process.
            </summary>
        </member>
        <member name="M:EtiBotCore.Clockwork.HeartbeatClockwork.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Clockwork.OperationClockwork">
            <summary>
            A system that can be used to limit the rate of an arbitrary operation.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.OperationClockwork.Interval">
            <summary>
            The time that must be delayed between attempts at setting this in milliseconds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.OperationClockwork.LastEpochSet">
            <summary>
            The last epoch that this was set at, in milliseconds.
            </summary>
        </member>
        <member name="M:EtiBotCore.Clockwork.OperationClockwork.OperationPerformed">
            <summary>
            Signals that this operation has ticked, and updates the timer internally that limits the rate.<para/>
            Throws an <see cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException"/> if this is called more than once per <see cref="P:EtiBotCore.Clockwork.OperationClockwork.Interval"/> milliseconds.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException">If this called more than once per <see cref="P:EtiBotCore.Clockwork.OperationClockwork.Interval"/> milliseconds</exception>
        </member>
        <member name="M:EtiBotCore.Clockwork.OperationClockwork.#ctor(System.Int32)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Clockwork.OperationClockwork"/> with the given interval.<para/>
            The interval's default is one minute.
            </summary>
            <param name="interval">The interval between when this property can be set in milliseconds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="interval"/> is less than zero.</exception>
        </member>
        <member name="T:EtiBotCore.Clockwork.PropertyClockwork">
            <summary>
            A class that manages the updates performed on a property, limiting the interval in which it can be set.<para/>
            Consider using the typed variant <see cref="T:EtiBotCore.Clockwork.PropertyClockwork`1"/> if possible.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.PropertyClockwork.Interval">
            <summary>
            The time that must be delayed between attempts at setting this in milliseconds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.PropertyClockwork.LastEpochSet">
            <summary>
            The last epoch that this was set at, in milliseconds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Clockwork.PropertyClockwork.Value">
            <summary>
            The value stored within this property.<para/>
            <see langword="set"/> may throw an <see cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException"/> if this property is edited more than once per <see cref="P:EtiBotCore.Clockwork.PropertyClockwork.Interval"/> milliseconds.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException">If this property is set more than once per <see cref="P:EtiBotCore.Clockwork.PropertyClockwork.Interval"/> milliseconds</exception>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork.Get">
            <summary>
            An alias method to <see cref="P:EtiBotCore.Clockwork.PropertyClockwork.Value"/>.<see langword="get"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork.Set(System.Object)">
            <summary>
            An alias method to <see cref="P:EtiBotCore.Clockwork.PropertyClockwork.Value"/>.<see langword="set"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork.#ctor(System.Int32,System.Object)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Clockwork.PropertyClockwork"/> with the given interval and default value.<para/>
            The interval's default is one minute.
            </summary>
            <param name="interval">The interval between when this property can be set in milliseconds.</param>
            <param name="defaultValue">The default value that this property is initialized with.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="interval"/> is less than zero.</exception>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork.#ctor(System.Object)">
            <summary>
            Creates a nwe <see cref="T:EtiBotCore.Clockwork.PropertyClockwork"/> with the that lasts one minute with the given default value.
            </summary>
            <param name="defaultValue">The default value that this property is initialized with.</param>
        </member>
        <member name="T:EtiBotCore.Clockwork.PropertyClockwork`1">
            <summary>
            A class that manages the updates performed on a property, limiting the interval in which it can be set.
            </summary>
            <typeparam name="T">The type of object that this clockwork looks over.</typeparam>
        </member>
        <member name="P:EtiBotCore.Clockwork.PropertyClockwork`1.Value">
            <summary>
            The value stored within this property.<para/>
            <see langword="set"/> may throw an <see cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException"/> if this property is edited more than once per  milliseconds.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException">If this property is set more than once per  milliseconds</exception>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork`1.Get">
            <summary>
            An alias method to <see cref="P:EtiBotCore.Clockwork.PropertyClockwork`1.Value"/>.<see langword="get"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork`1.Set(`0)">
            <summary>
            An alias method to <see cref="P:EtiBotCore.Clockwork.PropertyClockwork`1.Value"/>.<see langword="set"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork`1.Set(System.Object)">
            <summary>
            Not implemented in <see cref="T:EtiBotCore.Clockwork.PropertyClockwork`1"/> -- This is defined to hide it from the inherited <see cref="T:EtiBotCore.Clockwork.PropertyClockwork"/>.
            </summary>
            <param name="_"></param>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork`1.#ctor(System.Int32,`0)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Clockwork.PropertyClockwork`1"/> with the given interval and default value.<para/>
            The interval's default is one minute.
            </summary>
            <param name="interval">The interval between when this property can be set in milliseconds.</param>
            <param name="defaultValue">The default value that this property is initialized with.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="interval"/> is less than zero.</exception>
        </member>
        <member name="M:EtiBotCore.Clockwork.PropertyClockwork`1.#ctor(`0)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Clockwork.PropertyClockwork`1"/> that lasts one minute with the given default value.
            </summary>
            <param name="defaultValue">The default value that this property is initialized with.</param>
        </member>
        <member name="T:EtiBotCore.Data.Constants">
            <summary>
            A collection of constant values.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.INVALID_ENUM_NAME_ERROR">
            <summary>
            An exception message used for setting enum items in <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>s.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.GUILD_OUTAGE">
            <summary>
            For an <see cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException"/> thrown by a <see cref="T:EtiBotCore.DiscordObjects.Universal.Guild"/>.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.UNSENT_STRING_DEFAULT">
            <summary>
            A placeholder for use in payloads when a string value is not sent, and in cases where the string is also optional (to be specific, in scenarios where <see langword="null"/> would have two meanings).<para/>
            In general, this should only be used if <see cref="F:System.String.Empty"/> is a legal value for the given text (rendering that ambiguous as well).
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.REGEX_ANY_MENTION">
            <summary>
            A regex string matches a mention to a user or role. Examples include:
            <list type="bullet">
            <item>
            <term>User</term>
            <description>&lt;@0123456789&gt;</description>
            </item>
            <item>
            <term>User</term>
            <description>&lt;@!0123456789&gt; (n.b. this is identical to the first. It used to force display the nickname of the user but this is no longer the case.)</description>
            </item>
            <item>
            <term>Role</term>
            <description>&lt;@&amp;0123456789&gt;</description>
            </item>
            </list>
            The match will have three groups. The first is the opening entry (with the less than symbol and @ / other symbols), the second is the ID, and the third is the closing symbol.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.REGEX_USER_MENTION">
            <summary>
            A regex string that matches a mention to a user. Examples include:
            <list type="bullet">
            <item>
            <term>Form A</term>
            <description><c>&lt;@0123456789&gt;</c></description>
            </item>
            <item>
            <term>Form B</term>
            <description><c>&lt;@!0123456789&gt;</c> (n.b. this is identical to the first. It used to force display the nickname of the user but this is no longer the case.)</description>
            </item>
            </list>
            The match will have three groups. The first is the opening entry (with the less than symbol and @ / other symbols), the second is the ID, and the third is the closing symbol.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.REGEX_ROLE_MENTION">
            <summary>
            A regex string matches a mention to a role: <c>&lt;@&amp;0123456789&gt;</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Constants.REGEX_CHANNEL">
            <summary>
            A regex string matches a mention to a user or channel: <c>&lt;#0123456789&gt;</c>
            </summary>
        </member>
        <member name="T:EtiBotCore.Data.Container.DiscordObjectContainer">
            <summary>
            A generic container of <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>s.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Container.DiscordObjectContainer.Creator">
            <summary>
            The <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> that instantiated this <see cref="T:EtiBotCore.Data.Container.DiscordObjectContainer"/>
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Container.DiscordObjectContainer.Property">
            <summary>
            The name of the property that this <see cref="T:EtiBotCore.Data.Container.DiscordObjectContainer"/> exists in.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Container.DiscordObjectContainer.RemoveIfSetToNull">
            <summary>
            Whether or not to remove an object if it is set to null.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.SingularChange">
            <summary>
            Must be manually unset. If only one item was added or removed to this, this is the object that was added or removed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.HasChangedYet">
            <summary>
            Coupled with <see cref="P:EtiBotCore.Data.Container.DiscordObjectContainer.SingularChange"/>, this keeps track of if a change has occurred yet.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.WasChangeRemoval">
            <summary>
            <see langword="false"/> if the change was something added, and <see langword="true"/> if the change was something removed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.DeleteIfRemoved">
            <summary>
            If the object is removed from this list, delete it.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.Count">
            <inheritdoc cref="P:System.Collections.Generic.List`1.Count"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.IsSortable">
            <summary>
            Returns whether or not <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> is sortable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.IsReadOnly">
            <summary>
            Whether or not this container is read-only.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.ExtraRequirementDelegate">
            <summary>
            Any extra requirements to check in terms of permissions. Returns an exception to throw if something isn't right.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer.Item(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the object in this container with the given ID, or <see langword="null"/> if it could not be found.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Add(EtiBotCore.DiscordObjects.DiscordObject)">
            <summary>
            Adds <paramref name="obj"/> to this container.
            </summary>
            <inheritdoc cref="M:EtiBotCore.Data.Container.DiscordObjectContainer.VerifyAllRequirements"/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Remove(EtiBotCore.DiscordObjects.DiscordObject)">
            <summary>
            Removes <paramref name="obj"/> from this container, or does nothing if it's not here.
            </summary>
            <inheritdoc cref="M:EtiBotCore.Data.Container.DiscordObjectContainer.VerifyAllRequirements"/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Remove(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Removes the object from this container with the given snowflake.
            </summary>
            <param name="objWithId"></param>
            <inheritdoc cref="M:EtiBotCore.Data.Container.DiscordObjectContainer.VerifyAllRequirements"/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Contains(EtiBotCore.DiscordObjects.DiscordObject)">
            <summary>
            Returns whether or not this container contains the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Contains(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns whether or not this container contains an object with the given ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Contains(System.Predicate{EtiBotCore.Data.Structs.Snowflake})">
            <summary>
            Returns whether or not this container contains an object that satisfies the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.SetTo(System.Collections.Generic.IEnumerable{EtiBotCore.DiscordObjects.DiscordObject})">
            <summary>
            Used in update calls, sets the contents of this container to the given object unless the creator object is being edited.<para/>
            Ignores the readonly state of this object (see <see cref="P:EtiBotCore.Data.Container.DiscordObjectContainer.IsReadOnly"/>), as this is used for data storage updates.
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.GetHighestElement">
            <summary>
            Returns the highest <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>, or, whichever has the highest ID.
            <strong>Note:</strong> This sorts every time it is called.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.ToIDArray(System.Predicate{EtiBotCore.DiscordObjects.DiscordObject})">
            <summary>
            Converts this container to an array of IDs for all objects in this container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.#ctor(EtiBotCore.DiscordObjects.DiscordObject,System.Boolean,System.Boolean,System.String)">
            <summary>
            Construct a new container with the given object.
            </summary>
            <param name="source">The <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> that contains this container.</param>
            <param name="isReadonly">If this container cannot be written to.</param>
            <param name="removeIfSetToNull">If <see langword="true"/>, setting any index to <see langword="null"/> will remove it rather than actually setting it to <see langword="null"/></param>
            <param name="propertyName">The name of the property in the source object that is set to this container. This is automatically populated by default.</param>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.VerifyAllRequirements">
            <summary>
            Used to throw necessary exceptions.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this container is read only.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If the object with this container has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If the object that has this container is not available for any reason.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If this container cannot be edited.</exception>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Reset">
            <summary>
            Sets <see cref="P:EtiBotCore.Data.Container.DiscordObjectContainer.HasChangedYet"/>, <see cref="P:EtiBotCore.Data.Container.DiscordObjectContainer.SingularChange"/>, and <see cref="P:EtiBotCore.Data.Container.DiscordObjectContainer.WasChangeRemoval"/> to their <see langword="default"/>s.<para/>
            This is used to tell this container that its changes have been acknowledged by the parent's SendChangesToDiscord method.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.Clone">
            <summary>
            Returns a shallow copy of this <see cref="T:EtiBotCore.Data.Container.DiscordObjectContainer`1"/>, with the exception that the list is not copied by reference (though its stored objects are)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer.ToList">
            <summary>
            Converts this <see cref="T:EtiBotCore.Data.Container.DiscordObjectContainer"/> to a <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Data.Container.DiscordObjectContainer`1">
            <summary>
            A class similar to <see cref="T:System.Collections.Generic.List`1"/> that stores a number of <typeparamref name="T"/>, but it has code to handle when something is added or removed. Specifically, it will verify whether or not the object is locked.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EtiBotCore.Data.Container.DiscordObjectContainer`1.Item(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the object in this container with the given ID, or <see langword="null"/> if it could not be found.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Add(`0)">
            <summary>
            Adds <paramref name="obj"/> to this container.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Remove(`0)">
            <summary>
            Removes <paramref name="obj"/> from this container, or does nothing if it's not here.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Clear(System.Predicate{`0})">
            <summary>
            Removes all objects from this container.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.ClearInternally">
            <summary>
            Akin to <see cref="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Clear(System.Predicate{`0})"/>, but this does not signal a change.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Contains(`0)">
            <summary>
            Returns whether or not this container contains the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Contains(System.Predicate{`0})">
            <summary>
            Returns whether or not this container contains an object that satisfies the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.SetTo(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Used in update calls, sets the contents of this container to the given object unless the creator object is being edited.<para/>
            Ignores the readonly state of this object (see <see cref="P:EtiBotCore.Data.Container.DiscordObjectContainer.IsReadOnly"/>), as this is used for data storage updates.
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.ToIDArray(System.Predicate{`0})">
            <summary>
            Converts this container to an array of IDs for all objects in this container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.ToArray(System.Predicate{`0})">
            <summary>
            Converts this container to an array of the given object type for all objects in this container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.#ctor(EtiBotCore.DiscordObjects.DiscordObject,System.Boolean,System.Boolean,System.String)">
            <summary>
            Construct a new container with the given object.
            </summary>
            <param name="source">The <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> that contains this container.</param>
            <param name="isReadonly">If this container cannot be written to.</param>
            <param name="removeIfSetToNull">If <see langword="true"/>, setting any index to <see langword="null"/> will remove it rather than actually setting it to <see langword="null"/></param>
            <param name="propertyName">The name of the property in the source object that is set to this container. This is automatically populated by default.</param>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.Clone">
            <summary>
            Returns a shallow copy of this <see cref="T:EtiBotCore.Data.Container.DiscordObjectContainer`1"/>, with the exception that the list is not copied by reference (though its stored objects are)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Container.DiscordObjectContainer`1.ToList">
            <summary>
            Converts this <see cref="T:EtiBotCore.Data.Container.DiscordObjectContainer"/> to a <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Data.Container.GuildFeatureInformation">
            <summary>
            Stores information on what features a guild has enabled.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.CanUseAnimatedIcon">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.ANIMATED_ICON"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.CanUseBanner">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.BANNER"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.CanUseInviteSplash">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.INVITE_SPLASH"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.CanUseWelcomeScreen">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.WELCOME_SCREEN_ENABLED"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.CanUseVanityURL">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.VANITY_URL"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsCommerceServer">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.COMMERCE"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsNewsServer">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.NEWS"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsCommunityServer">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.COMMUNITY"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsDiscoverable">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.DISCOVERABLE"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsFeaturable">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.FEATURABLE"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsPartnered">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.PARTNERED"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.IsVerified">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.VERIFIED"/>
        </member>
        <member name="P:EtiBotCore.Data.Container.GuildFeatureInformation.CanAccessVIPVoiceRegions">
            <inheritdoc cref="F:EtiBotCore.Payloads.Data.GuildFeatures.VIP_REGIONS"/>
        </member>
        <member name="T:EtiBotCore.Data.EmojiLookup">
            <summary>
            Provides a means of acquiring a unicode emoji from its CLDR name. This is acquired from unicode.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.EmojiLookup.EmojiNameToEmoji">
            <summary>
            A binding from emoji name (e.g. <c>:slight_smile:</c>) to its corresponding emoji 🙂
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.EmojiLookup.GetEmoji(System.String)">
            <summary>
            Using an emoji name (e.g. <c>slight_smile</c>) this will return its corresponding emoji 🙂<para/>
            If the surrounding :s are provided, they will be removed.
            </summary>
            <remarks>
            This is identical to directly referencing <see cref="F:EtiBotCore.Data.EmojiLookup.EmojiNameToEmoji"/>, with the exception that it will return null instead of error if a name is invalid.
            </remarks>
            <param name="name"></param>
        </member>
        <member name="T:EtiBotCore.Data.JsonConversion.EnumConverter">
            <summary>
            Designed to convert payload enums. Default behavior converts enums to int32, but for some enums (e.g. <see cref="T:EtiBotCore.Payloads.Data.StatusType"/>) it will get their string.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.JsonConversion.EnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Enum,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.JsonConversion.EnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Enum,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Data.JsonConversion.IntStringConverter">
            <summary>
            Designed specifically for <see cref="P:EtiBotCore.Payloads.PayloadObjects.Message.Nonce"/>, this will ensure that the input value (<see cref="T:System.Int32"/> or <see cref="T:System.String"/>) is always serialized as a string. It is a lazy method.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.JsonConversion.IntStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.JsonConversion.IntStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Data.JsonConversion.TimestampConverter">
            <summary>
            Converts <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> objects to and from Json
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.JsonConversion.TimestampConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{EtiBotCore.Data.Structs.ISO8601},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.JsonConversion.TimestampConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{EtiBotCore.Data.Structs.ISO8601},Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Data.Net.CompressionController">
            <summary>
            Provides methods of easily translating between byte data to and from <see cref="T:EtiBotCore.Payloads.Payload"/>s.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Net.CompressionController.DecompressIntoPayload(System.Byte[],System.Boolean)">
            <summary>
            Given a <see cref="T:System.Byte"/>[] presumably acquired via <see cref="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)"/>, this will decompress it (if needed) and return the included Json string.
            </summary>
            <param name="data"></param>
            <param name="isBinary"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Net.CompressionController.CompressPayload(EtiBotCore.Payloads.Payload)">
            <summary>
            Given a <see cref="T:EtiBotCore.Payloads.Payload"/>, this will convert it to its Json string and compress that string using ZLib.
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Data.Net.RateLimitBucket">
            <summary>
            Represents a rate-limit bucket, which manages how many requests can be sent to an endpoint and when.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.Epoch">
            <summary>
            The current epoch in seconds, including millisecond decimal precision.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.BeingRateLimited">
            <summary>
            Whether or not this bucket is being rate limited and cannot handle requests.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.Name">
            <summary>
            The name of this bucket.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.Capacity">
            <summary>
            The number of requests that can be made to this bucket per reset interval.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.Remaining">
            <summary>
            The number of remaining requests.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.RefillAfter">
            <summary>
            How many seconds until this bucket refills. Can have decimals.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.ResetAt">
            <summary>
            If this is being rate limited, this is when the limit gets removed (epoch in seconds).
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Net.RateLimitBucket.RateLimitDuration">
            <summary>
            How many milliseconds are left in the current rate limit, or 0 if there is no limit.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Net.RateLimitBucket.RefillOccursAt">
            <summary>
            When the next refill occurs.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Net.RateLimitBucket.YieldAndPerform">
            <summary>
            Yields for any rate limits or for the request bucket to refill if needed, and then spends one request.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Net.RateLimitBucket.Update(EtiBotCore.Utility.Networking.DiscordRateLimitHeader)">
            <summary>
            Updates all values in this bucket from the given header.
            </summary>
            <param name="rlHeader"></param>
        </member>
        <member name="M:EtiBotCore.Data.Net.RateLimitBucket.GetAndUpdateOrCreate(EtiBotCore.Utility.Networking.DiscordRateLimitHeader)">
            <summary>
            Gets an existing bucket from this header and updates it from the given header, or creates a new one.<para/>
            This will return <see langword="null"/> if this is a global bucket (granted a bucket doesn't exist already) or if the header input was empty. If one does already exist, it will be returned, but not updated.
            </summary>
            <param name="rlHeader"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Data.PayloadEventRegistry">
            <summary>
            Provides a method of getting the event name for a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.PayloadEventRegistry.EventToTypeBinding">
            <summary>
            A binding from event name to its associated <see cref="T:System.Type"/> (e.g. <c>PRESENCE_UPDATE</c> to <see cref="T:EtiBotCore.Payloads.Events.Intents.GuildPresences.PresenceUpdateEvent"/>).
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.PayloadEventRegistry.GetTypeFromEventName(System.String)">
            <summary>
            Given an event name, this returns its associated <see cref="T:System.Type"/> from <see cref="P:EtiBotCore.Data.PayloadEventRegistry.EventToTypeBinding"/>, or <see langword="null"/> if no associated <see cref="T:System.Type"/> was found.
            </summary>
            <param name="eventName">The name of the event as Discord sends it, e.g. <c>PRESENCE_UPDATE</c>.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.PayloadEventRegistry.CreateInstanceForEventPayload``1(EtiBotCore.Payloads.Payload)">
            <summary>
            Given a <see cref="T:EtiBotCore.Payloads.Payload"/>, this will look at its event name and return an instance of the corresponding event as the given type.
            </summary>
            <typeparam name="T">The specific event type to return.</typeparam>
            <param name="payload">The payload that contains the event.</param>
            <returns>An instance of the given event type <typeparamref name="T"/> acquired from the payload.</returns>
            <exception cref="T:System.ArgumentException">If the payload's opcode is not <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.Dispatch"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.ValueNotFoundException">If the payload's event name could not be resolved.</exception>
        </member>
        <member name="M:EtiBotCore.Data.PayloadEventRegistry.CreateInstanceForEventPayload(EtiBotCore.Payloads.Payload)">
            <summary>
            Given a <see cref="T:EtiBotCore.Payloads.Payload"/>, this will look at its event name and return an instance of the corresponding event.
            </summary>
            <param name="payload">The payload that contains the event.</param>
            <returns>An instance of the given event from the payload.</returns>
            <exception cref="T:System.ArgumentException">If the payload's opcode is not <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.Dispatch"/>, or if the payload's <see cref="P:EtiBotCore.Payloads.Payload.Data"/> field is not a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.ValueNotFoundException">If the payload's event name could not be resolved.</exception>
        </member>
        <member name="M:EtiBotCore.Data.PayloadEventRegistry.Initialize">
            <summary>
            This is used to reference this class. The method does nothing but trigger the static class initializer if it hasn't been triggered already.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.PayloadEventRegistry.GetEventName(System.Type)">
            <summary>
            Returns the event name from the given type's name.
            </summary>
            <param name="payloadEventType"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Data.Structs.ISO8601">
            <summary>
            An ISO8601 Timestamp
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.ISO8601.Epoch">
            <summary>
            An <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> equivalent to <see cref="F:System.DateTimeOffset.UnixEpoch"/>.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.ISO8601.Timestamp">
            <summary>
            The string timestamp of this <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> timestamp.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.ISO8601.DateTime">
            <summary>
            The equivalent <see cref="F:EtiBotCore.Data.Structs.ISO8601.DateTime"/> of this <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> timestamp.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.#ctor(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> into an <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> timestamp.
            </summary>
            <param name="timestamp">The ISO8601 timestamp to convert into this struct.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="timestamp"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">If <paramref name="timestamp"/> is not a valid ISO8601 timestamp.</exception>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.#ctor(System.DateTime)">
            <summary>
            Converts the given <see cref="T:System.DateTime"/> into an <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> timestamp.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.#ctor(System.DateTimeOffset)">
            <summary>
            Converts the given <see cref="T:System.DateTimeOffset"/> into an <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> timestamp.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.ToString">
            <returns>The same string as <see cref="F:EtiBotCore.Data.Structs.ISO8601.Timestamp"/></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.Equals(EtiBotCore.Data.Structs.ISO8601)">
            <summary>
            Returns whether or not this <see cref="T:EtiBotCore.Data.Structs.ISO8601"/> has the same time that is stored inside the given <see cref="T:EtiBotCore.Data.Structs.ISO8601"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.Equals(System.String)">
            <summary>
            Returns whether or not <see cref="F:EtiBotCore.Data.Structs.ISO8601.Timestamp"/> is equal to the given string.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.Equals(System.DateTime)">
            <summary>
            Returns whether or not this <see cref="F:EtiBotCore.Data.Structs.ISO8601.DateTime"/> is equal to the given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.ISO8601.Equals(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Data.Structs.Snowflake">
            <summary>
            All Discord IDs are a special object known as a "Snowflake" (see <see href="https://discord.com/developers/docs/reference#snowflakes"/>)<para/>
            By default, these are encoded as 64 bit unsigned integers, but this struct exposes the extra data inside.
            It can be implicitly cast to and from <see cref="T:System.UInt64"/>, making certain conversions and operations incredibly straightforward.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.DISCORD_EPOCH">
            <summary>
            The first second of 2015. Internally, all snowflake timestamps are relative to this value.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.Invalid">
            <summary>
            A <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> constructed from a GUID of 0. Identical to <see langword="default"/>.<para/>
            This <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> does not exist on Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.MinValue">
            <summary>
            The minimum / earliest possible <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> in existence. No <see cref="T:EtiBotCore.Data.Structs.Snowflake"/>s exist on Discord with a value smaller than this.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.MaxValue">
            <summary>
            A <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> with a GUID of 18446744073709551615.
            </summary>
        </member>
        <member name="P:EtiBotCore.Data.Structs.Snowflake.UtcNow">
            <summary>
            A <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> with its time component set to the current time. All other values are zero.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.IsValid">
            <summary>
            Whether or not this snowflake is valid (that is, greater than or equal to <see cref="F:EtiBotCore.Data.Structs.Snowflake.MinValue"/> and less than or equal to <see cref="F:EtiBotCore.Data.Structs.Snowflake.MaxValue"/>)
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.Value">
            <summary>
            The ulong value assembled from this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/>
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.Timestamp">
            <summary>
            The unix epoch timestamp of this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> in milliseconds, which corresponds to its creation.<para/>
            Note: This already accomodates for <see cref="F:EtiBotCore.Data.Structs.Snowflake.DISCORD_EPOCH"/> -- This is a true unix epoch value, and is <strong>not</strong> relative to the Discord epoch.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.InternalWorkerID">
            <summary>
            The internal worker ID of this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/>, which is something specific to Discord and is probably useless to you.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.InternalProcessID">
            <summary>
            The internal process ID of this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/>, which is something specific to Discord and is probably useless to you.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.Snowflake.Increment">
            <summary>
            The <em>n</em>th ID generated on the process that this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> was generated on (denoted by <see cref="F:EtiBotCore.Data.Structs.Snowflake.InternalProcessID"/>).
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.#ctor(System.UInt64)">
            <summary>
            Create a new snowflake from the given ulong ID.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.ToDateTimeOffset">
            <summary>
            Translates <see cref="F:EtiBotCore.Data.Structs.Snowflake.Timestamp"/> into a new <see cref="T:System.DateTimeOffset"/>, which reflects the creation time of this Snowflake.
            </summary>
            <remarks>
            This timestamp will always be relative to UTC+0 and requires no further conversion in the scope of the <see cref="F:EtiBotCore.Data.Structs.Snowflake.DISCORD_EPOCH"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.FromDateTimeOffset(System.DateTimeOffset,System.Boolean)">
            <summary>
            Constructs a <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> from the given <see cref="T:System.DateTimeOffset"/>. This sets all other internal values to 0 (the worker and process IDs as well as the increment).
            </summary>
            <param name="time">The desired timestamp of the fabricated <see cref="T:EtiBotCore.Data.Structs.Snowflake"/></param>
            <param name="maxInternalData">If <see langword="true"/>, the internal data (worker ID, process ID, and increment) will be set to the highest available values.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.TryParse(System.String,EtiBotCore.Data.Structs.Snowflake@)">
            <summary>
            Tries to convert a string representation of a numeric snowflake into its <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> equivalent. Effectively identical to <see cref="M:System.UInt64.TryParse(System.String,System.UInt64@)"/>
            </summary>
            <inheritdoc cref="M:System.UInt64.TryParse(System.String,System.UInt64@)"/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.Parse(System.String)">
            <summary>
            Converts a string representation of a snowflake into its <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> equivalent.
            </summary>
            <returns>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s"/>, represented as a <see cref="T:EtiBotCore.Data.Structs.Snowflake"/>.</returns>
            <inheritdoc cref="M:System.UInt64.Parse(System.String)"/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.TryExtract(System.String,EtiBotCore.Data.Structs.Snowflake@,EtiBotCore.Data.Structs.SnowflakeType@)">
            <summary>
            Given a numeric snowflake, a mention to a user or role, or a channel link, this will attempt to extract the snowflake.
            </summary>
            <param name="s"></param>
            <param name="result"></param>
            <param name="type">The type of snowflake this is.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.op_Implicit(EtiBotCore.Data.Structs.Snowflake)~System.UInt64">
            <summary>
            Translates this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> by providing <see cref="F:EtiBotCore.Data.Structs.Snowflake.Value"/>.
            </summary>
            <param name="sf"></param>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.op_Implicit(System.UInt64)~EtiBotCore.Data.Structs.Snowflake">
            <summary>
            Constructs a new <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> from the given <see cref="T:System.UInt64"/> ID.
            </summary>
            <param name="ul"></param>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.Equals(EtiBotCore.Data.Structs.Snowflake)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.Equals(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.Equals(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.ToString">
            <summary>
            Returns <see cref="F:EtiBotCore.Data.Structs.Snowflake.Value"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.ToRichString">
            <summary>
            Returns a more descriptive string containing all applicable fields of this <see cref="T:EtiBotCore.Data.Structs.Snowflake"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.GetDisplayTimestampMS">
            <summary>
            Returns a <see cref="T:System.String"/> timestamp formatted with milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.CompareTo(EtiBotCore.Data.Structs.Snowflake)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.CompareTo(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Data.Structs.Snowflake.CompareTo(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Data.Structs.SnowflakeType">
            <summary>
            A type of object that a <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> represents.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.SnowflakeType.Ambiguous">
            <summary>
            This <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> could be anything, as it was given as a raw ID.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.SnowflakeType.User">
            <summary>
            This <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> is a user's ID.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.SnowflakeType.Role">
            <summary>
            This <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> is a role's ID.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.SnowflakeType.Guild">
            <summary>
            This <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> is a server's ID.
            </summary>
        </member>
        <member name="F:EtiBotCore.Data.Structs.SnowflakeType.Channel">
            <summary>
            This <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> is a channel's ID.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Base.ChannelBase">
            <summary>
            The base class for all channels. While they are a single object, the API differentiates them between guild channel types and DM channel types.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Base.ChannelBase.GetChannel">
            <summary>
            Params: <c>channelId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Base.ChannelBase.ModifyChannel">
            <summary>
            Params: <c>channelId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Base.ChannelBase.DeleteChannel">
            <summary>
            Params: <c>channelId</c>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.ChannelBase.Mention">
            <summary>
            The jump link to this channel <c>#channelname</c> formatted with its ID so that it will always resolve, even in DMs (granted the user is in that server)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.ChannelBase.Type">
            <summary>
            The type of channel that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.ChannelBase.LastMessageID">
            <summary>
            The ID of the latest message, or <see langword="null"/> if this channel cannot have messages (due to being a category or voice channel) or has no messages.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.ChannelBase.LastPinTimestamp">
            <summary>
            The timestamp of when the latest pinned message was added, or <see langword="null"/> if no messages are pinned.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.ChannelBase.OwnerID">
            <summary>
            This can be a number of values, including:
            <list type="number">
            <item>The ID of the creator of a group DM (for group DMs, from which you must manually use the <see cref="T:EtiBotCore.DiscordObjects.Universal.Guild"/> to get a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/>)</item>
            <item>The ID of the creator of a thread (for threads, from which <see cref="M:EtiBotCore.DiscordObjects.Guilds.Thread.GetThreadCreatorAsync"/> can be used to acquire a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/>)</item>
            <item><see langword="null"/> (for any other channel types)</item>
            </list>
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.ChannelBase.#ctor(System.UInt64,EtiBotCore.Payloads.Data.ChannelType)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.ChannelBase.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.ChannelBase.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.ChannelBase.SendChangesToDiscordCustom(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Base.DMChannel">
            <summary>
            Represents a channel for a direct message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.DMChannel.ApplicationID">
            <summary>
            The ID of the application that created this DM if it's a group DM, or <see langword="null"/> if a human started it.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.DMChannel.IconHash">
            <summary>
            The hash of the DM's icon, if it's a group DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.DMChannel.Recipients">
            <summary>
            The users in this DM.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessageAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Gets a message with the given ID from this channel, or downloads it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetAllMessagesAsync(System.Int32)">
            <summary>
            Downloads all messages in this channel and populates them into this channel's message storage. The messages are guaranteed to be in chronological order.
            </summary>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If amount is less than 0 or greater than 100.</exception>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessagesBeforeAsync(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns all messages in this channel sent before the given time. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="time">The latest time that a message can be sent at to qualify for download.</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessagesBeforeAsync(EtiBotCore.Data.Structs.Snowflake,System.Int32)">
            <summary>
            Returns all messages in this channel sent before the given message. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="message">The latest message that can be downloaded (non-inclusive -- this message won't be included in the list)</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessagesAfterAsync(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns all messages in this channel sent after the given time. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="time">The latest time that a message can be sent at to qualify for download.</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessagesAfterAsync(EtiBotCore.Data.Structs.Snowflake,System.Int32)">
            <summary>
            Returns all messages in this channel sent after the given message. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="message">The latest message that can be downloaded (non-inclusive -- this message won't be included in the list)</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessagesAroundAsync(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns all messages in this channel sent around the given time. How many is "around"? No idea! Discord doesn't say.
            </summary>
            <param name="time">The latest time that a message can be sent at to qualify for download.</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetMessagesAroundAsync(EtiBotCore.Data.Structs.Snowflake,System.Int32)">
            <summary>
            Returns all messages in this channel sent around the given message. How many is "around"? No idea! Discord doesn't say.
            </summary>
            <param name="message">The latest message that can be downloaded (non-inclusive -- this message won't be included in the list)</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.SendMessageAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed,EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions,System.IO.FileInfo[])">
            <summary>
            Sends a message in this channel.
            </summary>
            /// <remarks>
            By default, specifying no <paramref name="mentionLimits"/> will allow anything and everything to be pinged, and will also ping the person that's being replied to.
            </remarks>
            <param name="text">The text to send.</param>
            <param name="embed">The embed to send.</param>
            <param name="mentionLimits">Limitations to who or what can or can't be mentioned.</param>
            <param name="attachments">The files to attach.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If text is null or empty AND embed is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.SendReplyMessageAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed,EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions,EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.IO.FileInfo[])">
            <summary>
            Sends a message in this channel.
            </summary>
            /// <remarks>
            By default, specifying no <paramref name="mentionLimits"/> will allow anything and everything to be pinged, and will also ping the person that's being replied to.
            </remarks>
            <param name="text">The text to send.</param>
            <param name="embed">The embed to send.</param>
            <param name="mentionLimits">Limitations to who or what can or can't be mentioned.</param>
            <param name="replyTo">The message to reply to</param>
            <param name="attachments">A file to attach</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If text is null or empty AND embed is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.StartTypingAsync">
            <summary>
            Make it look like the bot is typing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.#ctor(EtiBotCore.Payloads.PayloadObjects.Channel)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetOrCreateAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Gets or creates a DM channel from the given ID. This will download the channel if it doesn't exist.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.GetOrCreateAsync(EtiBotCore.Payloads.PayloadObjects.Channel)">
            <summary>
            Gets or creates a DM channel from the given payload.
            </summary>
            <param name="dmc"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.DMChannel.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase">
            <summary>
            Represents a channel that is in a server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.ServerID">
            <summary>
            The ID of the server that this channel exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Server">
            <summary>
            A reference to the actual server that this channel exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Name">
            <summary>
            The name of this channel.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
            <exception cref="T:System.ArgumentNullException">If the name is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the name contains invalid characters, is shorter than 2 characters, or is longer than 100 characters.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.ParentCategory">
            <summary>
            The ID of the parent category. This can be set in tandem with <see cref="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Position"/> to modify its position in this specific category rather than in the entire channel list.<para/>
            If this is set after <see cref="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Position"/>, and <see cref="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Position"/> is a value beyond the number of channels in this category, then it will be clamped to the end of the category.<para/>
            Raises <see cref="T:System.InvalidOperationException"/> if referenced on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this is referenced in any way on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to edit this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.ParentID">
            <summary>
            The ID of this channel's parent. For traditional guild channels, this will be the ID of their parent category 
            (or null if this channel is not in a category), and for threads, this is the ID of the channel that this thread is a part of.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Permissions">
            <summary>
            The permissions that apply to this channel. If this is a thread, then this references the permissions of the parent channel (see <see cref="P:EtiBotCore.DiscordObjects.Guilds.Thread.ParentChannel"/>).
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to edit this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Position">
            <summary>
            The position of this channel in the list. If <see cref="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.ParentCategory"/> is set as well, then this will be the position relative to the category (where 0 will put it as the first channel, and <c>n</c> will put it as the last).<para/>
            Raises <see cref="T:System.InvalidOperationException"/> if referenced on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this is referenced in any way on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the new value is less than zero or greater than the number of channels in the server, or if <see cref="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.ParentCategory"/> is set, greater than the number of channels in this category.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.#ctor(EtiBotCore.Payloads.PayloadObjects.Channel,EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.Payloads.Data.ChannelType)">
            <summary>
            Instantiates a new <see cref="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase"/> from the given payload, guild, and channel type.
            </summary>
            <param name="payload"></param>
            <param name="guild"></param>
            <param name="type"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.GetFromCache``1(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns a channel from cache that has the given ID, or <see langword="null"/> if it was not instantiated yet (in which case you should call <see cref="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.GetOrCreateAsync``1(EtiBotCore.Payloads.PayloadObjects.Channel,EtiBotCore.DiscordObjects.Universal.Guild)"/>)
            </summary>
            <typeparam name="T">A type of guild channel, or <see cref="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase"/> itself.</typeparam>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.GetOrCreateAsync``1(EtiBotCore.Payloads.PayloadObjects.Channel,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Gets an existing channel or creates a new one of the given type.
            </summary>
            <typeparam name="T">The type of channel to return. If this is <see cref="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase"/>, it will automatically try to figure out what type to return based on the type in the payload.</typeparam>
            <param name="plChannel"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.SendChangesToDiscordCustom(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.CompareTo(EtiBotCore.DiscordObjects.Base.GuildChannelBase)">
            <summary>
            Sorts this channel relative to another by its <see cref="P:EtiBotCore.DiscordObjects.Base.GuildChannelBase.Position"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Base.GuildChannelBase.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.DiscordObject">
            <summary>
            The base class for all things that exist in Discord. Provides a number of utilities relevant to management of these objects between the bot and Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.DiscordObject.Everything">
            <summary>
            All instantiated DiscordObject instances.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.DiscordObject.ObjectLogger">
            <summary>
            A logger that can be used to log stuff about this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.DiscordObject.ID">
            <summary>
            The ID of this object.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.DiscordObject.IsClone">
            <summary>
            Whether or not this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> is a clone of another object.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.DiscordObject.Original">
            <summary>
            Assuming <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.IsClone"/> is <see langword="true"/>, this is the original <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> that it was created from.
            </summary>
            <remarks>
            Due to the singleton setup of this bot framework, this object is very likely in the <em>future</em> relative to this clone (meaning this clone contains old values).
            </remarks>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.#ctor(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> with the given ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the property to the given value, or raises a <see cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"/> if it is locked.
            </summary>
            <typeparam name="T">The type of value that this is.</typeparam>
            <param name="storage">A value used to store the data.</param>
            <param name="value">The desired value.</param>
            <param name="propertyName">The name of the property, which is automatically populated (so it should not be set unless an explicit override is desired).</param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this is called when the object is deleted.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.RegisterChange``1(``0,System.String)">
            <summary>
            For custom container objects, this registers a change.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldValue"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.HasChange(System.String)">
            <summary>
            Returns whether or not a change for the given property is registered.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.EnforcePermissions(EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.DiscordObjects.Base.GuildChannelBase,EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Automatically detects required permissions. Throws <see cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException"/> if the bot in the given server does not have the given permissions.<para/>
            This checks for <see cref="F:EtiBotCore.Payloads.Data.Permissions.Administrator"/>, and if it is present, this will never throw.
            </summary>
            <param name="inServer"></param>
            <param name="inChannel"></param>
            <param name="requiredPermissions"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the given permissions in the given server and channel.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.EnforcePermissions(EtiBotCore.DiscordObjects.Base.GuildChannelBase,EtiBotCore.Payloads.Data.Permissions)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.DiscordObject.EnforcePermissions(EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.DiscordObjects.Base.GuildChannelBase,EtiBotCore.Payloads.Data.Permissions)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.EnforcePermissions(EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Automatically detects required permissions. Throws <see cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException"/> if the bot in the given server does not have the given permissions.<para/>
            This checks for <see cref="F:EtiBotCore.Payloads.Data.Permissions.Administrator"/>, and if it is present, this will never throw.
            </summary>
            <param name="inServer"></param>
            <param name="requiredPermissions"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If the server is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the given permissions in the given server and channel.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.DiscordObject.IgnoresNetworkUpdates">
            <summary>
            If <see langword="true"/>, this object will defer any changes coming in from Discord and is in a writable state.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.DiscordObject.UnlockedEvent">
            <summary>
            An event that can be used to wait until the object is unlocked.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.DiscordObject.Deleted">
            <summary>
            If <see langword="true"/>, this object has been deleted. Attempting to call <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)"/> on a deleted object will throw an <see cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException"/>.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.DiscordObject.Changes">
            <summary>
            The changes that have been made while this object was mutable.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)">
            <summary>
            Must be called before changes can be made to this object.<para/>
            <strong>This will lock the object from network updates. If the object is updated in Discord, the object will IGNORE received network changes until <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.IgnoresNetworkUpdates"/> is false!</strong>
            </summary>
            <param name="waitForUnlock">If <see langword="true"/>, this method will block if the object is currently unlocked (being changed elsewhere) and yield until locked once more before starting changes, This will avoid the <see cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"/>.</param>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.IgnoresNetworkUpdates"/> is already <see langword="false"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.Deleted"/> is <see langword="true"/>.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.ApplyChanges(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Called to signify that changes are done being made. Additionally, this sends the object to Discord. Contrary to <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)"/>, this will NOT throw an <see cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException"/> if the object just so happened to be deleted while being edited.<para/>
            </summary>
            <param name="reasonArray">A complex dictionary binding property names to a reason for why that property was changed. This is used for audit logging on Discord. An example for a Member might be to set <c>["Nickname"] = "Their nickname was inappropriate"</c></param>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.IgnoresNetworkUpdates"/> is already <see langword="true"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException">If this is called too frequently and Discord's rate limits do not permit this.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.ApplyChanges(System.String)">
            <summary>
            Called to signify that changes are done being made. Additionally, this sends the object to Discord. Contrary to <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)"/>, this will NOT throw an <see cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException"/> if the object just so happened to be deleted while being edited.<para/>
            </summary>
            <param name="reason">The reason this was changed. This should generally only be used of all changes are for the same reason, or if it was a single property change.</param>
            <exception cref="T:System.Exception">If any errors occur when trying to run SendChangesToDiscord</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.UndoChanges">
            <summary>
            Restores this object to its previous state when <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)"/> was called, and then sets <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.IgnoresNetworkUpdates"/> to true. This cancels any ongoing edits.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.UpdateFromObject(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <summary>
            Updates this object from a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/> of the same event source type. If <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.IgnoresNetworkUpdates"/> is <see langword="false"/>, this change is deferred and ignored.
            </summary>
            <remarks>
            This should be the method that is called by events.
            </remarks>
            <param name="obj">The object containing the new data.</param>
            <param name="skipNonNullFields">If <see langword="true"/>, then this payload is only part of the object and this method will be called again. As such, fields that aren't null should be left alone (to prevent partial objects from setting things back to null). The initial creation of an object should have this set to <see langword="false"/> to prepare the object properly.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.AppropriateValue``1(``0,``0,System.Boolean)">
            <summary>
            A utility method that returns the value a property should be set to based on <paramref name="skipNonNullFields"/>.<para/>
            If <paramref name="existingValue"/> is not <see langword="null"/>, and if <paramref name="skipNonNullFields"/> is <see langword="true"/>, then <paramref name="existingValue"/> will be returned. Otherwise, <paramref name="newValue"/> will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existingValue">The current value that is available.</param>
            <param name="newValue">The new value that it should be set to.</param>
            <param name="skipNonNullFields">If <see langword="true"/>, and if <paramref name="existingValue"/> is not <see langword="null"/>, then <paramref name="existingValue"/> will be returned instead of <paramref name="newValue"/>.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.AppropriateNullableValue``1(``0,``0,System.Boolean)">
            <summary>
            A utility method that returns the value a property should be set to based on <paramref name="skipNonNullFields"/>.<para/>
            In this variant, the input new value may be null, but the existing value cannot (and will not) be null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existingValue">The current value that is available.</param>
            <param name="newValue">The new value that it should be set to.</param>
            <param name="skipNonNullFields">If <see langword="true"/>, and if <paramref name="existingValue"/> is not <see langword="null"/>, then <paramref name="existingValue"/> will be returned instead of <paramref name="newValue"/>.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.AppropriateNullableValue``1(``0,System.Nullable{``0},System.Boolean)">
            <summary>
            A utility method that returns the value a property should be set to based on <paramref name="skipNonNullFields"/>.<para/>
            In this variant, the input new value may be null, but the existing value cannot (and will not) be null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existingValue">The current value that is available.</param>
            <param name="newValue">The new value that it should be set to.</param>
            <param name="skipNonNullFields">If <see langword="true"/>, and if <paramref name="existingValue"/> is not <see langword="null"/>, then <paramref name="existingValue"/> will be returned instead of <paramref name="newValue"/>.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.AppropriateNullableString(System.String,System.String,System.Boolean)">
            <summary>
            For cases where the input string may be null via being explicitly sent that way, but where it may also be null simply because it was unsent. Payloads are expected to have a default value of <see cref="F:EtiBotCore.Data.Constants.UNSENT_STRING_DEFAULT"/>, and if a payload has this value (as <paramref name="payloadValue"/>), then the existing value is returned.
            </summary>
            <param name="existingValue">The current value that is available.</param>
            <param name="payloadValue">The value stored in the payload.</param>
            <param name="skipNonNullFields">If <see langword="true"/>, and if <paramref name="existingValue"/> is not <see langword="null"/>, then <paramref name="existingValue"/> will be returned instead of <paramref name="payloadValue"/>.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.AppropriateTime(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns whichever time is greater between the two.
            </summary>
            <param name="existingTime"></param>
            <param name="newTime"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.AppropriateNullableTime(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns whichever time is greater between the two. If any of the two values is <see langword="null"/>, then <see langword="null"/> will be returned. Otherwise, this returns whichever time is greater.
            </summary>
            <param name="existingTime"></param>
            <param name="newTime"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <summary>
            Updates this object from a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/> of the same event source type.
            </summary>
            <remarks>
            This variant should not be called manually unless it is an internal update directly from a payload that should ignore the locked status.
            </remarks>
            <param name="obj">The object containing the new data.</param>
            <param name="skipNonNullFields">If <see langword="true"/>, then this payload is only part of the object and this method will be called again. As such, fields that aren't null should be left alone (to prevent partial objects from setting things back to null). The initial creation of an object should have this set to <see langword="false"/> to prepare the object properly.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            Sends the changes made to this object to Discord. The passed in Dictionary <paramref name="changesAndOriginalValues"/> stores a mapping from its associated Property name to its json property name and old value.
            </summary>
            <param name="changesAndOriginalValues">A mapping from <c>[property name] = (json name, original value)</c>. To get the new value, access the property via the property name provided in the key.</param>
            <param name="changeReasons">A condensed string representing why a number of properties were changed, or null if no reasons were given.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.ValueOf``1(System.String)">
            <summary>
            Returns the value of the given property or field name in this object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.MissingMemberException"></exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.Equals(System.Object)">
            <summary>
            Whether or not the given object is equal to this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>, which is tested in one of four ways. First, it checks for reference equality. The next check is if it is a different <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>, from which it compares the IDs. The final two checks can take in a <see cref="T:EtiBotCore.Data.Structs.Snowflake"/> or <see cref="T:System.UInt64"/> from which the value will be compared to this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>'s ID.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.Equals(EtiBotCore.DiscordObjects.DiscordObject)">
            <param name="other"></param>
            <returns><see langword="true"/> if the ID of <paramref name="other"/> is equal to this ID, and <see langword="false"/> if it is not.</returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.Equals(EtiBotCore.Data.Structs.Snowflake)">
            <param name="other"></param>
            <returns><see langword="true"/> if <paramref name="other"/> is equal to this ID, and <see langword="false"/> if it is not.</returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.Equals(System.UInt64)">
            <param name="other"></param>
            <returns><see langword="true"/> if <paramref name="other"/> is equal to this ID's <see cref="T:System.UInt64"/> value, and <see langword="false"/> if it is not.</returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.ToString">
            <summary>
            Returns this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>'s type name, followed by its ID as a rich string (see <see cref="M:EtiBotCore.Data.Structs.Snowflake.ToRichString"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.op_Equality(EtiBotCore.DiscordObjects.DiscordObject,EtiBotCore.DiscordObjects.DiscordObject)">
            <summary>
            Compares the IDs of these two <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>s.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.op_Inequality(EtiBotCore.DiscordObjects.DiscordObject,EtiBotCore.DiscordObjects.DiscordObject)">
            <summary>
            Compares the IDs of these two <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/>s.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.CompareTo(EtiBotCore.DiscordObjects.DiscordObject)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.MemberwiseClone">
            <summary>
            A memberwise clone of this object. This may perform a slightly-deeper-than-shallow copy of the object (in that a select handful of object reference fields are actually duplicated), but a great deal of fields will not be duplicated.
            </summary>
            <remarks>
            Object-reference fields that are copied will be marked as such by saying <strong>This reference is cloned in clone objects.</strong> Unmarked members are to be assumed to be <em>NOT cloned, and thus not reflective of the object's older status.</em><para/>
            As should be implied, value types (numbers, boolean, string, so on) are always copied no matter what, so they will not say that special notice.<para/>
            And of course, cloned does not necessarily imply identical, as the original object may be changed by a payload. For example, if the old object references a channel named A, and the new object no longer references it, the old object will still reference A. The thing that changes is whether A is a copy of the old A, or if it's the current A as it is right now. If A is marked as cloned, then it will be the old A.
            </remarks>
            <returns></returns>
            
        </member>
        <member name="M:EtiBotCore.DiscordObjects.DiscordObject.MemberwiseClone``1">
            <summary>
            Identical to <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.MemberwiseClone"/> but provides the ability to cast into the target type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Factory.APIRequestData">
            <summary>
            A container class for sending API requests.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.APIRequestData.JSONParams">
            <summary>
            If this request supports JSON, these are the included parameters that will be sent with the request.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.APIRequestData.Params">
            <summary>
            The parameters to include in the URL.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.APIRequestData.Files">
            <summary>
            The files to include with this API request.
            </summary>
            <remarks>
            <strong>This is strictly for sending messages.</strong> This field does absolutely nothing on any other requests.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.APIRequestData.Reason">
            <summary>
            Only for administrative actions. Why was this operation performed? This goes to the audit log.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.APIRequestData.SetFiles(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Sets the <see cref="P:EtiBotCore.DiscordObjects.Factory.APIRequestData.Files"/> array
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.APIRequestData.SetJsonField(System.String,System.Object)">
            <summary>
            Sets a json parameter on this specific request. Returns <see langword="this"/> for chaining.
            </summary>
            <param name="key">The key of the parameter.</param>
            <param name="value">The value associated with the parameter.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.APIRequestData.RemoveJsonField(System.String)">
            <summary>
            Removes the given key from the json parameters of this request.
            </summary>
            <param name="key">The key of the parameter to remove.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.APIRequestData.ResetJsonParams">
            <summary>
            Clears all JSON parameters from this request.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.APIRequestData.GetJson">
            <summary>
            Returns the JSON parameters as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.APIRequestData.GetURLParams">
            <summary>
            Returns this request data as a URL parameter string (rather than a json string) for HTTP GET requests.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Factory.EmbedBuilder">
            <summary>
            Used to create <see cref="T:EtiBotCore.DiscordObjects.Universal.Embed"/> objects that can be sent.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Title">
            <summary>
            The title of this embed. This has a maximum of 256 characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is set to something more than 256 characters long.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Description">
            <summary>
            The description of this embed. This has a maximum of 2048 characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is set to something more than 2048 characters long.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Link">
            <summary>
            The link on this embed, which turns the title into a hyperlink.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Timestamp">
            <summary>
            The timestamp associated with this embed, which will display at the bottom of the embed.
            </summary>
            <remarks>
            If a footer is defined, the timestamp will display to the right of the footer text separated by a vertical bar <c>|</c> -- for example: <c>Footer Text | Fri Dec 25th, 2020 at 5:00 AM</c>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Color">
            <summary>
            The color associated with this embed, which determines the left-hand sidebar's color. Set to <see langword="null"/> to use Discord's default.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Image">
            <summary>
            The image associated with this embed. This is a large square image situated in the center of the embed that usually takes up as much space as it can.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Thumbnail">
            <summary>
            A thumbnail image associated with this embed. This is a smaller square image situated on the right side of the embed, and has a smaller size limit than <see cref="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Image"/> (I think it's 256x or something?)
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Build">
            <summary>
            Create an <see cref="T:EtiBotCore.DiscordObjects.Universal.Embed"/> from the information in this <see cref="T:EtiBotCore.DiscordObjects.Factory.EmbedBuilder"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.StampToNow">
            <summary>
            Sets <see cref="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Timestamp"/> to right now. Returns <see langword="this"/> for chaining.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.AddTimeFormatFooter">
            <summary>
            Sets the footer of this embed to the text <c>Note: All dates are in the format of: day/month/year hours:minutes:seconds UTC</c>. Returns <see langword="this"/> for chaining. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.SetAuthor(System.String,System.Uri,System.Uri)">
            <summary>
            Sets the author field of this embed. The author field appends a small circular picture at the top left corner of the embed (created by <paramref name="image"/>) with the given author name right next to it. If <paramref name="link"/> is provided, clicking the author's name will lead to that link. Returns <see langword="this"/> for chaining.
            </summary>
            <remarks>
            The author field appears above the embed's title.
            </remarks>
            <param name="name">The author's name, which displays at the top left of the embed. Max 256 characters.</param>
            <param name="link">The link that clicking the author's name leads to, or <see langword="null"/> to have no link.</param>
            <param name="image">A small circular image placed to the left of the author's name, at the top left of the embed.</param>
            <exception cref="T:System.ArgumentException">If the author's name is null, empty, or more than 256 characters long.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.RemoveAuthor">
            <summary>
            Removes the author field from the embed, granted one has been added beforehand with <see cref="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.SetAuthor(System.String,System.Uri,System.Uri)"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.SetFooter(System.String,System.Uri)">
            <summary>
            Sets the footer field of this embed. The footer field appears with a small rounded square icon in the lower left corner with the given footer text next to it, if applicable. Returns <see langword="this"/> for chaining.
            </summary>
            <param name="text">The text to display on the footer.</param>
            <param name="icon">The icon to display on the footer.</param>
            <exception cref="T:System.ArgumentException">If the text is more than 2048 characters long.</exception>
            <exception cref="T:System.ArgumentNullException">If text is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.RemoveFooter">
            <summary>
            Removes the footer field from the embed, granted one has been added beforehand with <see cref="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.SetFooter(System.String,System.Uri)"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.AddField(System.String,System.String,System.Boolean)">
            <summary>
            Add a new field to this embed. Returns the index of the field in the registry.
            </summary>
            <param name="name">The name of this field.</param>
            <param name="value">The body of this field.</param>
            <param name="inline">If <see langword="true"/>, this field can display horizontally to other fields to form a grid layout rather than a list layout.</param>
            <exception cref="T:System.InvalidOperationException">If there are 25 fields already, which is the maximum that Discord allows.</exception>
            <exception cref="T:System.ArgumentException">If the field's name is more than 128 chars, or the field's value is more than 1024 chars, or either of the two are empty strings.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.RemoveField(System.Int32)">
            <summary>
            Removes the field at the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.AuthorEntry.Name">
            <summary>
            The name of the author.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.AuthorEntry.Url">
            <summary>
            The URL that click on the author's name goes to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.AuthorEntry.Icon">
            <summary>
            The author's icon.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Field.Name">
            <summary>
            The name of this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Field.Value">
            <summary>
            The body of this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.Field.Inline">
            <summary>
            Whether or not to inline this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.FooterEntry.Text">
            <summary>
            The text on the footer.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.EmbedBuilder.FooterEntry.Image">
            <summary>
            The image of the footer.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory">
            <summary>
            Allows for sending requests to a specific portion of Discord's API. Should be statically defined in a class for an object that is associated with said requests.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.GATEWAY_URL">
            <summary>
            The root of Discord's gateway using https protocol, ending in a slash.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.USE_TIME_BASED_LIMIT">
            <summary>
            If <see langword="true"/>, a time limit will be used to enforce 120 requests per 60 seconds. If <see langword="false"/>, a pool will be created.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.AmountBusy">
            <summary>
            The amount of requests that are currently processing.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.WaitForNoBusyRequestsAsync(System.Threading.CancellationToken)">
            <summary>
            Yields until there's no busy requests.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the wait.</param>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.DiscordGlobalLimitEnforcer">
            <summary>
            A system that enforces Discord's 120 requests per minute limit by enforcing at least 500ms of delay between requests
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.Budget">
            <summary>
            A request budget enforcing 120 requests per 60 seconds.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.GlobalRateLimitEndsAt">
            <summary>
            The epoch that the latest global rate limit ends at. Requests must wait until this epoch passes before sending requests.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.FormatURL">
            <summary>
            The URL to the appropriate gateway location using string formatting parameters for data that might be needed for this format URL.<para/>
            This should EXCLUDE the gateway domain itself, so this should be written like it shows up on the Discord API page. For example, if I want to get a channel, setting this value to <c>https://discord.com/api/v8/channels/{0}</c> is <strong>incorrect.</strong> It should be set to just <c>channels/{0}</c> (no slash at the start either).
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.IsMissing">
            <summary>
            Whether or not this endpoint has returned an HTTP 404.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.Bucket">
            <summary>
            The name of the bucket that this request uses.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.Type">
            <summary>
            The type of request this sends.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.ShouldRetryWhenRateLimited">
            <summary>
            Whether or not this request will retry if it encounters gets rate limited.<para/>
            <strong>Default:</strong> <see langword="true"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.SpecialErrorRemarks">
            <summary>
            Remarks to certain error codes that can help debug things. Setting a code's remark to <see langword="null"/> will hide that error code.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.#ctor(System.String,EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType,System.Boolean)">
            <summary>
            Construct a new request factory with the required information.
            </summary>
            <param name="fmtUrl">The formatted URL. This should EXCLUDE the gateway domain itself, so this should be written like it shows up on the Discord API page. For example, if I want to get a channel, setting this value to <c>https://discord.com/api/v8/channels/{0}</c> is <strong>incorrect.</strong> It should be set to just <c>channels/{0}</c> (no slash at the start either).</param>
            <param name="type">The type of request that this is.</param>
            <param name="retry">If <see langword="true"/>, the request will yield and retry if it gets rate limited.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.ExecuteAsync(EtiBotCore.DiscordObjects.Factory.APIRequestData)">
            <summary>
            Executes this API request, sending it to discord. This returns the response status code and message.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.ExecuteAsync``1(EtiBotCore.DiscordObjects.Factory.APIRequestData)">
            <summary>
            Executes this API request, sending it to Discord and returning the given result. This also returns the response status code and message.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.SetupClient(System.Net.Http.HttpClient,EtiBotCore.DiscordObjects.Factory.APIRequestData)">
            <summary>
            Sets up an HttpClient
            </summary>
            <param name="client"></param>
            <param name="rqData"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.YieldUntilGlobalRatePasses">
            <summary>
            Returns a task that will yield until the global rate limit ends, or that does nothing if the rate limit is not in effect.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType">
            <summary>
            One of the request types that can be sent to the gateway.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType.Get">
            <summary>
            Acquire this data.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType.Post">
            <summary>
            Send completely new data.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType.Patch">
            <summary>
            Send data that should replace old existing data.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType.Delete">
            <summary>
            Delete this data.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Factory.SendableAPIRequestFactory.HttpRequestType.Put">
            <summary>
            Put data here.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase">
            <summary>
            The base class for representing changes made to something in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase.ID">
            <summary>
            The ID of the thing that got changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase.ChannelType">
            <summary>
            If <see cref="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase.TypeOfThingChanged"/> is <c>channel</c>, this is the type of channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase.TypeOfThingChanged">
            <summary>
            The type of the thing that got changed. Either <c>channel, role, user, integration, guild</c>
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase.#ctor(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Construct a <see cref="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.AbstractAuditLogChangeBase"/> from the given common data.
            </summary>
            <param name="id"></param>
            <param name="changeType"></param>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer">
            <summary>
            A container type for the various types of audit log changes.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.GuildChanges">
            <summary>
            The changes made to the guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.ChannelChanges">
            <summary>
            The changes made to a channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.RoleChanges">
            <summary>
            The changes made to a role or its permissions.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.UserChanges">
            <summary>
            The changes made to a user.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.IntegrationChanges">
            <summary>
            The changes made to an integration.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.#ctor(EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange,EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange,EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange,EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogUserChange,EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogIntegrationChange)">
            <summary>
            Construct a new change container.
            </summary>
            <param name="guild"></param>
            <param name="channel"></param>
            <param name="role"></param>
            <param name="user"></param>
            <param name="integration"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogChangeContainer.CreateAuto(EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange)">
            <summary>
            Create a new container by constructing change objects from the given payload.
            </summary>
            <param name="plChange"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry">
            <summary>
            An entry in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.TargetID">
            <summary>
            The ID of the affected entity (user, role, etc.)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.Changes">
            <summary>
            The changes made in this entry.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.UserID">
            <summary>
            The user ID of whoever did the thingy.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.ID">
            <summary>
            The ID of this entry itself.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.ActionType">
            <summary>
            The type of action that occurred.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.Options">
            <summary>
            Additional info for certain specific action types.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogEntry.Reason">
            <summary>
            The reason this action was performed.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogObject">
            <summary>
            Represents an entry in a server's audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogObject.Server">
            <summary>
            The server this entry exists for.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogObject.Users">
            <summary>
            The users in this audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogObject.Entries">
            <summary>
            The entries in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogObject.Webhooks">
            <summary>
            The webhooks in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.AuditLogObject.Integrations">
            <summary>
            The Integrations in the audit log.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange">
            <summary>
            A change made to a channel in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.Position">
            <summary>
            The new position of this channel in the list (where 0 is first, top), or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.Topic">
            <summary>
            The new channel description, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.Bitrate">
            <summary>
            The new channel bitrate, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.Permissions">
            <summary>
            The new permissions for this channel, or <see langword="null"/> if it wasn't changed.
            </summary>
            <remarks>
            This dictionary is a mapping from user/role ID to a pair of permissions. This tuple is mapped out as (allow, deny). Any permissions that are in neither of the two groups are inherited permissions.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.NSFW">
            <summary>
            The new NSFW status of this channel, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.ApplicationID">
            <summary>
            The application ID of an added/removed webhook or bot, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogChannelChange.SlowModeTimer">
            <summary>
            The new amount of seconds a user has to wait between sending messages, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange">
            <summary>
            A change made to a guild in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.Name">
            <summary>
            The new name of this guild, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.IconHash">
            <summary>
            The new hash of the guild's icon, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.SplashHash">
            <summary>
            The new hash of the guild's splash, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.OwnerID">
            <summary>
            The ID of the new server owner, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.Region">
            <summary>
            The new voice region, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.AFKChannelID">
            <summary>
            The new AFK channel's ID, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.AFKTimeout">
            <summary>
            The new AFK timeout in seconds, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.MFALevel">
            <summary>
            The new MFA level, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.VerificationLevel">
            <summary>
            The new verification level, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.ExplicitFilterLevel">
            <summary>
            The new explicit content filter level, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.DefaultMessageNotifications">
            <summary>
            The new default message notification level, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.VanityURL">
            <summary>
            The new vanity URL, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.AddedRoles">
            <summary>
            The roles that were added to the server, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.RemovedRoles">
            <summary>
            The roles that were removed from the server, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.PruneDeleteDays">
            <summary>
            The amount of days of inactivity from which members were pruned, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.WidgetEnabled">
            <summary>
            Whether or not the widget was enabled or disabled, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.WidgetChannelID">
            <summary>
            The new ID of the widget channel, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.SystemChannelID">
            <summary>
            The new ID of the system channel, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.PartialRoleEntry">
            <summary>
            A partial role, containing only a name and ID.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.PartialRoleEntry.ID">
            <summary>
            The ID of this role.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.PartialRoleEntry.Name">
            <summary>
            The name of this role.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.PartialRoleEntry.#ctor(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogGuildChange.PartialRoleEntry"/> wit hthe given data.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogIntegrationChange">
            <summary>
            A change made to an integration in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogIntegrationChange.EnableEmoticons">
            <summary>
            The new state of whether or not this integration has emojis, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogIntegrationChange.ExpireBehavior">
            <summary>
            The new state of subscriber expiration behavior, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogIntegrationChange.ExpireGracePeriod">
            <summary>
            The new duration of the grace period for expired subscribers, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange">
            <summary>
            A change made to a role in the audit log
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange.Permissions">
            <summary>
            The new permissions of this role, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange.Color">
            <summary>
            The new color of this role, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange.Hoist">
            <summary>
            The new state of whether or not to display this role separately in the list, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange.Mentionable">
            <summary>
            The new state of the role being mentionable, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange.Allowed">
            <summary>
            The permissions the role is allowed, if it was a channel that changed, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogRoleChange.Denied">
            <summary>
            The permissions the role is denied, if it was a channel that changed, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogUserChange">
            <summary>
            A change made to a user in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogUserChange.Nickname">
            <summary>
            The new nickname, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogUserChange.ServerDeafened">
            <summary>
            The new state of this user being server deafened, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogUserChange.ServerMuted">
            <summary>
            The new state of this user being server muted, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.ChangeTypes.AuditLogUserChange.AvatarHash">
            <summary>
            The user's new avatar, or <see langword="null"/> if it wasn't changed.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo">
            <summary>
            Optional data that might be present in an audit log entry.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.DeleteMemberDays">
            <summary>
            The number of days after which inactive members were kicked.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_PRUNE"/>. It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.MembersRemoved">
            <summary>
            The number of members removed by the prune.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_PRUNE"/>. It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.ChannelID">
            <summary>
            The ID of the channel in which things were targeted.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_MOVE"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_PIN"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_UNPIN"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_DELETE"/>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.MessageID">
            <summary>
            The ID of the message that was targeted.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_PIN"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_UNPIN"/>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.Count">
            <summary>
            The amount of entities that were targeted.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_DELETE"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_BULK_DELETE"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_DISCONNECT"/>, or <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_MOVE"/>. It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.ID">
            <summary>
            The ID of the thing that has its permissions changed (user or role)
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE"/> (and update/delete). It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.Type">
            <summary>
            The type of overwrite that it is.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE"/> (and update/delete). It is a number as a string.<para/>
            It is 0 for a role and 1 for a member.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.RoleName">
            <summary>
            The name of the role that was changed.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE"/> (and update/delete).<para/>
            Only present if <see cref="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.Type"/> is <c>"0"</c>, and null if <see cref="P:EtiBotCore.DiscordObjects.Guilds.AuditLog.OptionalEntryInfo.Type"/> is <c>"1"</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelCategory">
            <summary>
            Represents a channel category.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelCategory.Children">
            <summary>
            The channels within this category. This may not be in order of position.
            Note that this may not be in order of position. Channels in guilds implement <see cref="T:System.IComparable`1"/>, so it is possible to use <see cref="M:System.Array.Sort``1(``0[])"/> on this.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelCategory.AddChannel(EtiBotCore.DiscordObjects.Base.GuildChannelBase)">
            <summary>
            For internal registration, this puts a channel in the list of children.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelCategory.RemoveChannel(EtiBotCore.DiscordObjects.Base.GuildChannelBase)">
            <summary>
            For internal deregistration, this puts a channel in the list of children.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelCategory.#ctor(EtiBotCore.Payloads.PayloadObjects.Channel,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Construct a new channel category.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelCategory.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelCategory.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker">
            <summary>
            A special event container just for message pins. This uses some witchcraft to try to track pins better.<para/>
            Avoid using this en masse, as it does a lot of expensive network requests on initialization.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinnedMessages">
            <summary>
            The currently pinned messages.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.TrackerFile">
            <summary>
            A file used to persistently track message pin times.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OldPinnedMessages">
            <summary>
            The edited pin array on a message edit signal. The pin update signal looks for this to figure out which message changed.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.LastEditOrCreateSignalHandledAt">
            <summary>
            When a pin or unpin was last handled in this channel from an edit signal.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.LastPinSignalReceivedAt">
            <summary>
            When a channel pin update message was last received.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.Epoch">
            <summary>
            The current epoch.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.Channel">
            <summary>
            The channel associated with this tracker.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.Invalidated">
            <summary>
            Whether or not this has been invalidated.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.TrackerLog">
            <summary>
            A logger for this <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.GetTrackerFor(EtiBotCore.DiscordObjects.Base.ChannelBase)">
            <summary>
            Returns a new or existing <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker"/> for the given channel.
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.HasTracker(EtiBotCore.DiscordObjects.Base.ChannelBase)">
            <summary>
            Returns whether or not the given channel has an <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker"/> tied to it.
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.#ctor(EtiBotCore.DiscordObjects.Base.ChannelBase)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker"/>, which attempts to accurately track pins in a channel.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.TellChannelWasDeleted">
            <summary>
            Tell this <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker"/> that its channel was deleted. This will verify if <see cref="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.Channel"/>.Deleted is actually true, and if so, will disconnect all of its event handlers and send an unpin signal for all messages in the channel.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this has already been called successfully.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnMessageDeletedGuildOrDM(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.DiscordObjects.Base.ChannelBase)">
            <summary>
            Runs when a message is deleted either in a guild channel or a DM.
            </summary>
            <param name="messageId"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnPinsChangedDM(EtiBotCore.DiscordObjects.Base.DMChannel)">
            <summary>
            When the pin list in a DM channel changes.
            </summary>
            <param name="inChannel"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnPinsChangedGuild(EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.DiscordObjects.Guilds.TextChannel,System.Nullable{System.DateTimeOffset})">
            <summary>
            When the pin list in a guild channel changes.
            </summary>
            <param name="guild"></param>
            <param name="channel"></param>
            <param name="latestPinTime"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnMessageEditedGuildOrDM(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.Nullable{System.Boolean})">
            <summary>
            When a message is edited in a guild channel or DM.
            </summary>
            <param name="oldMessage"></param>
            <param name="message"></param>
            <param name="pinned"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnMessageCreatedGuildOrDM(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.Nullable{System.Boolean})">
            <summary>
            When a message is created in a guild channel or DM. This is an exceptionally hacky trick and aims to try to grab the pinned message out of the pin notification.
            </summary>
            <param name="message"></param>
            <param name="pinned"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinMessageAsync(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.String)">
            <summary>
            Pins this message through the pin tracker, which causes it to not rely on events to determine its changed state.
            </summary>
            <param name="message"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.UnpinMessageAsync(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.String)">
            <summary>
            Unpins this message through the pin tracker, which causes it to not rely on events to determine its changed state.
            </summary>
            <param name="message"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.GetPinnedMessages">
            <summary>
            Get the messages pinned in this channel where the first message is the most recent pin, and the last message is the latest pin.<para/>
            Unfortunately, this sort is not guaranteed, but it is maintained as accurately as possible.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.MessagePinStateChanged">
            <summary>
            A delegate used to relay that a message's pin state has changed.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="E:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnMessagePinned">
            <summary>
            An event that fires when a message is pinned. In this event, the message must be younger than two weeks old.
            </summary>
        </member>
        <member name="E:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.OnMessageUnpinned">
            <summary>
            An event that fires when a message is unpinned for any reason at all, including deletion. In this event, the message must be younger than two weeks old.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Save">
            <summary>
            Save the pin tracker file.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Set(EtiBotCore.Data.Structs.Snowflake,System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the time that the given message was pinned. A <see langword="null"/> <paramref name="time"/> signifies to use <see cref="P:System.DateTimeOffset.UtcNow"/>.
            </summary>
            <param name="messageId"></param>
            <param name="time"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Set(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.Nullable{System.DateTimeOffset})">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Set(EtiBotCore.Data.Structs.Snowflake,System.Nullable{System.DateTimeOffset})"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Remove(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Removes the given message from the registry.
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Remove(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Remove(EtiBotCore.Data.Structs.Snowflake)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Get(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Gets the time that the given message was pinned, or <see langword="null"/> if that message is not registered.
            </summary>
            <param name="messageId"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Get(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.EagerPinTracker.PinTimeTrackerFile.Get(EtiBotCore.Data.Structs.Snowflake)"/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message">
            <summary>
            A message in a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.InstantiatedMessages">
            <summary>
            A binding from message ID to message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.IsShallow">
            <summary>
            Whether or not this message is shallow. In the event of a network error, this message may not exist until it is edited by the author.<para/>
            When messages are edited, only minimal content is sent. If the message is not able to be redownloaded, this will be set to true, which means that it is unsafe to reference most properties.<para/>
            TODO: What properties, boy?!
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Channel">
            <summary>
            The channel this message exists in. This could be a DM channel or a guild channel, which can be checked via testing if <see cref="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Channel"/> <see langword="is"/> <see cref="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.ServerChannel">
            <summary>
            The channel this message exists in as a <see cref="T:EtiBotCore.DiscordObjects.Guilds.TextChannel"/>, or <see langword="null"/> if this is a DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Server">
            <summary>
            The <see cref="T:EtiBotCore.DiscordObjects.Universal.Guild"/> this message exists in, or <see langword="null"/> if this is a DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Author">
            <summary>
            The user that created the message. Will be <see langword="null"/> if the message is a webhook, which can be determined via checking if <see cref="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.WebhookID"/> is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.AuthorMember">
            <summary>
            The member that created the message. Will be <see langword="null"/> if this was sent by a webhook or if this is a DM message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Content">
            <summary>
            The content of the message, which is its raw text.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.AllowedMentions">
            <summary>
            Controls the mentions that are allowed in this message.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the message does not belong to the bot.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Timestamp">
            <summary>
            When this message was sent.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.EditedTimestamp">
            <summary>
            When this message was edited, or <see langword="null"/> if it has not been edited.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.TTS">
            <summary>
            Whether or not this message uses text to speech.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.MentionsEveryone">
            <summary>
            Whether or not this message contains @everyone
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Mentions">
            <summary>
            The users this message pings.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.MentionedRoles">
            <summary>
            The roles pinged by this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.MentionedChannels">
            <summary>
            An array of mentioned channels, which will be <see langword="null"/> if there are no visible mentioned channels.<para/>
            Channels in this array must be visible to everyone in a lurkable server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Attachments">
            <summary>
            The attachments on this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Embeds">
            <summary>
            All embeds in this message.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Embed">
            <summary>
            The first embed in <see cref="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Embeds"/>, or <see langword="null"/> if there are none.
            </summary>
            <remarks>
            Only <see langword="set"/> will throw the given exceptions.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object is not in a modifiable state.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this message was deleted.</exception>
            <exception cref="T:System.InvalidOperationException">If this message does not belong to the bot.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Reactions">
            <summary>
            Keeps track of the reactions on this message.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Nonce">
            <summary>
            Used for validating that a message was sent.<para/>
            Discord may send this as an integer or a string. It is classified as an object to allow ambiguity between these two types.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Pinned">
            <summary>
            Whether or not this message is pinned.
            </summary>
            <remarks>
            Only <see langword="set"/> will throw the given exceptions. 
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot pin messages.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.WebhookID">
            <summary>
            The ID of the webhook, or <see langword="null"/> if this was not sent by a webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Activity">
            <summary>
            The message activity, used for when someone presses that little invite button to send that channel embed that lets you join, or <see langword="null"/> if the message does not use the assoociated feature.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Application">
            <summary>
            The application in the message, used in conjunction with <see cref="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Activity"/>. This is <see langword="null"/> if the message does not have an embed with an application.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Reference">
            <summary>
            If this is an announcement message, this is the original message that relayed this announcement. If this is a reply, this is the message it's replying to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Type">
            <summary>
            The type of message that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Flags">
            <summary>
            Extra information about what kind of message this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.IsReply">
            <summary>
            Returns <see langword="true"/> if this message is a reply, regardless of its mention state.
            </summary>
            <remarks>
            For cases where knowing if the reply is a ping, use <see cref="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.IsMentionedReply"/>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.IsMentionedReply">
            <summary>
            Returns <see langword="true"/> if this message is a reply and it pings the person who it's replying to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.EmbedsSuppressed">
            <summary>
            Whether or not embeds are suppressed in this message.
            </summary>
            <remarks>
            Only <see langword="set"/> will throw the given exceptions.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage messages.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the message is not available for editing.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this message was deleted.</exception>
            <exception cref="T:System.InvalidOperationException">If this message does not belong to the bot (only thrown for a DM message)</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.JumpLink">
            <summary>
            Returns a link that, when clicked, jumps to this message.
            </summary>
            <exception cref="T:System.NotSupportedException">If this is not part of a <see cref="T:EtiBotCore.DiscordObjects.Guilds.TextChannel"/> or <see cref="T:EtiBotCore.DiscordObjects.Base.DMChannel"/></exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.ReplyAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed,EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions,System.Boolean,System.IO.FileInfo[])">
            <summary>
            Replies to this message, if possible. If <paramref name="asReply"/> is <see langword="true"/>, then this will be sent as a reply, from which <paramref name="mentionLimits"/> will be used to determine whether or not to ping the user.
            </summary>
            <remarks>
            By default, specifying no <paramref name="mentionLimits"/> will allow anything and everything to be pinged, and will also ping the person that's being replied to.
            </remarks>
            <param name="text">The text to send.</param>
            <param name="embed">The embed to send.</param>
            <param name="mentionLimits">Limitations to who or what can or can't be mentioned.</param>
            <param name="attachments">One or more files to attach.</param>
            <param name="asReply">If true, this message will be an actual <em>reply</em> reply. If false, this will just send a message in the same channel as this <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message"/></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If text is null or empty AND embed is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.ReplyAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed,EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions,System.IO.FileInfo,System.Boolean)">
            <summary>
            Replies to this message, if possible. If <paramref name="asReply"/> is <see langword="true"/>, then this will be sent as a reply, from which <paramref name="mentionLimits"/> will be used to determine whether or not to ping the user.
            </summary>
            <remarks>
            By default, specifying no <paramref name="mentionLimits"/> will allow anything and everything to be pinged, and will also ping the person that's being replied to.
            </remarks>
            <param name="text">The text to send.</param>
            <param name="embed">The embed to send.</param>
            <param name="mentionLimits">Limitations to who or what can or can't be mentioned.</param>
            <param name="attachment">A file to attach.</param>
            <param name="asReply">If true, this message will be an actual <em>reply</em> reply. If false, this will just send a message in the same channel as this <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message"/></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If text is null or empty AND embed is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.DeleteAsync(System.String)">
            <summary>
            Delete this message with the optionally defined reason for deletion. Throws <see cref="T:System.InvalidOperationException"/> if this is a message in a DM, and the message does not belong to this bot.
            </summary>
            <param name="reason">Why did you delete this message?</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.#ctor(EtiBotCore.Payloads.PayloadObjects.Message,EtiBotCore.DiscordObjects.Base.ChannelBase,EtiBotCore.DiscordObjects.Guilds.Member,EtiBotCore.DiscordObjects.Universal.ChannelMention[],EtiBotCore.DiscordObjects.Guilds.Role[],EtiBotCore.DiscordObjects.Universal.User[])">
            <summary>
            Constructs a new message and adds it to the channel's message registry.
            </summary>
            <param name="evt"></param>
            <param name="channel">The channel this message exists in.</param>
            <param name="authorMember">If this message is a server, this is the member that sent it.</param>
            <param name="channelMentions">Any mentioned channels.</param>
            <param name="mentionedRoles">The roles that were mentioned.</param>
            <param name="mentionedUsers">The users that were mentioned.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.GetOrCreateAsync(EtiBotCore.Payloads.PayloadObjects.Message)">
            <summary>
            Gets an existing message from the given payload's ID or creates a new one from the payload's contained information. The message ctor registers it to the channel.
            </summary>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.UpdateMessageAsync(EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageUpdateEvent)">
            <summary>
            Updates a given message from the given event. If the message didn't exist prior, it will attempt to download the message.
            </summary>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageActivity">
            <summary>
            Activity data in a message, usually for invites e.g. game invites or spotify invites.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageActivity.Type">
            <summary>
            The type of activity that this message performs.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageActivity.PartyID">
            <summary>
            The ID of the party.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageActivity.CreateFromPayload(EtiBotCore.Payloads.PayloadObjects.MessageActivity)">
            <summary>
            Creates a <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageActivity"/> from the given payload.
            </summary>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication">
            <summary>
            An application embedded in a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.ID">
            <summary>
            The ID of the application.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.CoverImageHash">
            <summary>
            ID of the embed's image asset, if one exists.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.Description">
            <summary>
            The description of this application.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.IconHash">
            <summary>
            The ID of this application's icon, if one exists.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.Name">
            <summary>
            The name of this application.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.CoverImage">
            <summary>
            A link to the cover image, if one exists.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageApplication.Icon">
            <summary>
            The icon of this application, if one exists.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageReference">
            <summary>
            A reference to another message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageReference.MessageID">
            <summary>
            The ID of the original message, if applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageReference.ChannelID">
            <summary>
            The ID of the channel that this message came from.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageReference.GuildID">
            <summary>
            The server that this message came from, or <see langword="null"/> if there is no associated server.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.ChannelData.MessageReference.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration">
            <summary>
            The valid thread archival durations.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration.Minutes60">
            <summary>
            Archive in 60 minutes of no activity.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration.Minutes1440">
            <summary>
            Archive in 1440 minutes of no activity.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration.Minutes4320">
            <summary>
            Archive in 4320 minutes of no activity.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration.Minutes10080">
            <summary>
            Archive in 10080 minutes of no activity.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.Invite">
            <summary>
            Represents an invite to a server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.CreatedAt">
            <summary>
            When this invite was created.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.Server">
            <summary>
            The ID of the server this invite exists for.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.Channel">
            <summary>
            The ID of the channel this invite leads to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.Code">
            <summary>
            The code of this invite.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.Inviter">
            <summary>
            The user who created the invite, or <see langword="null"/> if this is a vanity URL.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.MaxAge">
            <summary>
            The time that the invite is valid for in seconds. This will be zero if it's infinite.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.MaxUses">
            <summary>
            The maximum amount of times the invite can be used. This will be zero if it's infinite.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.TargetUser">
            <summary>
            The user this invite was sent to, or <see langword="null"/> if this invite was not created for someone in specific.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Invite.Temporary">
            <summary>
            Whether or not this invite grants a temporary membership - If the user logs off and has no roles, they will be removed from the server.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.Member">
            <summary>
            Represents a <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> but in a specific <see cref="T:EtiBotCore.DiscordObjects.Universal.Guild"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.User">
            <summary>
            The base user of this member. Identical to <see langword="this"/> (because this object extends User).
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.Server">
            <summary>
            The server that this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/> is a member of.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.Nickname">
            <summary>
            The member's nickname. This will never return an empty string, and will always return <see langword="null"/> for members with no nickname.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"></exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException"></exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.Roles">
            <summary>
            The roles this member has. This class can be viewed or changed like a list or array: <c>Roles[int] = Role</c>
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"></exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException"></exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.JoinedAt">
            <summary>
            When this member joined the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.PremiumSince">
            <summary>
            When this user purchased Nitro, or <see langword="null"/> if they do not have Nitro.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.Muted">
            <summary>
            Whether or not this member has been muted in voice chats.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"></exception>
            <exception cref="T:System.InvalidOperationException">If this member is not the bot.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.Deafened">
            <summary>
            Whether or not this member has been deafened in voice chats.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"></exception>
            <exception cref="T:System.InvalidOperationException">If this member is not the bot.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.Presence">
            <summary>
            The presence of this member. If the bot is unauthorized to view presences or has not received this member's presence, this will return an offline presence.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.IsPending">
            <summary>
            Whether or not this member has passed the rules screening check required to get into the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.CurrentVoiceChannel">
            <summary>
            The voice channel this member is connected to.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the member object is not expecting changes.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot move members.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If the member left the server.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.LeftServer">
            <summary>
            If true, this member has left the server they exist in. Identical to <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.Deleted"/> (which is set to <see langword="true"/> if they leave)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.FullNickname">
            <summary>
            An extension of <see cref="P:EtiBotCore.DiscordObjects.Universal.User.FullName"/> that includes this member's nickname (if applicable) in the format <c>Nickname (FullName)</c>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.IsShallow">
            <summary>
            If <see langword="true"/>, this member was not created inside of the member added event. As a result, any and all server-dependent info (with the exception of the server itself) will be missing.
            </summary>
            <remarks>
            While the server-dependent information will be unusable, all <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> properties will be usable. As such, it is advised to reference <see cref="P:EtiBotCore.DiscordObjects.Guilds.Member.User"/> when addressing properties as to not accidentally use missing properties.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.AllowedServerPermissions">
            <summary>
            The permissions this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/> has across the entire server based on the roles they have. This does not factor in any channel-specific permissions.
            If this member is an administrator, this returns <see cref="F:EtiBotCore.Payloads.Data.Permissions.All"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Member.IsAdministrator">
            <summary>
            Returns whether or not this user is an administrator because one or more of their roles has the Administrator permission.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.GetPermissionsInChannel(EtiBotCore.DiscordObjects.Base.GuildChannelBase)">
            <summary>
            Returns the permissions that are allowed in the given channel. If this member has administrator, then <see cref="F:EtiBotCore.Payloads.Data.Permissions.All"/> is returned.
            </summary>
            <remarks>
            This returns the effective permissions from their roles and the channel's overwrites to any of those roles and/or their specific user.
            If your goal is to acquire the overrides specifically defined just for this user explicitly, acquire it from the channel itself.<para/>
            <para/>
            If this is called on a thread, this acts on the permissions of the parent channel (as it should), and is identical to passing in thread.ParentChannel.
            </remarks>
            <param name="channel"></param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If the server this channel is in is experiencing an outage.</exception>
            <exception cref="T:System.ArgumentException">If the channel is not in the same server as this member object.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.HasPermission(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Determines whether or not the member has the given permissions. This checks for the administrator permission automatically, and if this member has it, will always return true.
            </summary>
            <param name="perms"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.KickAsync(System.String)">
            <summary>
            Kicks this member for the given reason.
            </summary>
            <param name="reason">Why are you kicking this member?</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.BanAsync(System.String,System.Int32)">
            <summary>
            Ban this member for the given reason, and delete the messages they sent in the past <paramref name="deleteMessageDays"/> days.<para/><para/>
            <code>Administer last rites, sir?</code>
            </summary>
            <param name="reason">Why are you banning this member?</param>
            <param name="deleteMessageDays">Delete messages they sent up to this many days beforehand.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the BAN_MEMBERS permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.CanChatInThread(EtiBotCore.DiscordObjects.Guilds.Thread)">
            <summary>
            Returns whether or not this member has the ability to chat in the given thread.
            </summary>
            <param name="thread">The thread to test.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.CanSeeChannel(EtiBotCore.DiscordObjects.Guilds.TextChannel)">
            <summary>
            Returns whether or not this member can see the given channel.
            </summary>
            <param name="channel">The channel to test.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.CanCreatePublicThreads(EtiBotCore.DiscordObjects.Guilds.TextChannel)">
            <summary>
            Returns whether or not this member can create new public threads.
            </summary>
            <param name="forChannel">The channel that the thread will be a part of.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.CanCreatePrivateThreads(EtiBotCore.DiscordObjects.Guilds.TextChannel)">
            <summary>
            Returns whether or not this member can create new private threads.
            </summary>
            <param name="forChannel">The channel that the thread will be a part of.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.#ctor(EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.Payloads.PayloadObjects.Member)">
            <summary>
            Should only be used in actual member creations, never in message create/update events (because no user exists in those).<para/>
            This updates the registry.
            </summary>
            <param name="sourceGuild">The <see cref="T:EtiBotCore.DiscordObjects.Universal.Guild"/> creating this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/></param>
            <param name="member">The member payload</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.#ctor(EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.Payloads.PayloadObjects.User)">
            <summary>
            Constructs a shallow member.
            </summary>
            <param name="sourceGuild"></param>
            <param name="baseUser"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.GetOrCreateAsync(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Asynchronously returns an existing cached Member in the given server with the given ID, or downloads this member and constructs a new one.
            </summary>
            <param name="id"></param>
            <param name="inServer"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.EventGetOrCreate(EtiBotCore.Payloads.PayloadObjects.User,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Creates a new <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/> or gets an existing one by ID. This does not download the member like <see cref="M:EtiBotCore.DiscordObjects.Guilds.Member.GetOrCreateAsync(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.DiscordObjects.Universal.Guild)"/>.
            Be careful, because if the member hasn't been created before, it will return a shallow member.
            </summary>
            <param name="inServer"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.op_Equality(EtiBotCore.DiscordObjects.Guilds.Member,EtiBotCore.DiscordObjects.Guilds.Member)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.op_Inequality(EtiBotCore.DiscordObjects.Guilds.Member,EtiBotCore.DiscordObjects.Guilds.Member)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.Equals(EtiBotCore.DiscordObjects.Guilds.Member)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Member.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity">
            <summary>
            Represents an activity, such as playing a game.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Name">
            <summary>
            The activity's name. This is the name of the game or content in activities like Playing, Listening To, etc.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Type">
            <summary>
            The type of activity.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.URL">
            <summary>
            The URL of the stream, which is validated if <see cref="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Type"/> is <see cref="F:EtiBotCore.Payloads.Data.ActivityType.Streaming"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.CreatedAt">
            <summary>
            Unix timestamp of when the activity was added to the user's session.<para/>
            This is populated automatically on construction and set to the current time.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Timestamps">
            <summary>
            Time information for this activity (start/end), or <see langword="null"/> if this does not have a designated start or end time.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Details">
            <summary>
            The details of what the current user is doing. Upper text.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.State">
            <summary>
            The current party status. Lower text.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Emoji">
            <summary>
            A lightweight Emoji associated with the status.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Party">
            <summary>
            Information about the current party. <see langword="null"/> if this is not a joinable game.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Assets">
            <summary>
            The assets of this activity, namely its small and large images. <see langword="null"/> if these fields are irrelevant.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Secrets">
            <summary>
            Keys needed to join, spectate, or find the match related to this activity. <see langword="null"/> if this is not a joinable game.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Instance">
            <summary>
            Whether or not this is an instanced game session. <see langword="null"/> if this is not a joinable game.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.Flags">
            <summary>
            Flags about this activity. <see langword="null"/> if this is not a joinable game or music stream.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.CreateActivityForBot(System.String,EtiBotCore.Payloads.Data.ActivityType)">
            <summary>
            Constructs a minimal <see cref="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity"/> that can be used for a bot's status.
            </summary>
            <param name="text"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="type"/> is not usable by bots or is not an actual activity type.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.MemberData.Activity.#ctor(EtiBotCore.Payloads.PayloadObjects.Activity)">
            <summary>
            Takes in a payload activity and converts it to this.
            </summary>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Ban">
            <summary>
            Represents an entry in the ban logs.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Ban.Reason">
            <summary>
            The reason this user was banned.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Ban.Name">
            <summary>
            The username#discriminator of the banned user, e.g. Eti#1760
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Ban.ID">
            <summary>
            The ID of the banned user.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Ban.Server">
            <summary>
            The guild that this user was banned from.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence">
            <summary>
            Represents a member's presence.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.CreateOfflinePresence(EtiBotCore.DiscordObjects.Guilds.Member)">
            <summary>
            Create a presence that is offline, for this member.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.Activities">
            <summary>
            The activity or activities of this presence.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects, but the actual Activity objects are not (the lists will not be synced, but the objects they reference will be).</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.Activity">
            <summary>
            The first activity in this presence, or <see langword="null"/> if there is none. This corresponds to the activity that is displayed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.AllStatuses">
            <summary>
            The presence (online/away/dnd/offline) of this client on various platforms.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.GuildID">
            <summary>
            The ID of the guild that this presence ties into.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.Status">
            <summary>
            The presence (online/away/dnd/offline) of this client on their current device or platform.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.UserID">
            <summary>
            The user this presence is associated with.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.#ctor(EtiBotCore.Payloads.Events.Intents.GuildPresences.PresenceUpdateEvent)">
            <summary>
            Constructs a new <see cref="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence"/> from the network event sent by Discord.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.PlatformStatusContainer">
            <summary>
            Represents the user's status on all platforms Discord runs on.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.PlatformStatusContainer.OnDesktop">
            <summary>
            The user's status on the desktop app for Discord, or <see langword="null"/> if they are not signed in on this platform (offline/invisible).
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.PlatformStatusContainer.OnWeb">
            <summary>
            The user's status on the Discord website, or <see langword="null"/> if they are not signed in on this platform (offline/invisible).
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.PlatformStatusContainer.OnMobile">
            <summary>
            The user's status on the Discord mobile app, or <see langword="null"/> if they are not signed in on this platform (offline/invisible).
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.MemberData.Presence.PlatformStatusContainer.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.Role">
            <summary>
            A role in a server.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.Role.RoleRegistry">
            <summary>
            A binding from Snowflake to Role for existing roles. There is no server-dependant list here because Roles' IDs are not server-dependant.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Mention">
            <summary>
            A string that mentions this role by ID.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Server">
            <summary>
            The server that this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Name">
            <summary>
            The name of this role.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Color">
            <summary>
            The color of this role, or <see langword="null"/> for no color.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Hoisted">
            <summary>
            Whether or not this role is shown uniquely in the member list.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Mentionable">
            <summary>
            Whether or not people can mention this role.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Integrated">
            <summary>
            Whether or not this role is managed by an integration.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Permissions">
            <summary>
            The permissions this role has. This object can be accessed like an array: <c>role.Permissions[Permissions.SendMessages] = PermissionState.Allow</c><para/>
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Role.Position">
            <summary>
            The role's position in the list.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.#ctor(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> as a guild must be provided to properly create a role.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.#ctor(EtiBotCore.Payloads.PayloadObjects.Role,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Creates a new role with the given ID in the given server.
            </summary>
            <param name="plRole"></param>
            <param name="server"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.GetOrCreate(EtiBotCore.Payloads.PayloadObjects.Role,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Creates a new role in the given server or gets an existing one. Returns <see langword="true"/> if the role had to be freshly created.
            </summary>
            <param name="plRole"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.GetOrDownloadAsync(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Creates a new role in the given server or gets an existing one. Returns <see langword="true"/> if the role had to be freshly created.
            </summary>
            <param name="id"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.CompareTo(EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Returns a sort order dependant on whether or not this role is higher in position than the given role. If used in <see cref="M:System.Array.Sort(System.Array)"/>, this will order the roles from lowest position first to highest position last.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.op_GreaterThan(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Returns whether or not the left-hand role is higher up than the right-hand role.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.op_LessThan(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Returns whether or not the left-hand role is lower down than the right-hand role.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.op_GreaterThanOrEqual(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Returns whether or not the left-hand role is higher up or equal in position relative to the right-hand role.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.op_LessThanOrEqual(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Returns whether or not the left-hand role is lower down or equal in position relative to the right-hand role.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Role.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole">
            <summary>
            A system that allows the existence of a role to be enforced.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.IsInitialized">
            <summary>
            Whether or not this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/> has been initialized.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Name">
            <summary>
            The name used when finding this role on startup, or when creating the role.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Color">
            <summary>
            The color of this role if it needs to be created, or <see langword="null"/> to use no color.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Server">
            <summary>
            The server this role is a part of.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Role">
            <summary>
            The role that this represents. This will be <see langword="null"/> if <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.IsInitialized"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.#ctor(EtiBotCore.DiscordObjects.Universal.Guild,System.String,System.Nullable{EtiLogger.Data.Structs.Color})">
            <summary>
            Create a new <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/> with the given name and default color.
            </summary>
            <param name="inServer">The server this role is a part of.</param>
            <param name="name">The name of this role to search for, or to use when creating.</param>
            <param name="color">The color of this role, or <see langword="null"/> for no color.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Initialize(System.Int32)">
            <summary>
            Searches for the role in the server, or creates a new one. Also connects the event handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Equals(EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)">
            <summary>
            Compares <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Name"/> and <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Server"/> to that of the <paramref name="other"/> <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Equals(EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Compares this <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Role"/> to the given <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/>. Note that this will throw <see cref="T:System.InvalidOperationException"/> if this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/> is not initialized (<see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Role"/> is <see langword="null"/>)
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Role"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/> to the given object. Will always return <see langword="false"/> for anything other than another <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/> or a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)">
            <summary>
            Compares the name and server of the two <see cref="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole"/> instances.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Inequality(EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)">
            <summary>
            Compares the given role to the given <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.Role"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Inequality(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole,EtiBotCore.DiscordObjects.Guilds.Role)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Inequality(EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole,EtiBotCore.DiscordObjects.Guilds.Role)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole.op_Equality(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.DiscordObjects.Guilds.Specialized.ManagedRole)"/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.Specialized.ThreadMetadata">
            <summary>
            Metadata for a thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ThreadMetadata.Archived">
            <summary>
            Whether or not this thread is archived. Anyone can unarchive it unless <see cref="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ThreadMetadata.Locked"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ThreadMetadata.AutoArchiveDuration">
            <summary>
            The amount of time until this thread is auto-archived in minutes. Can be 60, 1440, 4320, or 10080.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ThreadMetadata.ArchiveTimestamp">
            <summary>
            The timestamp of when the thread was archived.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Specialized.ThreadMetadata.Locked">
            <summary>
            Whether or not this thread has been locked, which means only users with the <see cref="F:EtiBotCore.Payloads.Data.Permissions.ManageThreads"/> permission can unarchive it.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.TextChannel">
            <summary>
            A text channel in a guild.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DownloadAllMessages">
            <summary>
            Params: <c>channelId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DownloadMessage">
            <summary>
            Params: <c>channelId, messageId</c>
            </summary>
            <remarks>
            Returns a message object
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.CreateMessage">
            <summary>
            Params: <c>channelId</c><para/>
            JSON: <para/>
            <code>
            content: string,<para/>
            nonce: unique ID, Variant&lt;string, int&gt;<para/>
            tts: bool,<para/>
            files: data,<para/>
            embed: an embed,<para/>
            payload_json: json encoded body of other request fields,<para/>
            allowed_mentions: <see href="https://discord.com/developers/docs/resources/channel#allowed-mentions-object">Allowed Mentions Object</see><para/>
            message_reference: <see href="https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure">Message Reference Structure</see>
            </code>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.CrosspostMessage">
            <summary>
            Params: <c>channelId, messageId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.CreateReaction">
            <summary>
            Params: <c>channelId, messageId, emoji (URL Encoded)</c>
            </summary>
            <remarks>
            Malformed emojis will raise error 10014 Unknown Emoji
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteOwnReaction">
            <summary>
            Params: <c>channelId, messageId, emoji (URL Encoded)</c>
            </summary>
            <remarks>
            Malformed emojis will raise error 10014 Unknown Emoji
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteUserReaction">
            <summary>
            Params: <c>channelId, messageId, emoji (URL Encoded), userId</c>
            </summary>
            <remarks>
            Malformed emojis will raise error 10014 Unknown Emoji
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetReactions">
            <summary>
            Params: <c>channelId, messageId, emoji (URL Encoded)</c>
            </summary>
            <remarks>
            Malformed emojis will raise error 10014 Unknown Emoji
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteAllReactions">
            <summary>
            Params: <c>channelId, messageId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteAllReactionsForEmoji">
            <summary>
            Params: <c>channelId, messageId, emoji (URL Encoded)</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.EditMessage">
            <summary>
            Params: <c>channelId, messageId</c><para/>
            JSON: <para/>
            <code>
            content: string <para/>
            embed: embed object <para/>
            flags: new flags (only SUPPRESS_EMBEDS is allowed) <para/>
            allowed_mentions: <see href="https://discord.com/developers/docs/resources/channel#allowed-mentions-object">Allowed Mentions Object</see><para/>
            </code>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteMessage">
            <summary>
            Params: <c>channelId, messageId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.BulkDeleteMessages">
            <summary>
            Params: <c>channelId</c><para/>
            JSON: <para/>
            <c>messages: array of snowflakes</c>
            </summary>
            <remarks>
            This endpoint will not delete messages older than 2 weeks, and will fail with a 400 BAD REQUEST if any message provided is older than that or if any duplicate message IDs are provided.
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.EditChannelPermissions">
            <summary>
            Params: <c>channelId, userOrRoleId</c><para/>
            JSON: <para/>
            <code>
            allow: bitwise value of allowed permissions (as string)<para/>
            deny: bitwise value of denied permissions (as string)<para/>
            type: 0 if this modifies a role, 1 if it's a member.
            </code>
            </summary>
            <remarks>
            Values not included in allow or deny will be changed to inherited.
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetChannelInvites">
            <summary>
            Params: <c>channelId</c><para/>
            </summary>
            <remarks>
            Returns a list of invite objects.
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.CreateChannelInvite">
            <summary>
            Params: <c>channelId</c><para/>
            JSON: <para/>
            <code>
            max_age: Duration of the invite in seconds before it expires, or 0 for never<para/>
            max_uses: The maximum amount of times it can be used, or 0 for unlimited<para/>
            temporary: If true, any users that join the server through this invite, <em>don't</em> get any roles, and log off, will be booted from the server.<para/>
            unique: If true, don't try to reuse a similar invite (useful for creating many one-time invites)<para/>
            target_user?: The target user ID for this invite (as a string)<para/>
            target_user_type?: the type of user (int)
            </code>
            </summary>
            <remarks>
            Returns the new invite
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteChannelPermission">
            <summary>
            Params: <c>channelId, userOrRoleId</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.FollowNewsChannel">
            <summary>
            Params: <c>channelId</c><para/>
            JSON: <para/>
            <code>
            webhook_channel_id: The ID of the target channel
            </code>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.TriggerTypingInChannel">
            <summary>
            Params: <c>channelId</c>
            </summary>
            <remarks>
            Advised to not use this if it can be avoided.
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetPinnedMessages">
            <summary>
            Params: <c>channelId</c>
            </summary>
            <remarks>
            Returns all pinned messages in the channel as an array of message objects.
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.AddPinnedMessage">
            <summary>
            Params: <c>channelId, messageIdToPin</c>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Guilds.TextChannel.RemovePinnedMessage">
            <summary>
            Params: <c>channelId, messageIdToUnpin</c>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.TextChannel.NSFW">
            <summary>
            Whether or not this channel is NSFW. For <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>s, 
            this reflects on the <see cref="P:EtiBotCore.DiscordObjects.Guilds.TextChannel.NSFW"/> property of the <strong>parent channel</strong>.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot edit this property.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.TextChannel.RateLimitPerUser">
            <summary>
            Slow-mode timer duration in seconds.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot edit this property.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.TextChannel.Topic">
            <summary>
            The topic of this channel, more commonly known as the channel description.<para/>
            This does not exist on <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>s, and attempting to reference this on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/> will raise an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this is referenced in any way on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/>.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions needed to do this.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this object has been deleted and cannot be edited.</exception>
            <exception cref="T:System.ArgumentNullException">If the topic is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If it is longer than 1024 characters.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.TextChannel.Threads">
            <summary>
            A reference to all threads of this channel. This raises <see cref="T:System.InvalidOperationException"/> if this is called on a thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this is used on a thread.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.CreateNewThread(System.String,EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration,System.Boolean,System.String)">
            <summary>
            Creates a new thread in this channel. Returns the new thread, or <see langword="null"/> if creation failed.
            </summary>
            <param name="name">The name of the thread. Must be between 1-100 chars.</param>
            <param name="archiveAfter">How long the thread must be inactive before archival.</param>
            <param name="isPrivate">Whether or not the thread is private. Cannot be true on threads of news channels.</param>
            <param name="reason">Why this thread is being created.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If name is longer than 100 chars or less than 1 char.</exception>
            <exception cref="T:System.ArgumentException">If name is null or empty, the archive duration is not a predefined value, or isPrivate is true on a news thread.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessageAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Gets a message with the given ID from this channel, or downloads it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessageFromCache(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Tries to pull a message out of cache. Returns <see langword="null"/> if it wasn't downloaded.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetAllMessagesAsync(System.Int32)">
            <summary>
            Downloads all messages in this channel and populates them into this channel's message storage. The messages are guaranteed to be in chronological order.
            </summary>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If amount is less than 0 or greater than 100.</exception>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessagesBeforeAsync(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns all messages in this channel sent before the given time. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="time">The latest time that a message can be sent at to qualify for download.</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessagesBeforeAsync(EtiBotCore.Data.Structs.Snowflake,System.Int32)">
            <summary>
            Returns all messages in this channel sent before the given message. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="message">The latest message that can be downloaded (non-inclusive -- this message won't be included in the list)</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessagesAfterAsync(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns all messages in this channel sent after the given time. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="time">The latest time that a message can be sent at to qualify for download.</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessagesAfterAsync(EtiBotCore.Data.Structs.Snowflake,System.Int32)">
            <summary>
            Returns all messages in this channel sent after the given message. If a message was sent at this exact time (down to the millisecond), it will not be included.
            </summary>
            <param name="message">The latest message that can be downloaded (non-inclusive -- this message won't be included in the list)</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessagesAroundAsync(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns all messages in this channel sent around the given time. How many is "around"? No idea! Discord doesn't say.
            </summary>
            <param name="time">The latest time that a message can be sent at to qualify for download.</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.GetMessagesAroundAsync(EtiBotCore.Data.Structs.Snowflake,System.Int32)">
            <summary>
            Returns all messages in this channel sent around the given message. How many is "around"? No idea! Discord doesn't say.
            </summary>
            <param name="message">The latest message that can be downloaded (non-inclusive -- this message won't be included in the list)</param>
            <param name="amount">MAX 100. The amount of messages to download.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.SendMessageAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed,EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions,System.IO.FileInfo[])">
            <summary>
            Sends a message in this channel. Returns the <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message"/> that was created, or <see langword="null"/> if the message failed to send.
            </summary>
            /// <remarks>
            By default, specifying no <paramref name="mentionLimits"/> will allow anything and everything to be pinged, and will also ping the person that's being replied to.
            </remarks>
            <param name="text">The text to send.</param>
            <param name="embed">The embed to send.</param>
            <param name="mentionLimits">Limitations to who or what can or can't be mentioned.</param>
            <param name="attachments">One or more files to attach.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot send a message in this channel.</exception>
            <exception cref="T:System.ArgumentException">If text is null or empty AND embed is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.SendReplyMessageAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed,EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions,EtiBotCore.DiscordObjects.Guilds.ChannelData.Message,System.IO.FileInfo[])">
            <summary>
            Sends a message in this channel. Returns the <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message"/> that was created, or <see langword="null"/> if the message failed to send.
            </summary>
            /// <remarks>
            By default, specifying no <paramref name="mentionLimits"/> will allow anything and everything to be pinged, and will also ping the person that's being replied to.
            </remarks>
            <param name="text">The text to send.</param>
            <param name="embed">The embed to send.</param>
            <param name="mentionLimits">Limitations to who or what can or can't be mentioned.</param>
            <param name="replyTo">The message to reply to</param>
            <param name="attachments">A file to attach.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot send a message in this channel.</exception>
            <exception cref="T:System.ArgumentException">If text is null or empty AND embed is null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.StartTypingAsync">
            <summary>
            Make it look like the bot is typing. Does nothing in channels that this bot cannot send messages in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.DeleteMessagesAsync(System.Predicate{EtiBotCore.DiscordObjects.Guilds.ChannelData.Message},System.Int32,System.String)">
            <summary>
            This will iterate through all messages in this channel (from most recent to oldest) and store up to <paramref name="limit"/> messages that satisfy the given condition.
            </summary>
            <param name="messageSelector">A predicate that can be used to select messages. Input null to use the latest <paramref name="limit"/> messages.</param>
            <param name="limit">The maximum number of messages to handle. 100 is Discord's limit, and any amount less than 2 is not acceptable (use DeleteMessageAsync instead)</param>
            <param name="reason">Why are the messages being deleted?</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If limit is over 100 or less than 2.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage messages in this channel.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.#ctor(EtiBotCore.Payloads.PayloadObjects.Channel,EtiBotCore.DiscordObjects.Universal.Guild,EtiBotCore.Payloads.Data.ChannelType)">
            <summary>
            For <see cref="T:EtiBotCore.DiscordObjects.Guilds.Thread"/> only. This allows creating a <see cref="T:EtiBotCore.DiscordObjects.Guilds.TextChannel"/> as a thread.
            </summary>
            <param name="channel"></param>
            <param name="inServer"></param>
            <param name="type"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.TextChannel.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.Thread">
            <summary>
            This class represents a thread, which is a type of "sub-channel" present in servers.<para/>
            They are created (and inherit some attributes from) an existing channel, and cannot be created independently
            of some parent channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.Members">
            <summary>
            All members that have access to this thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.ParentChannel">
            <summary>
            A reference to the parent channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.Metadata">
            <summary>
            The metadata for this thread, which stores information like its archival/lock state and various time values.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.NSFW">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.Permissions">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.CreateNewThread(System.String,EtiBotCore.DiscordObjects.Guilds.ChannelData.ThreadArchiveDuration,System.Boolean,System.String)">
            <inheritdoc/>
            <remarks>
            Calling this on a Thread instance creates a thread in the parent channel since it's not possible to create threads of threads.
            </remarks>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.GetThreadCreatorAsync">
            <summary>
            Returns a reference to the <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/> representing the creator of this thread, or <see langword="null"/> if the member left the server and is not in cache.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.TryJoinAsync">
            <summary>
            Tries to join this thread. Returns whether or not joining was successful.
            </summary>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If this thread is private and the bot does not have the manage threads permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.LeaveAsync">
            <summary>
            Leave this thread. Raises <see cref="T:System.InvalidOperationException"/> if the bot is not a member of this thread.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If this bot is not in the thread.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.TryAddMemberToThread(EtiBotCore.DiscordObjects.Guilds.Member)">
            <summary>
            Tries to add the given member to this thread.
            </summary>
            <param name="mbr"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the member is not from the server this thread is in.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the manage threads permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.TryRemoveMemberFromThread(EtiBotCore.DiscordObjects.Guilds.Member)">
            <summary>
            Tries to remove the given member from this thread.
            </summary>
            <param name="mbr"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the member is not from the server this thread is in, or the member is the creator of this thread and it's private</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the manage threads permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.DeleteAsync(System.String)">
            <summary>
            Deletes this thread.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.IsPublic">
            <summary>
            Whether or not this thread is public (be it because it's a news thread or a literal public thread).
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.Thread.IsPrivate">
            <summary>
            Whether or not this thread is private because its type is <see cref="F:EtiBotCore.Payloads.Data.ChannelType.PrivateThread"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.Thread.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Guilds.VoiceChannel">
            <summary>
            Represents a voice channel in a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.Bitrate">
            <summary>
            The bitrate of this channel in bits.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the property is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot modify channels.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.UserLimit">
            <summary>
            The maximum number of users in this channel at once. 0 means infinite users, 99 is the maximum.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the property is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot modify channels.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is over 99.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.ConnectedMembers">
            <summary>
            A list of every member that is connected to this voice channel.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.ConnectAsync">
            <summary>
            Connect the bot to this voice channel for transmission.
            </summary>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot join this channel.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.DisconnectAsync">
            <summary>
            Disconnects the bot from this voice channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Guilds.VoiceChannel.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.IBackup">
            <summary>
            Represents a <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> that can have a backup made.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.IBackup.CreateBackup">
            <summary>
            Duplicates this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> into a new instance via a selective deep copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.IBackup.Restore">
            <summary>
            Restores this <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> to the state defined by <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.Original"/>
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.IPayloadConvertible">
            <summary>
            Represents an object that can be converted to and from a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/>, as well as updated by a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.IPayloadConvertible.IsUpdateable">
            <summary>
            Whether or not this <see cref="T:EtiBotCore.DiscordObjects.IPayloadConvertible"/> can be updated by an incoming payload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.IPayloadConvertible.ToPayload">
            <summary>
            Converts this object to a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.IPayloadConvertible.FromPayload(EtiBotCore.Payloads.PayloadDataObject)">
            <summary>
            Converts a <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/> into this type.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.IPayloadConvertible.Update(EtiBotCore.Payloads.PayloadDataObject)">
            <summary>
            Tweaks the properties and/or fields of this object to reflect the fields of the given <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Attachment">
            <summary>
            An attachment on a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.ID">
            <summary>
            The ID of this attachment.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.FileName">
            <summary>
            The name of the file in this attachment.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.Size">
            <summary>
            The size of this attachment in bytes.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.URL">
            <summary>
            The URL linking to this attachment.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.ProxyURL">
            <summary>
            Alternative, proxied variant of <see cref="P:EtiBotCore.DiscordObjects.Universal.Attachment.URL"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.Height">
            <summary>
            The height of this attachment if it is an image, or <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Attachment.Width">
            <summary>
            The width of this attachment if it is an image, or <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Attachment.SaveToFileAsync(System.String)">
            <summary>
            Downloads this <see cref="T:EtiBotCore.DiscordObjects.Universal.Attachment"/> and writes all data to the file at the given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Attachment.SaveToFileAsync(System.IO.FileInfo)">
            <summary>
            Downloads this <see cref="T:EtiBotCore.DiscordObjects.Universal.Attachment"/> and writes all data to the given <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Attachment.SaveToFileAsync(System.IO.DirectoryInfo)">
            <summary>
            Downloads this <see cref="T:EtiBotCore.DiscordObjects.Universal.Attachment"/> and puts it in a file named <see cref="P:EtiBotCore.DiscordObjects.Universal.Attachment.FileName"/> in the given <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="inDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Attachment.CreateFromPayload(EtiBotCore.Payloads.PayloadObjects.Attachment)">
            <summary>
            Creates a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Attachment"/> from the given payload variant.
            </summary>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.ChannelMention">
            <summary>
            A reference to a channel included in a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ChannelMention.Channel">
            <summary>
            The channel this refers to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ChannelMention.Type">
            <summary>
            The type of channel that this is.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ChannelMention.CreateFromPayloadAsync(EtiBotCore.Payloads.PayloadObjects.ChannelMention)">
            <summary>
            Creates a new <see cref="T:EtiBotCore.DiscordObjects.Universal.ChannelMention"/> from the payload variant. This may download the guild and its channels.
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions">
            <summary>
            Represents what mentions are allowed in a message. JSON compatible.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowNothing">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> instance that does not allow anything to be pinged.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowOnlyRoles">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> instance that only allows roles to be pinged (not including @everyone and @here)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowOnlyUsers">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> instance that only allows users to be pinged.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.Reply">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> that only pings the person this message is replying to and nobody else, of course, granted that this is an actual reply message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.NoReply">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> that does not ping the person this message is replying to, of course, granted that this is an actual reply message.<para/>
            This is identical to <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowNothing"/> and exists for idiomatic programming.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowOnlyRolesAndUsers">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> that allows pinging any role or user, excluding @everyone and @here.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowOnlyEveryoneAndHere">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> that allows pinging @everyone and @here, but not any individual roles or users. Probably useless but hey.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowAllButReplies">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> that allows anyone and anything to be pinged, but will not ping whoever it's replying to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowAnything">
            <summary>
            Returns a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/> that allows anyone and anything to be pinged, and will ping whoever it's replying to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowPingingAnyRoles">
            <summary>
            Whether or not this should be allowed to ping any and all roles (or mentionable roles, if the bot does not have permission).<para/>
            <strong>Default value:</strong> <see langword="false"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowPingingAnyUsers">
            <summary>
            Whether or not this should be allowed to ping any and all users.<para/>
            <strong>Default value:</strong> <see langword="false"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowEveryoneAndHere">
            <summary>
            Whether or not this should be allowed to ping @everyone and @here.<para/>
            <strong>Default value:</strong> <see langword="false"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.PingRepliedUser">
            <summary>
            Whether or not to ping the user this message replied to.<para/>
            <strong>Default value:</strong> <see langword="false"/>
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.Roles">
            <summary>
            All roles to ping. Max 100 IDs.<para/>
            If <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowPingingAnyRoles"/> is <see langword="true"/>, this list will do nothing, as any and all role pings would be resolved.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.Users">
            <summary>
            All users to ping. Max 100 IDs.<para/>
            If <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.AllowPingingAnyUsers"/> is <see langword="true"/>, this list will do nothing, as any and all user pings would be resolved.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions.#ctor">
            <summary>
            Create a blank <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.AllowedMentions"/>
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer">
            <summary>
            A container for permissions.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.Creator">
            <summary>
            A reference to the object that created this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.Locked">
            <summary>
            Whether or not <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.Creator"/> is in a state that prevents changes.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.PropertyName">
            <summary>
            The name of the property that instantiated this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RegisterPermissionFor(EtiBotCore.DiscordObjects.Guilds.Role,EtiBotCore.Payloads.Data.Permissions,EtiBotCore.Payloads.Data.Permissions)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RegisterPermissionFor(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.Payloads.Data.Permissions,EtiBotCore.Payloads.Data.Permissions)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RegisterPermissionFor(EtiBotCore.DiscordObjects.Universal.User,EtiBotCore.Payloads.Data.Permissions,EtiBotCore.Payloads.Data.Permissions)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RegisterPermissionFor(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.Payloads.Data.Permissions,EtiBotCore.Payloads.Data.Permissions)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RegisterPermissionFor(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.Payloads.Data.Permissions,EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Registers permissions for the given <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> or <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> on this channel with the given permissions to allow and deny. Anything that is neither allowed nor denied will be set to inherited. Likewise, anything that is wrongly registered where it both allows <strong>and</strong> denies permissions will be set to inherited as well.<para/>
            If an instance of <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> already exists for this <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> or <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/>, then this will update the existing object. Otherwise, this will create a new object.<para/><para/>
            If you wish to set a specific permission, it is often best to call <c>GetPermission(roleOrUser)</c> and to directly call set on the returned object rather than calling this method every time. This throws a <see cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"/> if the object storing these permissions is locked.
            </summary>
            <param name="id">The user to add to this channel.</param>
            <param name="toAllow">The permissions to allow.</param>
            <param name="toDeny">The permissions to deny.</param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object containing this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the ability to modify this object.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetOrRegister(EtiBotCore.DiscordObjects.Guilds.Role)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetOrRegister(EtiBotCore.Data.Structs.Snowflake)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetOrRegister(EtiBotCore.DiscordObjects.Universal.User)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetOrRegister(EtiBotCore.Data.Structs.Snowflake)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetOrRegister(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Identical to calling <see cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetPermission(EtiBotCore.Data.Structs.Snowflake)"/>, but this will register a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> for the given object and return it should one not have existed previously.
            </summary>
            <param name="id"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object containing this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the ability to modify this object.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetPermission(EtiBotCore.DiscordObjects.Guilds.Role)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetPermission(EtiBotCore.Data.Structs.Snowflake)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetPermission(EtiBotCore.DiscordObjects.Universal.User)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetPermission(EtiBotCore.Data.Structs.Snowflake)"/>
            <remarks>
            This only returns for user-specific permissions, or, the permissions for this object explicitly added this specific person to the list.
            To get the effective permissions of a given user (based on their roles), use <see cref="M:EtiBotCore.DiscordObjects.Guilds.Member.GetPermissionsInChannel(EtiBotCore.DiscordObjects.Base.GuildChannelBase)"/>.
            </remarks>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetOrRegisterForDataPopulation(EtiBotCore.Data.Structs.Snowflake,System.Boolean)">
            <summary>
            Forcefully gets or registers a <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> for the given ID, for the purpose of updating from a payload.<para/>
            This will return <see langword="null"/> if the object is unlocked (being edited), unless forceUnlock is true.
            This does not set the changed flag.
            </summary>
            <param name="id"></param>
            <param name="forceUnlock">Forcefully treat the object as if it's unlocked.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.GetPermission(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Acquires the permissions associated with the given <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> or <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> in this channel, or <see langword="null"/> if no permissions are registered for the role or user.
            </summary>
            <param name="id">The ID of the role or user.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RemovePermissions(EtiBotCore.DiscordObjects.Universal.User)">
            <summary>
            Removes the permissions of the given <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> from this channel, if present.
            </summary>
            <param name="user"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object containing this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the ability to modify this object.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.RemovePermissions(EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Removes the permissions of this given <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> from this channel, if present.
            </summary>
            <param name="role"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object containing this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> is locked.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the ability to modify this object.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.ToJson">
            <summary>
            Converts this container to a JSON string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.NotifyChange(EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer)">
            <summary>
            Tells the object storing this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> that it has changed.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.#ctor(EtiBotCore.DiscordObjects.Base.GuildChannelBase,System.String)">
            <summary>
            Construct a new container for the given channel with the given property name storing this object.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer.Clone">
            <summary>
            Copies this container and all permissions inside.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation">
            <summary>
            Represents permissions for a specific person or role. Think of this as one of the entries in the permissions configuration screen, one of the roles or people you can add.<para/>
            To read or write permissions, access this object like an array <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Item(EtiBotCore.Payloads.Data.Permissions)"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.PropertyName">
            <summary>
            The name of the property that contains this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.ID">
            <summary>
            The role or user ID that this overwrite applies to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Type">
            <summary>
            What this permission object applies to, which is either a role in the server's role list, or a role/member in a channel's permission object.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.AllowsInherited">
            <summary>
            Whether or not the <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Inherit"/> value is allowed for permissions. This is <see langword="true"/> for permissions associated with channels, and <see langword="false"/> for literal role objects.<para/>
            If any permissions are set to <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Inherit"/> and this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> is associated with a role in the server's role list, then the inherited permissions will be <strong>ignored.</strong> This means that no changes will be made to the faulty flags.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Parent">
            <summary>
            The <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> containing this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Creator">
            <summary>
            A reference to the object that created this <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/>, which is only set for cases where this is a standalone <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> not present in a <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> (e.g. on a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/>)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Locked">
            <summary>
            Whether or not <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Creator"/> or <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Parent"/> is in a state that prevents changes (whichever is applicable for this object).
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Item(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Get or set a given permission. The input permission must be a <strong>single permission (not a combined flag of multiple permissions)</strong>.<para/>
            Attempting to pass in a merged flag will raise an <see cref="T:System.ArgumentException"/>. Passing in <see cref="F:EtiBotCore.Payloads.Data.Permissions.None"/> will always return <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Inherit"/>.<para/>
            Setting something to <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Inherit"/> when <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.AllowsInherited"/> is <see langword="false"/> will not change the value.
            </summary>
            <param name="perms"></param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this is part of a <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> and the object is locked.</exception>
            <exception cref="T:System.ArgumentException">If the input permissions enum is undefined.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the permissions necessary to alter permissions.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.#ctor(EtiBotCore.DiscordObjects.Guilds.Role,System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> for a role in the server's role list. This constructor is not the right one if this permissions is associated with a channel.
            </summary>
            <param name="source">The role in the server's role list.</param>
            <param name="name">The name of the property that created this.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.#ctor(System.UInt64,EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation"/> for a channel.
            </summary>
            <param name="associatedID">The ID of whatever this affects.</param>
            <param name="parent">The <see cref="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionContainer"/> storing this.</param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Reset">
            <summary>
            Depending on the state of <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.AllowsInherited"/>, this will either set all permissions to <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Inherit"/> or <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Deny"/>, resetting the permissions for this <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> or Role/<see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> in a <see cref="T:EtiBotCore.DiscordObjects.Base.GuildChannelBase"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.DataReset">
            <summary>
            Depending on the state of <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.AllowsInherited"/>, this will either set all permissions to <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Inherit"/> or <see cref="F:EtiBotCore.Payloads.Data.PermissionState.Deny"/><para/>
            Unlike <see cref="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.Reset"/>, this does not check the state / lock of the object and always sets the data unquestionably. This also does not notify the parent container about a change.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.SetAllowed(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Sets the allowed permissions to the given flags.
            </summary>
            <param name="allowed"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object storing this is locked.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.SetInherited(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Sets the inherited permissions to the given flags.
            </summary>
            <param name="inherited"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object storing this is locked.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.SetDenied(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Sets the denied permissions to the given flags.
            </summary>
            <param name="denied"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object storing this is locked.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.SetTo(EtiBotCore.Payloads.Data.Permissions,EtiBotCore.Payloads.Data.PermissionState,System.Boolean)">
            <summary>
            Forcefully updates the given permissions flags to the given state. Ignores the item's locked state, and does not notify the parent of changes (if applicable).
            </summary>
            <param name="perms"></param>
            <param name="state"></param>
            <param name="isInUpdate"></param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If the object storing this is locked.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.GetAllowed">
            <summary>
            Returns all permissions that are allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.GetInherited">
            <summary>
            Returns all inherited permissions. Returns <see cref="F:EtiBotCore.Payloads.Data.Permissions.None"/> if <see cref="P:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.AllowsInherited"/> is <see langword="false"/>, which applies to roles in the server list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.GetDenied">
            <summary>
            Returns all permissions that are denied (or just off in the case of roles).
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.ApplyTo(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Given a set of "base permissions" (or, permissions that are already allowed), this applies the permissions from this object and returns the result.
            </summary>
            <param name="basePermissions">The pre-existing permissions to modify.</param>
            <returns>The base permissions after being modified by this object.</returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.CheckRequirements">
            <summary>
            Verifies all permissions.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If Discord is suffering from an outage or the bot has disconnected.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If anything is not possible.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.ShouldSerializeAllowed">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.ShouldSerializeDenied">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.PermissionTarget">
            <summary>
            Describes what this overwrite applies to.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.PermissionTarget.ChannelRoleOrMember">
            <summary>
            This overwrite applies to a role or member in a channel's permissions.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Data.PermissionInformation.PermissionTarget.ServerRole">
            <summary>
            This overwrite applies to a role in the server's role list.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed">
            <summary>
            Represents an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Title">
            <summary>
            The title of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Description">
            <summary>
            The description of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.URL">
            <summary>
            The URL of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Timestamp">
            <summary>
            The timestamp of the content.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Color">
            <summary>
            The color code for the embed's side strip, or <see langword="null"/> if it uses Discord's default color.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Footer">
            <summary>
            The footer of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Image">
            <summary>
            The image in this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Thumbnail">
            <summary>
            The thumbnail of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Video">
            <summary>
            The video in of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Provider">
            <summary>
            The provider of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Author">
            <summary>
            The author of this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.Fields">
            <summary>
            Fields in this embed, or <see langword="null"/> if it doesn't have one.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Embed.#ctor">
            <summary>
            Constructs a new empty Embed.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Embed.#ctor(EtiBotCore.Payloads.PayloadObjects.Embed)">
            <summary>
            Constructs a new embed from the given payload embed.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Embed.Clone">
            <summary>
            Performs a deep-copy of this embed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.FooterComponent">
            <summary>
            The footer of an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.FooterComponent.Text">
            <summary>
            The text on the footer of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.FooterComponent.IconURL">
            <summary>
            The URL of the icon on this footer, if applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.FooterComponent.ProxyIconURL">
            <summary>
            A proxied variant of <see cref="P:EtiBotCore.DiscordObjects.Universal.Embed.FooterComponent.IconURL"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.ImageComponent">
            <summary>
            The image on an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.ImageComponent.URL">
            <summary>
            The URL of the image. HTTPS only.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.ImageComponent.ProxyURL">
            <summary>
            A proxied variant of <see cref="P:EtiBotCore.DiscordObjects.Universal.Embed.ImageComponent.URL"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.ImageComponent.Height">
            <summary>
            The height of this image.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.ImageComponent.Width">
            <summary>
            The width of this image.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.ThumbnailComponent">
            <summary>
            The thumbnail of an embed. Identical to an image.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.VideoComponent">
            <summary>
            A video in an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.VideoComponent.URL">
            <summary>
            The URL to the video.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.VideoComponent.Height">
            <summary>
            The height of the video.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.VideoComponent.Width">
            <summary>
            The width of the video.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.ProviderComponent">
            <summary>
            The provider for an embed. Yeah you know as well as I do.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.ProviderComponent.Name">
            <summary>
            The name of the provider for this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.ProviderComponent.URL">
            <summary>
            The URL of the provider.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.AuthorComponent">
            <summary>
            The author of an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.AuthorComponent.Name">
            <summary>
            The name of the author.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.AuthorComponent.URL">
            <summary>
            The URL to the author.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.AuthorComponent.IconURL">
            <summary>
            The URL to the author's icon. HTTPS only.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.AuthorComponent.ProxyIconURL">
            <summary>
            A proxied variant of <see cref="P:EtiBotCore.DiscordObjects.Universal.Embed.AuthorComponent.IconURL"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Embed.FieldComponent">
            <summary>
            A field of an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.FieldComponent.Name">
            <summary>
            The title of this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.FieldComponent.Value">
            <summary>
            The content of this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Embed.FieldComponent.Inline">
            <summary>
            Whether or not this field displays inline.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Emoji">
            <summary>
            Represents a default emoji, which is one representable with unicode.<para/>
            See <see cref="T:EtiBotCore.DiscordObjects.Universal.CustomEmoji"/> for user-designed Emojis. The ID of a stock emoji will always be <see cref="F:EtiBotCore.Data.Structs.Snowflake.Invalid"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Emoji.Name">
            <summary>
            The name of this emoji if it's custom (will never have colons), or the actual unicode character if this is a default Emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Emoji.IsCustom">
            <summary>
            Whether or not this Emoji is a user-defined / custom Emoji. If <see langword="false"/>, this is a standard Unicode Emoji. If <see langword="true"/>, this can (and should) be cast into <see cref="T:EtiBotCore.DiscordObjects.Universal.CustomEmoji"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.#ctor(System.String)">
            <summary>
            Construct a new emoji for the given unicode character.
            </summary>
            <param name="unicodeCharacter"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.#ctor(System.String,EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Intended for being called by <see cref="T:EtiBotCore.DiscordObjects.Universal.CustomEmoji"/>.
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.GetOrCreate(System.String)">
            <summary>
            Get or create an emoji from the given unicode character. Remember to check if this is custom BEFORE using this, and if it is, use <see cref="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.GetOrCreate(EtiBotCore.Payloads.PayloadObjects.Emoji)"/>
            </summary>
            <param name="unicodeChar"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.ToURLEncoding">
            <summary>
            Converts this <see cref="T:EtiBotCore.DiscordObjects.Universal.Emoji"/> to a url-safe encoding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <summary>
            Does nothing.
            </summary>
            <param name="obj"></param>
            <param name="skipNonNullFields"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            This will always throw an <see cref="T:System.InvalidOperationException"/> -- Emojis cannot be altered by bots.
            </summary>
            <param name="changes"></param>
            <param name="reasons"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.Equals(EtiBotCore.DiscordObjects.Universal.Emoji)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.ToString">
            <summary>
            Converts this <see cref="T:EtiBotCore.DiscordObjects.Universal.Emoji"/> to a string that is formatted for use in chats.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.op_Equality(EtiBotCore.DiscordObjects.Universal.Emoji,EtiBotCore.DiscordObjects.Universal.Emoji)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Emoji.op_Inequality(EtiBotCore.DiscordObjects.Universal.Emoji,EtiBotCore.DiscordObjects.Universal.Emoji)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.CustomEmoji">
            <summary>
            Represents a user-uploaded emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.CustomEmoji.Creator">
            <summary>
            The user that created this.
            </summary>
            <remarks>
            <strong>This could be <see langword="null"/></strong> solely depending on whether or not this <see cref="T:EtiBotCore.DiscordObjects.Universal.CustomEmoji"/> was created in a reaction or not. This behavior will be changed in the future.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.CustomEmoji.Animated">
            <summary>
            Whether or not this Emoji is animated.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.CustomEmoji.Managed">
            <summary>
            Whether or not this Emoji is managed, e.g. from a Twitch streamer.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.CustomEmoji.IsCustom">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.#ctor(EtiBotCore.DiscordObjects.Universal.User,EtiBotCore.Data.Structs.Snowflake,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Constructs a new CustomEmoji with the given creator user and name.
            </summary>
            <param name="creator"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="animated"></param>
            <param name="managed"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.Equals(EtiBotCore.DiscordObjects.Universal.CustomEmoji)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.ToString">
            <summary>
            Converts this <see cref="T:EtiBotCore.DiscordObjects.Universal.CustomEmoji"/> to a string that is formatted for use in chats.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.op_Equality(EtiBotCore.DiscordObjects.Universal.CustomEmoji,EtiBotCore.DiscordObjects.Universal.CustomEmoji)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.CustomEmoji.op_Inequality(EtiBotCore.DiscordObjects.Universal.CustomEmoji,EtiBotCore.DiscordObjects.Universal.CustomEmoji)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Guild">
            <summary>
            Represents a guild, better known as a "server" to most. This contains all necessary properties and methods required to interract with this guild.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Guild.InstantiatedGuilds">
            <summary>
            All guild objects that have been instantiated.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Guild.GetGuild">
            <summary>
            Parameters: <c>guildID</c>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Name">
            <summary>
            The name of this server.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ServerIcon">
            <summary>
            The icon of this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ServerIconHash">
            <summary>
            The has to the icon of this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.BannerImageURL">
            <summary>
            The banner of this server, if applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.BannerHash">
            <summary>
            The hash to the banner of this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.VanityURLCode">
            <summary>
            The vanity URL code of the server, or <see langword="null"/> if it does not have one. Cannot be changed by bots.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.VoiceRegion">
            <summary>
            The ID of the voice region for this server.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Description">
            <summary>
            The description of this server, which only applies to discoverable servers. If the server does not have one, this will be <see langword="null"/>.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.DiscoverySplashURL">
            <summary>
            The discovery page image, if applicable. If the server does not have one, this will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.DiscoverySplashHash">
            <summary>
            The hash of the discovery splash, if applicable. If the server does not have one, this will be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.PreferredLocale">
            <summary>
            The preferred locale of this server if it's public. Defaults to "en-US".
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.NitroBoosterCount">
            <summary>
            The amount of people boosting this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.NitroBoostTier">
            <summary>
            The tier of the nitro boost on this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.PublicUpdatesChannel">
            <summary>
            The public updates channel.<para/>
            <strong>Only available to Community Servers</strong>
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GuildFeatureNotAvailableException">If this guild is not registered as a public server, and does not have nor need a public updates channel.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.RulesChannel">
            <summary>
            The the rules channel.<para/>
            <strong>Only available to Community Servers</strong>
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.GuildFeatureNotAvailableException">If this guild is not registered as a public server, and does not have nor need a public updates channel.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.SystemChannel">
            <summary>
            The the channel that system messages (e.g. join/leave + boosts) are sent to.<para/>
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.SystemChannelFlags">
            <summary>
            The flags that determine what is NOT sent in the system channel.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If this is using an undefined enum.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ExplicitFilterLevel">
            <summary>
            The selection of members that Discord's explicit content filter will be applied to.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.ValueNotAllowedException">If this guild is a community server and the value is set too low.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If this is using an undefined enum.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.VerificationLevel">
            <summary>
            The verification level of this server, which determines restrictions applied to members joining the server.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.ValueNotAllowedException">If this guild is a community server and it is set to none.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If this is using an undefined enum.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.MFALevel">
            <summary>
            The MFA level that moderators of the server must have before they can actually do administrative things.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ApplicationID">
            <summary>
            If this server was made by a bot, this is the ID of the bot's application that made it (not the ID of the bot user itself!)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Features">
            <summary>
            The features this server has available.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.AFKChannel">
            <summary>
            The AFK channel, or <see langword="null"/> if there is none.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.AFKTimeout">
            <summary>
            The timeout for the AFK channel in seconds.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.IsLarge">
            <summary>
            Whether or not this server is considered "Large" by Discord.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.MaxMembers">
            <summary>
            The maximum number of members this server can have.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.MaxPresences">
            <summary>
            The maximum number of presences that the bot can know about, if applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.MaxVideoChannelUsers">
            <summary>
            The maximum amount of people that can be watching a stream at once.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.OwnerID">
            <summary>
            The ID of the server's owner.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.IAmOwner">
            <summary>
            Whether or not the current bot user is the owner of the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Unavailable">
            <summary>
            Whether or not this guild is unavailable due to an outage.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.NotificationLevel">
            <summary>
            The notification level of this server, or what messages trigger notifications.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.WidgetEnabled">
            <summary>
            Whether or not this server has its widget enabled.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.WidgetChannelID">
            <summary>
            If the widget has invites enabled, this is the channel it leads to. Otherwise, this is <see langword="null"/>.
            </summary>
            <remarks>
            Only this property's <see langword="set"/> method will throw the given exceptions. <see langword="get"/> will never raise an exception.
            </remarks>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this property is not able to be changed at this point in time.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">If this guild is suffering from an outage.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If this guild has been deleted and cannot be edited.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage the guild.</exception>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ApproxMemberCount">
            <summary>
            The approximate amount of members.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ApproxPresenceCount">
            <summary>
            The approximate amount of received presences.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.JoinedGuildAt">
            <summary>
            When this bot joined the guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Channels">
            <summary>
            The channels in this server. This contains any and all channel objects, including but not limited to text channels, voice channels, and channel categories.<para/>
            Note that this may not be in order of position. Channels in guilds implement <see cref="T:System.IComparable`1"/>, so it is possible to use <see cref="M:System.Array.Sort``1(``0[])"/> on this.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.TextChannels">
            <summary>
            A list of the text channels in this server.
            Note that this may not be in order of position. Channels in guilds implement <see cref="T:System.IComparable`1"/>, so it is possible to use <see cref="M:System.Array.Sort``1(``0[])"/> on this.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Threads">
            <summary>
            A list of all threads in this server. Note that it may be better to reference threads of individual <see cref="T:EtiBotCore.DiscordObjects.Guilds.TextChannel"/>s.
            Note that this may not be in order of position. Channels in guilds implement <see cref="T:System.IComparable`1"/>, so it is possible to use <see cref="M:System.Array.Sort``1(``0[])"/> on this.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.VoiceChannels">
            <summary>
            A list of the voice channels in this server.
            Note that this may not be in order of position. Channels in guilds implement <see cref="T:System.IComparable`1"/>, so it is possible to use <see cref="M:System.Array.Sort``1(``0[])"/> on this.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.ChannelCategories">
            <summary>
            A list of channel categories in this server. These category objects contain references to the channels contained inside.
            Note that this may not be in order of position. Channels in guilds implement <see cref="T:System.IComparable`1"/>, so it is possible to use <see cref="M:System.Array.Sort``1(``0[])"/> on this.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Emojis">
            <summary>
            The emojis in this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Stickers">
            <summary>
            The stickers in this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Members">
            <summary>
            The members in this server.
            </summary>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.Guild.MembersStorage">
            <summary>
            This is used for clones.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Presences">
            <summary>
            The presences of members in this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.Roles">
            <summary>
            The roles in this server. Removing any roles from this array will delete the role.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.VoiceStates">
            <summary>
            Users who are in voice channels, and their states.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.BotMember">
            <summary>
            The member object representing this bot in this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.EveryoneRole">
            <summary>
            Returns the <code>@everyone</code> role, which is a role with the same ID as this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Guild.FileSizeLimit">
            <summary>
            The maximum filesize that the bot can send in accordance with server boost, in bytes.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.SetServerIcon(System.IO.FileInfo)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.SetServerInviteSplash(System.IO.FileInfo)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.SetServerBanner(System.IO.FileInfo)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.DownloadEntireGuildAsync(System.Boolean)">
            <summary>
            SHOULD ONLY EVER BE USED WHEN THIS GUILD WAS SHALLOWLY INITIALIZED. VERY EXPENSIVE. AVOID AT ALL COSTS.<para/>
            This will redownload the entire guild.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetAllGuilds">
            <summary>
            Returns all instantiated guilds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.DownloadAllChannelsAsync">
            <summary>
            Download all of the channels in this guild by force. Avoid if possible!
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.ForcefullyDownloadMemberAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Acquires the member with the given ID via a guaranteed redownload. As such, this can be expensive to call. Use care, and avoid calling this unless it is absolutely necessary.<para/>
            This will return <see langword="null"/> if, for whatever reason, the member could not be downloaded.
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.WebSocketErroredException">If the request fails.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetMemberAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Acquires the member with the given ID from cache, or if they do not exist yet, will acquire them via a download.
            This will return <see langword="null"/> if, for whatever reason, the member could not be downloaded (and they did not already exist in cache).
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.FindMembers(System.String)">
            <summary>
            Tries to find a member with the given name by searching which members' names contain the given name string. Returns all members that qualify.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.PruneMembersAsync(System.Int32,System.String,EtiBotCore.DiscordObjects.Guilds.Role[],System.Boolean)">
            <summary>
            Prunes members from the server who have been inactive for longer than <paramref name="inactiveDays"/> days, and optionally with the given roles.
            </summary>
            <param name="inactiveDays">The amount of days a given member has to have been inactive for in order to be pruned. Minimum of 1.</param>
            <param name="reason">Why are you pruning members?</param>
            <param name="withRoles">The roles to use to determine who to prune.</param>
            <param name="withCount">Return the amount of pruned members. Possible, but discouraged, for large servers.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot kick members</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="inactiveDays"/> is less than 1</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.DownloadAllMembersAsync">
            <summary>
            <strong>WARNING: VERY EXPENSIVE</strong>. Downloads all members from the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.FindMembersWithRole(EtiBotCore.DiscordObjects.Guilds.Role)">
            <summary>
            Returns all already-downloaded members that have the given role.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetBannedMembersAsync">
            <summary>
            Returns a list of every banned user. This makes a request to discord. Please call sparingly.
            </summary>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the BAN_MEMBERS permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetBanInfo(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the <see cref="T:EtiBotCore.DiscordObjects.Guilds.MemberData.Ban"/> object for the user with the given <paramref name="id"/>, or <see langword="null"/> if they are not banned.
            </summary>
            <param name="id">The ID of the member to check.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the BAN_MEMBERS permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.BanMemberAsync(EtiBotCore.Data.Structs.Snowflake,System.String,System.Int32)">
            <summary>
            Bans the given member with the given ID, and deletes the messages they sent in the last <paramref name="deleteMessageDays"/> days, which has a maximum of 7.
            </summary>
            <param name="member">The member to ban</param>
            <param name="reason">Why are you banning them?</param>
            <param name="deleteMessageDays">The number of days of messages to delete sent by this member, from 0 to 7.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="deleteMessageDays"/> is less than 0 or greater than 7.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the BAN_MEMBERS permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.BanMemberAsync(EtiBotCore.DiscordObjects.Guilds.Member,System.String,System.Int32)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Guild.BanMemberAsync(EtiBotCore.Data.Structs.Snowflake,System.String,System.Int32)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.UnbanMemberAsync(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Unbans the member with the given ID.
            </summary>
            <param name="member">The member to unban.</param>
            <param name="reason">Why are you unbanning them?</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the BAN_MEMBERS permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.KickMemberAsync(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Kicks the given member for the given reason.
            </summary>
            <param name="member"></param>
            <param name="reason">Why are you kicking them?</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the KICK_MEMBERS permission.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.KickMemberAsync(EtiBotCore.DiscordObjects.Guilds.Member,System.String)">
            <inheritdoc cref="M:EtiBotCore.DiscordObjects.Universal.Guild.KickMemberAsync(EtiBotCore.Data.Structs.Snowflake,System.String)"/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.RedownloadAllRolesAsync">
            <summary>
            Forces a redownload of the roles list.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.CreateNewRoleAsync(System.String,System.Nullable{EtiBotCore.Payloads.Data.Permissions},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Create a new role with the given properties.
            </summary>
            <param name="name">The name of this role.</param>
            <param name="allowedPermissions">The permissions that are enabled on this role. If left undefined, it inherits from @everyone</param>
            <param name="color">The color of this role, or null to use the default color.</param>
            <param name="displaySeparately">Whether or not to display this role separately in the member list.</param>
            <param name="mentionable">Whether or not members can @mention this role.</param>
            <param name="reason">The reason this role was created.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot is not authorized to manage roles.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.DeleteRoleAsync(EtiBotCore.DiscordObjects.Guilds.Role,System.String)">
            <summary>
            Deletes the given <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> from the server. Unlike modifying <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.Roles"/>, this will not rely on <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)"/> being called.
            </summary>
            <param name="role"></param>
            <param name="reason">The reason this role was deleted.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.ModifyRoleAsync(EtiBotCore.DiscordObjects.Guilds.Role,System.String,System.Nullable{EtiBotCore.Payloads.Data.Permissions},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Modify the given role to have the given properties. Any <see langword="null"/> properties will remain unchanged.<para/>
            Unlike editing the properties of a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> directly from <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.Roles"/>, this does not require a call to <see cref="M:EtiBotCore.DiscordObjects.DiscordObject.BeginChanges(System.Boolean)"/>
            </summary>
            <param name="role">The role to change.</param>
            <param name="name">The new name of this role.</param>
            <param name="allowedPermissions">The new permissions that are enabled on this role.</param>
            <param name="color">The new color of this role, or null to use the default color.</param>
            <param name="displaySeparately">Whether or not to display this role separately in the member list.</param>
            <param name="mentionable">Whether or not members can @mention this role.</param>
            <param name="reason">The reason this role is being edited.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot is not authorized to manage roles.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetRole(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the <see cref="T:EtiBotCore.DiscordObjects.Guilds.Role"/> with the given ID, or <see langword="null"/> if the role does not exist in this server.<para/>
            Of course, this will not download the role.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.ForcefullyAcquireChannelsAsync">
            <summary>
            Forcefully redownloads all channels and populates all arrays. Ignores the object's locked state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetChannel(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the channel with the given ID. This will not download the channel.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetChannel``1(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the channel with the given ID, as the given channel type. This will not download the channel. Returns <see langword="null"/> if it could not be returned.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetAllEmojisAsync">
            <summary>
            Downloads all emojis for this server, and updates <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.Emojis"/> if they were successfully downloaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.DownloadAuditLog(System.Nullable{EtiBotCore.Payloads.Data.AuditLogActionType})">
            <summary>
            Downloads the entire audit log for this guild. Requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.ViewAuditLog"/>
            </summary>
            <param name="byType">If defined, this will limit the type of entry downloaded.</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot view audit logs.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetOrCreateUnavailableFromPayload(EtiBotCore.Payloads.PayloadObjects.UnavailableGuild)">
            <summary>
            Gets an existing guild by this ID or creates a new one. Returns <see langword="true"/> if a new guild was created. Sets the <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.Unavailable"/> property to true.<para/>
            This expects a payload from the GUILD_DELETE or GUILD_CREATE event.
            </summary>
            <param name="plGuild"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetOrCreateFromPayload(EtiBotCore.Payloads.PayloadObjects.Guild)">
            <summary>
            Returns a guild object that already exists from the given paylaod (and updates it), or creates a new one from thsi paylaod.
            </summary>
            <param name="plGuild"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.GetOrDownloadAsync(EtiBotCore.Data.Structs.Snowflake,System.Boolean)">
            <summary>
            Returns a guild object that already exists with the given ID, or creates a new one with the given ID and downloads it.
            </summary>
            <param name="guildID"></param>
            <param name="silence">Silence the download alert that's used to deter calling the method.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.RegisterChannel(EtiBotCore.DiscordObjects.Base.GuildChannelBase)">
            <summary>
            Adds the given channel to this guild's channel registry unless the guild is currently in the middle of an update cycle or it already contains this channel.
            </summary>
            <param name="channelIn"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.UpdateChannelRegistries">
            <summary>
            Updates <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.TextChannels"/>, <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.VoiceChannels"/>, <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.ChannelCategories"/>, and <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.Threads"/> once <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.Channels"/> has been modified.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.RegisterAndUpdateVoiceState(EtiBotCore.DiscordObjects.Universal.VoiceState)">
            <summary>
            Intended to be called from <see cref="T:EtiBotCore.Payloads.Events.Intents.GuildVoiceStates.VoiceStateUpdateEvent"/>, this will add a new <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> to <see cref="P:EtiBotCore.DiscordObjects.Universal.Guild.VoiceStates"/> (if necessary), and tell all voice channels to update the member count.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Guild.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.PartialUser">
            <summary>
            A partial user, which contains the raw information about them, such as their name#discriminator, ID, and avatar.<para/>
            Note that equality checks between <see cref="T:EtiBotCore.DiscordObjects.Universal.PartialUser"/> instances are by reference only, and they are not updated by any payload events (so they will contain outdated information if the user changes their name#discriminator or avatar)
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.PartialUser.ID">
            <summary>
            The ID of this partial user.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.PartialUser.AvatarURL">
            <summary>
            The URL to this user's avatar, or their Discord-assigned default avatar if they don't have one set.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.PartialUser.AvatarHash">
            <summary>
            The has to this user's avatar, or <see langword="null"/> if they don't have done.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.PartialUser.Discriminator">
            <summary>
            This user's discriminiator, which is the four digits after their username, e.g. <c>1760</c> in <c>Eti#1760</c>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.PartialUser.Username">
            <summary>
            The user's username.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.PartialUser.FullName">
            <summary>
            This user's full name, which is their username#discriminator e.g. <c>Eti#1760</c>.
            </summary>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Reaction">
            <summary>
            A reaction on a message exclusively by emoji and amount.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Reaction.Count">
            <summary>
            The amount of times this reaction has been added.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Reaction.SelfIncluded">
            <summary>
            Whether or not this bot has reacted with this emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Reaction.Emoji">
            <summary>
            A partial <see cref="P:EtiBotCore.DiscordObjects.Universal.Reaction.Emoji"/> object.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Reaction.#ctor(EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Only to be used when synchronizing reaction containers.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Reaction.Clone">
            <summary>
            Returns a shallow-copy of this <see cref="T:EtiBotCore.DiscordObjects.Universal.Reaction"/> (it doesn't need a deep copy)
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.ReactionContainer">
            <summary>
            A container class for reactions on a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.Message">
            <summary>
            The message these reactions are on.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.EagerTracking">
            <summary>
            If true, this will download reactions of a given emoji once added.
            </summary>
            <remarks>
            This <strong>will</strong> cause extensive network overhead and may result in rate limits occurring. <strong>It should <em>only</em> be enabled on messages sent <em>before bot initialization</em> that need their reactions tracked in detail.</strong> Messages sent post-init will be able to stay up to date on their own.
            </remarks>
        </member>
        <member name="F:EtiBotCore.DiscordObjects.Universal.ReactionContainer.DownloadedEmojis">
            <summary>
            Tracks emojis downloaded by the event container when <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.EagerTracking"/> is <see langword="true"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions">
            <summary>
            The reactions that have been added to this message in their raw form.<para/>
            These only store the actual emojis on the message and the amount of emojis that were added. This does not container member information (<em>who</em> added the emojis).
            </summary>
            <remarks>
            <strong>This may be more reliable than <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByEmoji"/> and <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByUser"/></strong>. This is because data sent by Discord does not always include the members associated with a reaction (unless explicitly requested).
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByEmoji">
            <summary>
            The reactions on this message indexed by the emoji that one or more users may have added. Each emoji corresponds to a list of the users that have reacted with that emoji.
            </summary>
            <remarks>
            <strong>This risks being out of sync from <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/>.</strong> Discord does not send <em>who</em> reacted by default, only what the reactions are and how many there are.
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByUser">
            <summary>
            The reactions on this message indexed by a user that has added one or more reactions. Each user corresponds to a list of the emojis they have reacted with.
            </summary>
            <remarks>
            <strong>This risks being out of sync from <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/>.</strong> Discord does not send <em>who</em> reacted by default, only what the reactions are and how many there are.
            </remarks>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.HasReactionFrom(EtiBotCore.DiscordObjects.Universal.User,EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Returns whether or not the given user has reacted to this message with the given emoji.
            </summary>
            <param name="user"></param>
            <param name="emoji"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.GetNumberOfReactions(EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Returns the amount of reactions on this message of the given emoji using <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/>.
            </summary>
            <param name="emoji"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.GetNumberOfUniqueReactions">
            <summary>
            Returns the amount of distinct reactions on this message using <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.GetNumberOfReactionsExcluding(EtiBotCore.DiscordObjects.Universal.Emoji,EtiBotCore.DiscordObjects.Universal.User[])">
            <summary>
            Returns the amount of reactions on this message of the given emoji, excluding reactions from the given users.
            </summary>
            <param name="emoji"></param>
            <param name="exclude">A list of users to exclude. If they have reacted with this emoji, it will not be counted.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.GetNumberOfReactionsFrom(EtiBotCore.DiscordObjects.Universal.Emoji,EtiBotCore.DiscordObjects.Universal.User[])">
            <summary>
            Returns the amount of reactions on this message of the given emoji, only counting reactions from the given users.
            </summary>
            <param name="emoji"></param>
            <param name="include">A list of users to include. Only these users will be searched for.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.AddReactionAsync(EtiBotCore.DiscordObjects.Universal.Emoji,System.String)">
            <summary>
            Adds a reaction to this message. Requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.AddReactions"/>.
            </summary>
            <param name="emoji">The emoji to add.</param>
            <param name="reason">Why was this reaction added?</param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot add reactions.</exception>
            <exception cref="T:System.ArgumentNullException">If emoji is null.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If the emoji or message was deleted.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RemoveReactionAsync(EtiBotCore.DiscordObjects.Universal.User,EtiBotCore.DiscordObjects.Universal.Emoji,System.String)">
            <summary>
            Removes the reaction made by the given user of the given emoji. Requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.ManageMessages"/>.
            </summary>
            <param name="user">The user that created the reaction we want to remove.</param>
            <param name="emoji">The emoji to remove.</param>
            <param name="reason">Why was this reaction removed?</param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot cannot manage messages, and this is not the bot's message.</exception>
            <exception cref="T:System.InvalidOperationException">If the bot attempts to remove a reaction added by another user in a DM.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If the message was deleted.</exception>
            <exception cref="T:System.ArgumentNullException">If either user or emoji are null.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RemoveReactionsOfEmojiAsync(EtiBotCore.DiscordObjects.Universal.Emoji,System.String,System.Boolean)">
            <summary>
            Removes all of the reactions of the given emoji. Requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.ManageMessages"/>
            </summary>
            <param name="emoji">The emoji to remove.</param>
            <param name="reason">Why were all reactions of this emoji removed?</param>
            <param name="performDeletionOnSuccess">If the request succeeded, this will manually set the reaction count for the given emoji to 0.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If the emoji is null</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the manage messages permission.</exception>
            <exception cref="T:System.NotSupportedException">If this is called in a DM.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If the message was deleted.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RemoveAllReactionsAsync(System.String,System.Boolean)">
            <summary>
            Removes every reaction from this message. Requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.ManageMessages"/>
            </summary>
            <returns></returns>
            <param name="reason">Why were all of the reactions removed?</param>
            <param name="performDeletionOnSuccess">If the request succeeded, this will manually set the reaction count to 0.</param>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">If the bot does not have the manage messages permission.</exception>
            <exception cref="T:System.NotSupportedException">If this is called in a DM.</exception>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">If the message was deleted.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.AreReactionsDesynchronized(EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Checks if the reactions for the given emoji might be desynchronized by looking at the amount of users in <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByEmoji"/> compared to the count for this emoji in <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/>.<para/>
            In short, this tests if <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/> and <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByEmoji"/> agree with eachother in terms of how many people reacted. This may not be perfect, but it should be a good enough gauge for typical usage.
            </summary>
            <param name="emoji">The emoji to check for desyncs.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.DownloadReactions(EtiBotCore.DiscordObjects.Universal.Emoji,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Downloads the reactions for the given emoji including user information, and populates <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByEmoji"/>, <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ReactionsByUser"/>, and <see cref="P:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RawReactions"/> with the data.<para/>
            This will test <see cref="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.AreReactionsDesynchronized(EtiBotCore.DiscordObjects.Universal.Emoji)"/> unless <paramref name="force"/> is <see langword="true"/>.<para/>
            By default, if the amount of downloaded reactors is less than or equal to the amount of users that are registered to have reacted right now, the list of reactors will be replaced with the downloaded list to ensure the list is as clean as possible. If the amount downloaded is less than the amount of registered reactors, the list will not be cleared (because that would throw out some reactors) unless <paramref name="clearAnyway"/> is <see langword="true"/>.
            </summary>
            <param name="emoji">The emoji to acquire.</param>
            <param name="users">The amount of users to acquire. Maximum 100.</param>
            <param name="force">If <see langword="true"/>, the reactions will be downloaded anyway.</param>
            <param name="clearAnyway">If <paramref name="users"/> is less than the amount of reactions stored right now, and if this is <see langword="true"/>, the registry will be <em>replaced</em> with the new downloaded list instead of merged. This will effectively discard a number of reactors, but guarantees the list is as clean as possible.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="emoji"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="users"/> is less than 0 or greater than 100.</exception>
            <exception cref="T:System.Exception">If the request fails and the reactions could not be downloaded.</exception>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.AddReactionFrom(EtiBotCore.DiscordObjects.Universal.User,EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Register the given user and reaction.
            </summary>
            <remarks>
            This does not send a network request, and is exclusively for internal storage.
            </remarks>
            <param name="user"></param>
            <param name="emoji"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RemoveReactionFrom(EtiBotCore.DiscordObjects.Universal.User,EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Unregister the given user and reaction. This will leave a potentially empty list behind rather than removing it from the dictionary.
            </summary>
            <remarks>
            This does not send a network request, and is exclusively for internal storage.
            </remarks>
            <param name="user"></param>
            <param name="emoji"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RemoveAllReactionsOf(EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Remove all of the reactions of the given emoji from the list.
            </summary>
            <remarks>
            This does not send a network request, and is exclusively for internal storage.
            </remarks>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.RemoveAll">
            <summary>
            Resets this <see cref="T:EtiBotCore.DiscordObjects.Universal.ReactionContainer"/> to an empty state.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.ShouldEagerDownload(EtiBotCore.DiscordObjects.Universal.Emoji)">
            <summary>
            Returns <see langword="true"/> if reactions have not been downloaded for this given emoji. Also sets the state of the download to true, but does NOT download them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.ReactionContainer.Clone(EtiBotCore.DiscordObjects.Guilds.ChannelData.Message)">
            <summary>
            Returns a deep-copy of this <see cref="T:EtiBotCore.DiscordObjects.Universal.ReactionContainer"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.Sticker">
            <summary>
            A sticker object in a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Sticker.Name">
            <summary>
            The name of this sticker.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.Sticker.Format">
            <summary>
            The format this sticker's file uses.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Sticker.GetOrCreate(EtiBotCore.Payloads.PayloadObjects.Sticker)">
            <summary>
            Returns a new instance of a sticker or returns an existing instance of a sticker for the given payload.
            </summary>
            <param name="plSticker">The sticker payload.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Sticker.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.Sticker.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.User">
            <summary>
            Represents a generic user, not in any particular server -- just the person themselves.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Mention">
            <summary>
            A mention to this user by ID. This string pings them if sent in a chat message.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.BotUser">
            <summary>
            A reference to the Discord user representing this bot.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.IsSelf">
            <summary>
            Whether or not the current user is equal to <see cref="P:EtiBotCore.DiscordObjects.Universal.User.BotUser"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.AvatarURL">
            <summary>
            The URL to this user's avatar, or their Discord-assigned default avatar if they don't have one set.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.AvatarHash">
            <summary>
            The has to this user's avatar, or <see langword="null"/> if they don't have done.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Discriminator">
            <summary>
            This user's discriminiator, which is the four digits after their username, e.g. <c>1760</c> in <c>Eti#1760</c>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Username">
            <summary>
            The user's username.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.FullName">
            <summary>
            This user's full name, which is their username#discriminator e.g. <c>Eti#1760</c>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.IsABot">
            <summary>
            Whether or not this user is a bot. To check if this user is <em>this</em> bot, use <see cref="P:EtiBotCore.DiscordObjects.Universal.User.IsSelf"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.IsDiscordSystem">
            <summary>
            Whether or not this user is a representation of Discord's System, which is used to relay incredibly important messages.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Locale">
            <summary>
            This user's locale.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Has2FA">
            <summary>
            Whether or not this user has enabled 2 factor authentication on their account.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Email">
            <summary>
            This user's email, or <see langword="null"/> if the bot cannot access this data.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.EmailVerified">
            <summary>
            Whether or not this user's email has been verified, or <see langword="null"/> if the bot cannot access this data.<para/>
            It is only possible to acquire this data through an application.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.NitroType">
            <summary>
            The type of Nitro subscription this user has.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.Flags">
            <summary>
            The attributes this user has.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.AccountCreationDate">
            <summary>
            The creation date of this user's Discord account (UTC+0) acquired from their <see cref="P:EtiBotCore.DiscordObjects.DiscordObject.ID"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.AccountAge">
            <summary>
            The age of this user's Discord account.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.User.VoiceState">
            <summary>
            The current status of this user in a voice channel. Always check <see cref="P:EtiBotCore.DiscordObjects.Universal.VoiceState.IsConnectedToVoice"/> before referencing other properties, which may be their <see langword="default"/>s if the user is not connected.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects.</strong>
            </remarks>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.TryCreateDMAsync">
            <summary>
            Attempts to create a DM channel with this user. Returns a <see cref="T:EtiBotCore.DiscordObjects.Base.DMChannel"/> if successful, and <see langword="null"/> if the user has DMs off.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.TrySendDMAsync(System.String,EtiBotCore.DiscordObjects.Universal.Embed)">
            <summary>
            Attempts to create a DM channel with this user, and if it is successful, sends the given message. Returns a <see cref="T:EtiBotCore.DiscordObjects.Guilds.ChannelData.Message"/> representing the sent message if successful, or <see langword="null"/> if the user could not be DMed.
            </summary>
            <param name="content"></param>
            <param name="embed"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.InServerAsync(EtiBotCore.DiscordObjects.Universal.Guild)">
            <summary>
            Returns this <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> as a <see cref="T:EtiBotCore.DiscordObjects.Guilds.Member"/> in a particular server. This may need to download the member, and will return <see langword="null"/> if the user is not in this server.
            </summary>
            <param name="server">The server to get this member from.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.#ctor(EtiBotCore.Payloads.PayloadObjects.User)">
            <summary>
            Construct a new user instance from the given payload. Always try <see cref="M:EtiBotCore.DiscordObjects.Universal.User.GetOrDownloadUserAsync(EtiBotCore.Data.Structs.Snowflake)"/> first. 
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.GetOrDownloadUserAsync(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Provides an existing User object, or downloads it if one with this ID has not already been created. Returns <see langword="null"/> if the ID is malformed or does not correspond to a user.
            </summary>
            <param name="id">The ID of this user.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.EventGetOrCreate(EtiBotCore.Payloads.PayloadObjects.User)">
            <summary>
            Creates a new <see cref="T:EtiBotCore.DiscordObjects.Universal.User"/> or gets an existing one by ID. This does not download the user like <see cref="M:EtiBotCore.DiscordObjects.Universal.User.GetOrDownloadUserAsync(EtiBotCore.Data.Structs.Snowflake)"/>
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.Update(EtiBotCore.Payloads.PayloadDataObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.SendChangesToDiscord(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.SetupSelfUser">
            <summary>
            Sets <see cref="P:EtiBotCore.DiscordObjects.Universal.User.BotUser"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.User.MemberwiseClone">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.DiscordObjects.Universal.VoiceState">
            <summary>
            Represents a user's status in a voice channel or DM call.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.IsDM">
            <summary>
            Whether or not this <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> exists in a DM. Checks <see cref="P:EtiBotCore.DiscordObjects.Universal.VoiceState.ServerID"/> == <see langword="null"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.IsConnectedToVoice">
            <summary>
            Whether or not the user this <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> corresponds to is connected to a voice channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.Channel">
            <summary>
            Returns the <see cref="T:EtiBotCore.DiscordObjects.Guilds.VoiceChannel"/> or <see cref="T:EtiBotCore.DiscordObjects.Base.DMChannel"/> that is currently connected to. May return <see langword="null"/> if the channels were not properly downloaded for whatever reason.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.User">
            <summary>
            The user that this state correlates to.
            </summary>
            <remarks>
            <strong>This reference is cloned in clone objects, and points to the old user that this old <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> belongs to.</strong>
            </remarks>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.ChannelID">
            <summary>
            The ID of the voice channel they are present in, or <see langword="null"/> if they are not connected to a channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.UserID">
            <summary>
            The ID of the user that this <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> corresponds to.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.ServerID">
            <summary>
            The ID of the server that this <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> corresponds to, or <see langword="null"/> if this is a DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.SessionID">
            <summary>
            The ID of this voice session.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.Deafened">
            <summary>
            Whether or not this user is deafened.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.Muted">
            <summary>
            Whether or not this user is muted.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.ServerDeafened">
            <summary>
            Whether or not this user is server deafened
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.ServerMuted">
            <summary>
            Whether or not this user is server muted.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.Streaming">
            <summary>
            Whether or not this user is streaming something to the channel, or <see langword="null"/> for DMs
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.WebcamOn">
            <summary>
            Whether or not this user has their webcam on.
            </summary>
        </member>
        <member name="P:EtiBotCore.DiscordObjects.Universal.VoiceState.Suppressed">
            <summary>
            Whether or not I have this member muted for me.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.VoiceState.GetStateFor(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the given user's voice state, or <see langword="null"/> if they do not have one.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.VoiceState.GetStateForOrCreate(EtiBotCore.Data.Structs.Snowflake)">
            <summary>
            Returns the given user's voice state, or returns a new + empty state if they don't have one.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.VoiceState.MemberwiseClone(EtiBotCore.DiscordObjects.Universal.User)">
            <summary>
            Creates a copy of this <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/>. All fields are new, except for <see cref="P:EtiBotCore.DiscordObjects.Universal.VoiceState.Channel"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.DiscordObjects.Universal.VoiceState.ToString">
            <summary>
            Organizes this <see cref="T:EtiBotCore.DiscordObjects.Universal.VoiceState"/> into a string for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Exceptions.InvalidBackupTypeException">
            <summary>
            An exception used when a <see cref="T:EtiBotCore.DiscordObjects.IBackup"/>'s type is not the same as the type of object passed into it.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.InvalidBackupTypeException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException">
            <summary>
            An exception that is thrown when a <see cref="T:EtiBotCore.Utility.Counting.BulkBudgetedValue"/> has its <see cref="M:EtiBotCore.Utility.Counting.BulkBudgetedValue.Spend"/> method called but also has its <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/> = 0
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.BudgetExceededException.#ctor">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException"/> with the generic message: <c>No more values are available!</c>
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.BudgetExceededException.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException"/> with a custom message.
            </summary>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException">
            <summary>
            An exception that is thrown if a property is edited too fast.<para/>
            This is applied to properties that send network requests that are sensitive to things like caching.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.EditingTooFastException.Interval">
            <summary>
            The time in milliseconds that must be delayed before this property can be edited again.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.EditingTooFastException.DelayTime">
            <summary>
            The time in millisconds that you must delay before attempting to retry this operation.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.EditingTooFastException.#ctor(System.Int32,System.Int64)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.Marshalling.EditingTooFastException"/> that relays that this property can only be edited once every <paramref name="intervalMilliseconds"/> milliseconds.
            </summary>
            <param name="intervalMilliseconds">The minimum amount of time that can be delayed between setting the associated property throwing this exception.</param>
            <param name="delayTime">The remaining time on the operation that needs to be delayed for until performing it gain.</param>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException">
            <summary>
            An exception thrown when something is attempted to be performed without a valid intent.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException.RequiredIntent">
            <summary>
            The <see cref="T:EtiBotCore.Payloads.Data.GatewayIntent"/> that is required to perform this operation.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.GatewayIntentNotEnabledException.#ctor(EtiBotCore.Payloads.Data.GatewayIntent)">
            <summary>
            An exception thrown when something is attempted to be performed without a valid intent.
            </summary>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.GuildFeatureNotAvailableException">
            <summary>
            Thrown if something is set on a guild and the guild does not have that feature available to it.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.GuildFeatureNotAvailableException.RequiredFeature">
            <summary>
            The feature that is required to use this.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.GuildFeatureNotAvailableException.#ctor(System.String,System.Object,System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.Marshalling.GuildFeatureNotAvailableException"/> from the given feature name, desired value, and property name (which will be automatically set)
            </summary>
            <param name="feature">The name of the feature e.g. COMMUNITY</param>
            <param name="value">The value that the user tried to set this to.</param>
            <param name="prop">The associated property name, which will be automatically populated, so don't set it.</param>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException">
            <summary>
            An exception for when the bot does not have the permissions necessary to do something.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.Message">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.HasCustomMessage">
            <summary>
            Whether or not <see cref="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.Message"/> is the stock <c>"Missing the necessary permissions required to perform this operation."</c>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.RequiredPermissions">
            <summary>
            The permissions required to perform the associated operation.<para/>
            This will be <see langword="null"/> if this was thrown due to a reason not tied to <see cref="T:EtiBotCore.Payloads.Data.Permissions"/>, and instead a reason will be provided in <see cref="P:System.Exception.Message"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.PermissionsAsString">
            <summary>
            A formatted <see cref="T:System.String"/> that highlights the required permissions.<para/>
            This will be <see langword="null"/> if this was thrown due to a reason not tied to <see cref="T:EtiBotCore.Payloads.Data.Permissions"/>, and instead a reason will be provided in <see cref="P:System.Exception.Message"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.#ctor(EtiBotCore.Payloads.Data.Permissions)">
            <summary>
            Constructs a new <see cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException"/> with a default message <c>Missing the permissions required to perform this operation.</c>
            </summary>
            <param name="requiredPerms"></param>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException"/> with the given message, and sets <see cref="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.RequiredPermissions"/> and <see cref="P:EtiBotCore.Exceptions.Marshalling.InsufficientPermissionException.PermissionsAsString"/> to <see langword="null"/>.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException">
            <summary>
            An exception that is thrown if a <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> is deleted and you attempt to edit it.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException.Origin">
            <summary>
            The <see cref="T:EtiBotCore.DiscordObjects.DiscordObject"/> that raised this exception.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException.#ctor(EtiBotCore.DiscordObjects.DiscordObject)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException"/> and set <see cref="P:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException.Origin"/> to the given object.
            </summary>
            <param name="source">The object that raised this exception</param>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException">
            <summary>
            Thrown when this object is temporarily unavailable for any reason. Contrary to <see cref="T:EtiBotCore.Exceptions.Marshalling.ObjectDeletedException"/>, this object may return to a state where this exception would no longer be thrown.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException.Object">
            <summary>
            The object that raised this exception.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException.#ctor(EtiBotCore.DiscordObjects.DiscordObject)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.ObjectUnavailableException.#ctor(EtiBotCore.DiscordObjects.DiscordObject,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">
            <summary>
            An exception raised when a property is locked and its <see langword="set"/> method is used.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.Marshalling.PropertyLockedException.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException"/> with the default message: <c>The NAME_HERE property is locked! Did you forget to call BeginChanges()</c>
            </summary>
            <param name="propName">The name of the property. By default, rather than being null, it is the name of the member that called the ctor.</param>
        </member>
        <member name="P:EtiBotCore.Exceptions.ValueNotAllowedException.LimitingFeature">
            <summary>
            The feature this guild has that is preventing the property from being set to the desired value.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.ValueNotAllowedException.#ctor(System.String,System.Object,System.String)">
            <summary>
            Throws this exception with a message: <c>$"The property {prop} cannot be set to {value} because this guild has the {limitingFeature} attribute/feature, which dictates that this value is not allowed."</c>
            </summary>
            <param name="limitingFeature"></param>
            <param name="value"></param>
            <param name="prop">Should not be manually set, this is calculated in runtime.</param>
        </member>
        <member name="T:EtiBotCore.Exceptions.ValueNotFoundException">
            <summary>
            Similar to <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, but is used in the KeyOf extension method.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.ValueNotFoundException.#ctor">
            <summary>
            Construct a <see cref="T:EtiBotCore.Exceptions.ValueNotFoundException"/> with a default message of <c>The given value was not present in the dictionary.</c>
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.ValueNotFoundException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:EtiBotCore.Exceptions.ValueNotFoundException"/> with the given message.
            </summary>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="T:EtiBotCore.Exceptions.WebSocketErroredException">
            <summary>
            An exception raised when the websocket errors.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.WebSocketErroredException.Code">
            <summary>
            The code of this error, or -1 if one was not provided when the exception was thrown.
            </summary>
        </member>
        <member name="P:EtiBotCore.Exceptions.WebSocketErroredException.Message">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Exceptions.WebSocketErroredException.#ctor">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.WebSocketErroredException"/> with a generic error message and code -1.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.WebSocketErroredException.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.WebSocketErroredException"/> with the given error message and code -1.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.WebSocketErroredException.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Exceptions.WebSocketErroredException"/> with the given error message and code.
            </summary>
        </member>
        <member name="M:EtiBotCore.Exceptions.WebSocketErroredException.#ctor(EtiBotCore.Payloads.Data.DiscordGatewayEventCode)">
            <summary>
            Creates a <see cref="T:EtiBotCore.Exceptions.WebSocketErroredException"/> from the given <see cref="T:EtiBotCore.Payloads.Data.DiscordGatewayEventCode"/>, which includes automatic error messages.
            </summary>
            <param name="errCode"></param>
        </member>
        <member name="M:EtiBotCore.Exceptions.WebSocketErroredException.Wrap(System.Net.WebSockets.WebSocketException)">
            <summary>
            Given a <see cref="T:System.Net.WebSockets.WebSocketException"/>, this will extract its code and construct a new <see cref="T:EtiBotCore.Exceptions.WebSocketErroredException"/>
            </summary>
            <param name="baseException"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Payloads.Commands.IdentifyCommand">
            <summary>
            The initialization payload / identify payload.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.Token">
            <summary>
            The bot's token. Required.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.Properties">
            <summary>
            The properties of this connection. Required.<para/>
            This is preset to an instance of <see cref="T:EtiBotCore.Payloads.PayloadObjects.IdentifyConnectionProperties"/> which you should edit.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.Compress">
            <summary>
            Whether or not this connection supports the compression of packets.<para/>
            <strong>Default:</strong> false
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.LargeThreshold">
            <summary>
            A value between 50 and 250, this is the total number of members that will be sent before the gateway stops sending offline members.<para/>
            <strong>Default:</strong> 50
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.Shard">
            <summary>
            Used for guild sharding.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.Presence">
            <summary>
            An optional presence to start the bot with.<para/>
            <strong>Default:</strong> <see langword="null"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.IdentifyCommand.Intents">
            <summary>
            The intents of this bot. <strong>This must be set, as its default value will result in an error.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.GuildID">
            <summary>
            The ID of the guild to get members from.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.Query">
            <summary>
            A string the username starts with, or an empty string to return all members.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.Limit">
            <summary>
            A limit for the amount of members to send when using <see cref="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.Query"/>. Max 100. When not using a query, this can be 0 to return all members.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.Presences">
            <summary>
            Used to also get the presences of users.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.Users">
            <summary>
            The list of users to get.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.RequestGuildMembersCommand.Nonce">
            <summary>
            A unique identifier you define right here that is given back in the chunk response.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Commands.ResumeCommand">
            <summary>
            Resumes a dropped gateway connection.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.ResumeCommand.Token">
            <summary>
            The bot's token.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.ResumeCommand.SessionID">
            <summary>
            The ID of the current session to resume.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.ResumeCommand.Sequence">
            <summary>
            The last received sequence number.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Commands.UpdateStatusCommand">
            <summary>
            Updates the client's presence.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateStatusCommand.Since">
            <summary>
            Unix time (in millisconds) since the client went idle, or null if the client is not idle.<para/>
            <strong>Default:</strong> <see langword="null"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateStatusCommand.Activities">
            <summary>
            An array of activities. If setting or getting a single activity is desired, consider using <see cref="T:EtiBotCore.Payloads.PayloadObjects.Activity"/><para/>
            <strong>Default:</strong> <see langword="null"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateStatusCommand.Status">
            <summary>
            The new online status of the bot.<para/>
            <strong>Default:</strong> <see cref="F:EtiBotCore.Payloads.Data.StatusType.Online"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateStatusCommand.AFK">
            <summary>
            Whether or not the client is AFK.
            <strong>Default:</strong> <see langword="null"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.Commands.UpdateStatusCommand.SetActivity(EtiBotCore.Payloads.PayloadObjects.Activity)">
            <summary>
            Sets <see cref="P:EtiBotCore.Payloads.Commands.UpdateStatusCommand.Activities"/> to a single-element array that consists of the provided <see cref="T:EtiBotCore.Payloads.PayloadObjects.Activity"/> object. If the object is <see langword="null"/>, then the array will be set to <see langword="null"/> instead.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Commands.UpdateVoiceStateCommand">
            <summary>
            Joins, moves, or disconnects the client from a voice channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateVoiceStateCommand.GuildID">
            <summary>
            The ID of the server that this voice state exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateVoiceStateCommand.ChannelID">
            <summary>
            The ID of the voice channel to move to, or <see langword="null"/> to disconnect.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateVoiceStateCommand.Mute">
            <summary>
            Whether or not to be muted.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Commands.UpdateVoiceStateCommand.Deafen">
            <summary>
            Whether or not to be deafened.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.ActivityFlags">
            <summary>
            Flags representing what can be done with an activity
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.None">
            <summary>
            This is a generic activity.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.Instance">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.Join">
            <summary>
            This activity can be joined freely.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.Spectate">
            <summary>
            You can spectate this activity.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.JoinRequest">
            <summary>
            You can request to join this activity.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.Sync">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityFlags.Play">
            <summary>
            You can launch the game from this activity.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.ActivityType">
            <summary>
            Represents an activity on Discord, which is used for user status.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityType.Playing">
            <summary>
            The activity type for Playing.<para/>
            <strong>Format:</strong> Playing {name}
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityType.Streaming">
            <summary>
            The activity type for Streaming. <strong>This is not usable by bots and cannot be implemented.</strong><para/>
            <strong>Format:</strong> Streaming {details}
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityType.Listening">
            <summary>
            The activity type for Listening.<para/>
            <strong>Format:</strong> Listening to {name}
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityType.Watching">
            <summary>
            The activity type for watching.<para/>
            <strong>Format:</strong> Watching {name}
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityType.Custom">
            <summary>
            A custom activity. <strong>This is not usable by bots and cannot be implemented.</strong><para/>
            <strong>Format:</strong> {emoji} {state}
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ActivityType.Competing">
            <summary>
            Activity type for competing.<para/>
            <strong>Format:</strong> Competing in {name}
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.AuditLogActionType">
            <summary>
            A type of action that the audit log records.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.GUILD_UPDATE">
            <summary>
            Someone edited the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_CREATE">
            <summary>
            Someone created a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_UPDATE">
            <summary>
            Someone edited a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_DELETE">
            <summary>
            Someone deleted a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE">
            <summary>
            Someone added new permission information to a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_UPDATE">
            <summary>
            Someone changed permissions for someone.something on a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_DELETE">
            <summary>
            Someone removed permission information from a channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_KICK">
            <summary>
            Someone kicked a member.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_PRUNE">
            <summary>
            Someoen pruned members.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_BAN_ADD">
            <summary>
            Someone got banned.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_BAN_REMOVE">
            <summary>
            Someone got pardoned.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_UPDATE">
            <summary>
            Someone edited someone else's nickname
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_ROLE_UPDATE">
            <summary>
            Someone edited someone else's roles.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_MOVE">
            <summary>
            Someone moved someone out of a voice channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_DISCONNECT">
            <summary>
            Someone disconnected someone from a voice channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.BOT_ADD">
            <summary>
            Someone added a bot to the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.ROLE_CREATE">
            <summary>
            Someone created a new role.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.ROLE_UPDATE">
            <summary>
            Someone updated a role.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.ROLE_DELETE">
            <summary>
            Someone deleted a role.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.INVITE_CREATE">
            <summary>
            Someone made a new instant invite.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.INVITE_UPDATE">
            <summary>
            Someone changed the settings of an instant invite.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.INVITE_DELETE">
            <summary>
            Someone removed an instant invite.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.WEBHOOK_CREATE">
            <summary>
            Someone added a new webhook to the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.WEBHOOK_UPDATE">
            <summary>
            Someone changed information about a webhook on the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.WEBHOOK_DELETE">
            <summary>
            Someone deleted a webhook from the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.EMOJI_CREATE">
            <summary>
            Someone added a new emoji.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.EMOJI_UPDATE">
            <summary>
            Someone changed an emoji's name.
            </summary>
            <remarks>
            As of writing, the only editable component is the name. You can probably tell this is for general emoji changes.
            </remarks>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.EMOJI_DELETE">
            <summary>
            Someone deleted an emoji.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_DELETE">
            <summary>
            Someone deleted a message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_BULK_DELETE">
            <summary>
            Someone deleted a lotta messages.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_PIN">
            <summary>
            Someone pinned a message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_UNPIN">
            <summary>
            Someone unpinned a message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.INTEGRATION_CREATE">
            <summary>
            Someone added a new integration to the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.INTEGRATION_UPDATE">
            <summary>
            Someone changed an integration on the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.INTEGRATION_DELETE">
            <summary>
            Someone removed an integration from the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.STAGE_INSTANCE_CREATE">
            <summary>
            Someone created a stage.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.STAGE_INSTANCE_UPDATE">
            <summary>
            Someone modified a stage.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.STAGE_INSTANCE_DELETE">
            <summary>
            Someone deleted a stage.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.STICKER_CREATE">
            <summary>
            Someone added a sticker to the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.STICKER_UPDATE">
            <summary>
            Someone updated a sticker on the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.STICKER_DELETE">
            <summary>
            Someone deleted a sticker from the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.THREAD_CREATE">
            <summary>
            Someone created a thread channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.THREAD_UPDATE">
            <summary>
            Someone updated a thread channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.AuditLogActionType.THREAD_DELETE">
            <summary>
            Someone deleted a thread channel.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.ChannelType">
            <summary>
            Represents a type of Discord Channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.Text">
            <summary>
            A generic text channel in a server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.DM">
            <summary>
            A DM channel with this bot.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.Voice">
            <summary>
            A voice channel in a server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.GroupDM">
            <summary>
            A group DM including this bot.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.Category">
            <summary>
            A channel category.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.News">
            <summary>
            A news channel, which is a channel that can be followed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.Store">
            <summary>
            A store channel, which developers can use to sell their game.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.NewsThread">
            <summary>
            A thread that is part of a news channel (a child of a channel of type <see cref="F:EtiBotCore.Payloads.Data.ChannelType.News"/>)
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.PublicThread">
            <summary>
            A publicly-accessible thread that is part of a text channel (a child of a channel of type <see cref="F:EtiBotCore.Payloads.Data.ChannelType.Text"/>)
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.PrivateThread">
            <summary>
            A privately-accessible thread that is part of a text channel (a child of a channel of type <see cref="F:EtiBotCore.Payloads.Data.ChannelType.Text"/>)
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ChannelType.StageVoice">
            <summary>
            A stage channel for hosting large events.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.DiscordGatewayEventCode">
            <summary>
            A gateway code sent by Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.UnknownError">
            <summary>
            Shit hit the fan and Discord has no idea what happened. Try again lol.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.UnknownOpcode">
            <summary>
            YE FOCKED UP. Invalid <see cref="T:EtiBotCore.Payloads.Data.PayloadOpcode"/>!
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.DecodeError">
            <summary>
            YE FOCKED UP. Bullshittin on json encoding or message length.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.NotAuthenticated">
            <summary>
            You sent a payload before identifying.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.AuthenticationFailed">
            <summary>
            The token with your identify payload was incorrect.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.AlreadyAuthenticated">
            <summary>
            YE FOCKED UP. You sent two or more identify payloads.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.SessionNoLongerValid">
            <summary>
            <strong>Voice Only.</strong> This session is no longer valid.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.InvalidResumeSequence">
            <summary>
            The sequence number given with a resume was not correct.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.RateLimited">
            <summary>
            Bro holy shit lol slow down
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.TimedOut">
            <summary>
            You know how you try talking to an old guy and he just kinda zones out? You just did that to Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.InvalidShard">
            <summary>
            The shard sent when identifying was malformed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.ShardingIsRequiredOrServerNotFound">
            <summary>
            This bot would have handled far too many servers, and so you will need to shard your bot before you can identify.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.InvalidAPIVersionOrUnknownProtocol">
            <summary>
            The version of your API is invalid.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.InvalidIntent">
            <summary>
            The intent was invalid.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.NotAuthorizedToUseIntentOrVoiceDisconnected">
            <summary>
            An intent you're implementing is one you are not authorized to use. Did you remember to enable it in the bot's dashboard? Are you verified + allowed to use it?
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.VoiceServerCrashed">
            <summary>
            <strong>Voice Only.</strong> The server crashed. Our bad! Try resuming.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.DiscordGatewayEventCode.UnknownEncryptionMode">
            <summary>
            <strong>Voice Only.</strong> Your encryption mode was not recognized.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.EmbedType">
            <summary>
            Represents a type of embed.<para/>
            <strong>Note:</strong> These are deprecated by Discord but must be implemented for API compliance.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.EmbedType.Rich">
            <summary>
            Generic embed rendered via its attributes.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.EmbedType.Image">
            <summary>
            An image embed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.EmbedType.Video">
            <summary>
            A video embed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.EmbedType.GifAsVideo">
            <summary>
            A gif embed, rendered as a video.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.EmbedType.Article">
            <summary>
            An article from a website.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.EmbedType.Link">
            <summary>
            A link
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.ExplicitContentFilterLevel">
            <summary>
            The behavior of the explicit content filter.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ExplicitContentFilterLevel.Disabled">
            <summary>
            The explicit content filter is disabled.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ExplicitContentFilterLevel.MembersWithoutRoles">
            <summary>
            Only members without roles will be subjected to the content filter.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.ExplicitContentFilterLevel.AllMembers">
            <summary>
            All members are subject to the content filter.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.GatewayIntent">
            <summary>
            Represents a gateway intent, which describes what data the bot wants to receive.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.NULL">
            <summary>
            An invalid gateway intent. Attempting to send this will result in a response of 4013 / INVALID PAYLOAD.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.ALL">
            <summary>
            All intents packaged into a single value.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.ALL_PRIVILEGED_INTENTS">
            <summary>
            All intents that are privileged and must be enabled in the bot's configuration.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.ALL_DM_EVENTS">
            <summary>
            All DM-related events.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.ALL_STANDARD_GUILD_EVENTS">
            <summary>
            All guild-related events that are not privileged.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.ALL_GUILD_EVENTS">
            <summary>
            All guild-related events, including privileged events. Use <see cref="F:EtiBotCore.Payloads.Data.GatewayIntent.ALL_STANDARD_GUILD_EVENTS"/> to exclude privileged events.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.DEFAULT">
            <summary>
            The bot intends to receive no special data.<para/>
            As a result, the bot will only process the events that Discord sends by default (which are not locked behind any intents):
            <list type="bullet">
            <item>READY</item>
            <item>RESUMED</item>
            <item>VOICE_SERVER_UPDATE</item>
            <item>USER_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILDS">
            <summary>
            The bot intends to listen to or send events for core guild events. Included events are:
            <list type="bullet">
            <item>GUILD_CREATE</item>
            <item>GUILD_UPDATE</item>
            <item>GUILD_DELETE</item>
            <item>GUILD_ROLE_CREATE</item>
            <item>GUILD_ROLE_UPDATE</item>
            <item>GUILD_ROLE_DELETE</item>
            <item>CHANNEL_CREATE</item>
            <item>CHANNEL_UPDATE</item>
            <item>CHANNEL_DELETE</item>
            <item>CHANNEL_PINS_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MEMBERS">
            <summary>
            The bot intends to listen to or send events for guild membership events.<para/>
            <strong>This is a privileged event and must be explicitly enabled in the bot's control panel.</strong><para/>
            Included events are:
            <list type="bullet">
            <item>GUILD_MEMBER_ADD</item>
            <item>GUILD_MEMBER_UPDATE</item>
            <item>GUILD_MEMBER_REMOVE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_BANS">
            <summary>
            The bot intends to listen to or send events for guild ban events. Included events are:
            <list type="bullet">
            <item>GUILD_BAN_ADD</item>
            <item>GUILD_BAN_REMOVE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_EMOJIS">
            <summary>
            The bot intends to listen to or send events for guild emoji events. Included events are:
            <list type="bullet">
            <item>GUILD_EMOJIS_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_INTEGRATIONS">
            <summary>
            The bot intends to listen to or send events for guild integration events. Included events are:
            <list type="bullet">
            <item>GUILD_INTEGRATIONS_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_WEBHOOKS">
            <summary>
            The bot intends to listen to or send events for guild webhook events. Included events are:
            <list type="bullet">
            <item>WEBHOOKS_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_INVITES">
            <summary>
            The bot intends to listen to or send events for guild invite events. Included events are:
            <list type="bullet">
            <item>INVITE_CREATE</item>
            <item>INVITE_DELETE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_VOICE_STATES">
            <summary>
            The bot intends to listen to or send events for guild voice state events. Included events are:
            <list type="bullet">
            <item>VOICE_STATE_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_PRESENCES">
            <summary>
            The bot intends to listen to or send events for presence updates.<para/>
            <strong>This is a privileged event and must be explicitly enabled in the bot's control panel.</strong><para/>
            Included events are:
            <list type="bullet">
            <item>PRESENCE_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MESSAGES">
            <summary>
            The bot intends to listen to or send events for <strong>guild messages</strong>. Included events are:
            <list type="bullet">
            <item>MESSAGE_CREATE</item>
            <item>MESSAGE_UPDATE</item>
            <item>MESSAGE_DELETE</item>
            <item>MESSAGE_DELETE_BULK</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MESSAGE_REACTIONS">
            <summary>
            The bot intends to listen to or send events for reactions on <strong>guild messages</strong>. Included events are:
            <list type="bullet">
            <item>MESSAGE_REACTION_ADD</item>
            <item>MESSAGE_REACTION_REMOVE</item>
            <item>MESSAGE_REACTION_REMOVE_ALL</item>
            <item>MESSAGE_REACTION_REMOVE_EMOJI</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.GUILD_MESSAGE_TYPING">
            <summary>
            The bot intends to listen to or send events for starting to type in <strong>guild channels</strong>. Included events are:
            <list type="bullet">
            <item>TYPING_START</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGES">
            <summary>
            The bot intends to send and receive <strong>direct messages</strong>. Included events are:
            <list type="bullet">
            <item>MESSAGE_CREATE</item>
            <item>MESSAGE_UPDATE</item>
            <item>MESSAGE_DELETE</item>
            <item>MESSAGE_PINS_UPDATE</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGE_REACTIONS">
            <summary>
            The bot intends to listen to or send events for reactions on <strong>direct messages</strong>. Included events are:
            <list type="bullet">
            <item>MESSAGE_REACTION_ADD</item>
            <item>MESSAGE_REACTION_REMOVE</item>
            <item>MESSAGE_REACTION_REMOVE_ALL</item>
            <item>MESSAGE_REACTION_REMOVE_EMOJI</item>
            </list>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GatewayIntent.DIRECT_MESSAGE_TYPING">
            <summary>
            The bot intends to listen to or send events for starting to type in <strong>direct message</strong> channels. Included events are:
            <list type="bullet">
            <item>TYPING_START</item>
            </list>
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.GuildFeatures">
            <summary>
            Features a guild might have available to it.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.INVITE_SPLASH">
            <summary>
            This server can set an invite splash.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.VIP_REGIONS">
            <summary>
            This server can set its voice bitrate to 384kbps (name is misleading)
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.VANITY_URL">
            <summary>
            The server can use a vanity URL.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.VERIFIED">
            <summary>
            The server is verified.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.PARTNERED">
            <summary>
            The server is partnered.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.COMMUNITY">
            <summary>
            This server is a community server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.COMMERCE">
            <summary>
            This server has access to commerce features, such as creating shop channels.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.NEWS">
            <summary>
            This server can create news channels.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.DISCOVERABLE">
            <summary>
            This server is on the discovery directory.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.FEATURABLE">
            <summary>
            This server can be featured in the discovery directory.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.ANIMATED_ICON">
            <summary>
            This server can have an animated icon.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.BANNER">
            <summary>
            This server can have a banner image.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildFeatures.WELCOME_SCREEN_ENABLED">
            <summary>
            This server can add a welcome screen.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.GuildNotificationLevel">
            <summary>
            What messages warrant sending a notification to members.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildNotificationLevel.AllMessages">
            <summary>
            All sent messages will result in a notification.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.GuildNotificationLevel.OnlyMentions">
            <summary>
            Only when a user is pinged will they have a notification.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.MessageActivityType">
            <summary>
            A type of activity for a message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageActivityType.Join">
            <summary>
            I will join the content associated with this message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageActivityType.Spectate">
            <summary>
            I will spectate the content associated with this message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageActivityType.Listen">
            <summary>
            I will listen to the content associated with this message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageActivityType.JoinRequest">
            <summary>
            I want to join the content associated with this message.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.MessageFlags">
            <summary>
            Information about a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Message"/>
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageFlags.None">
            <summary>
            No associated information.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageFlags.HasBeenCrossposted">
            <summary>
            This message has been crossposted to another channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageFlags.IsCrosspost">
            <summary>
            This message is a crosspost from another channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageFlags.SuppressesEmbeds">
            <summary>
            This message suppresses embed objects.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageFlags.SourceDeleted">
            <summary>
            The original message of this crosspost has been deleted.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageFlags.Urgent">
            <summary>
            This is an urgent system message.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.MessageType">
            <summary>
            Represents the type of message that something is.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.Default">
            <summary>
            This is a standard message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.RecipientAdded">
            <summary>
            A recipient was added to this DM.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.RecipientRemoved">
            <summary>
            A recipient was removed from this DM.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.Call">
            <summary>
            A call has started in this DM.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.ChannelNameChange">
            <summary>
            The name of the DM group has been changed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.ChannelIconChange">
            <summary>
            The icon of the DM group has been changed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.ChannelPinnedMessage">
            <summary>
            A message has been pinned.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.GuildMemberJoined">
            <summary>
            A member joined the guild.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.UserBoosted">
            <summary>
            A member boosted the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.UserBoostedT1">
            <summary>
            A member boosted the server to T1.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.UserBoostedT2">
            <summary>
            A member boosted the server to T2.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.UserBoostedT3">
            <summary>
            A member boosted the server to T3.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.ChannelFollowAdded">
            <summary>
            A channel was followed into this one, and so any published messages from said channel will be reposted here.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.GuildDiscoveryDisqualified">
            <summary>
            A notification mentioning that this guild has been disqualified from discovery.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.GuildDiscoveryRequalified">
            <summary>
            A notification mentioning that this guild now qualifies for discovery.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.Reply">
            <summary>
            This message is a reply to someone else's message.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.ApplicationCommand">
            <summary>
            This message is an application command e.g. /pootis as a custom command.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.ThreadStarterMessage">
            <summary>
            This message is the starting message for a thread, which the creator of a thread is prompted for when creating the thread. It doubles
            as the thread's effective "topic" in a manner akin to a channel topic.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MessageType.GuildInviteReminder">
            <summary>
            The specifics of this are unknown.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.MFALevel">
            <summary>
            The multi-factor authentication level of a server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MFALevel.Normal">
            <summary>
            This server does not require users to have 2FA enabled.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.MFALevel.Elevated">
            <summary>
            This server's users must have 2FA enabled.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.PayloadOpcode">
            <summary>
            An opcode for a payload to or from Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.NULL">
            <summary>
            A faulty <see cref="T:EtiBotCore.Payloads.Data.PayloadOpcode"/> that will never be sent by Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Dispatch">
            <summary>
            An event was dispatched.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Heartbeat">
            <summary>
            Fired periodically by the client to keep the connection alive.
            <para/>
            <strong>This operation is:</strong> Sent &amp; Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.SelectProtocol">
            <summary>
            <strong>This operation is only used in voice connections.</strong><para/>
            Select the protocol used to connect to voice.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Identify">
            <summary>
            Starts a new session during the initial handshake.
            <para/>
            <strong>This operation is:</strong> Sent
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.PresenceUpdate">
            <summary>
            Update the client's presence.
            <para/>
            <strong>This operation is:</strong> Sent
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceHeartbeat">
            <summary>
            <strong>This operation is only used in voice connections.</strong><para/>
            A voice heartbeat.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceStateUpdate">
            <summary>
            Used to join/leave or move between voice channels.
            <para/>
            <strong>This operation is:</strong> Sent
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Speaking">
            <summary>
            <strong>Only used in voice connections.</strong> This payload contains information about speaking.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Resume">
            <summary>
            Resume a previous session that was disconnected.
            <para/>
            <strong>This operation is:</strong> Sent
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceHeartbeatAcknowledged">
            <summary>
            <strong>Only used in voice connections.</strong> This is the opcode for an acknowledged heartbeat.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Reconnect">
            <summary>
            You should attempt to reconnect and resume immediately.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceResume">
            <summary>
            <strong>Only used in voice connections.</strong> You are attempting to resume an existing voice connection that has failed.
            <para/>
            <strong>This operation is:</strong> Sent
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.RequestGuildMembers">
            <summary>
            Request information about offline guild members in a large guild.
            <para/>
            <strong>This operation is:</strong> Sent
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceHello">
            <summary>
            <strong>Only used in voice connections.</strong> Equivalent to <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.Hello"/> for voice connections.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.InvalidSession">
            <summary>
            The session has been invalidated. You should reconnect and identify/resume accordingly.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceResumed">
            <summary>
            <strong>Only used in voice connections.</strong> The successful response to <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.VoiceResume"/>.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.Hello">
            <summary>
            Sent immediately after connecting, contains the heartbeat_interval to use.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PayloadOpcode.HeartbeatAcknowledged">
            <summary>
            Sent in response to receiving a heartbeat to acknowledge that it has been received.
            <para/>
            <strong>This operation is:</strong> Received
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.PermissionOverwriteTargetType">
            <summary>
            A type of permission overwrite target in a channel's permission settings, either role or user.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionOverwriteTargetType.Role">
            <summary>
            This permission overwrite targets a role.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionOverwriteTargetType.User">
            <summary>
            This permission overwrite targets a user.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.Permissions">
            <summary>
            Represents permissions for a user or role.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.All">
            <summary>
            Every single permission.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.None">
            <summary>
            No permissions available.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.CreateInstantInvite">
            <summary>
            The creation of instant invites.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.KickMembers">
            <summary>
            The ability to kick members from the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.BanMembers">
            <summary>
            The ability to ban members from the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.Administrator">
            <summary>
            Full administrative permissions, which bypasses all other permissions.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageChannels">
            <summary>
            Alter the information, placement, and permissions of channels.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageGuild">
            <summary>
            Alter the information on the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.AddReactions">
            <summary>
            Add reactions to messages. 
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ViewAuditLog">
            <summary>
            View the server's audit log.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.PrioritySpeaker">
            <summary>
            Use Priority Speaker mode in voice chats.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.Stream">
            <summary>
            Stream and use video in voice chats.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ViewChannel">
            <summary>
            View this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.SendMessages">
            <summary>
            Send messages in this channel.<para/>
            <strong>Note:</strong> For threads, if the user is a member of a thread, then they can chat in that thread even if this permission is false,
            granted they have the appropriate thread permission (<see cref="F:EtiBotCore.Payloads.Data.Permissions.UsePublicThreads"/> or <see cref="F:EtiBotCore.Payloads.Data.Permissions.UsePrivateThreads"/>, depending on what
            type of thread it is).
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.SendTTSMessages">
            <summary>
            Send TTS messages in this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageMessages">
            <summary>
            Delete or pin messages in this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.EmbedLinks">
            <summary>
            Embed links in this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.AttachFiles">
            <summary>
            Send files in this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ReadMessageHistory">
            <summary>
            View messages in a channel that were sent prior to login / viewing the channel
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.MentionEveryone">
            <summary>
            Mention @everyone and @here
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.UseExternalEmojis">
            <summary>
            Use emojis from other servers.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ViewGuildInsights">
            <summary>
            View guild insights, which is stats abotu the server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ConnectVoice">
            <summary>
            Connect to this voice channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.Speak">
            <summary>
            Speak in this voice channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.MuteMembers">
            <summary>
            Server mute people in voice channels.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.DeafenMembers">
            <summary>
            Server deafen people in voice channels.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.MoveMembers">
            <summary>
            Move members to other voice channels, or disconnect them.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.UseVAD">
            <summary>
            Use voice activity in voice channels.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ChangeNickname">
            <summary>
            Change their own nickname.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageNicknames">
            <summary>
            Change the nicknames of other people.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageRoles">
            <summary>
            Manage the roles both they and other people have.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageWebhooks">
            <summary>
            Manage webhooks on this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageEmojisAndStickers">
            <summary>
            Manage the emojis and stickers in this server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.UseSlashCommands">
            <summary>
            Use slash commands in this channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.RequestToSpeak">
            <summary>
            Request to speak in this stage channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.ManageThreads">
            <summary>
            Delete and archive threads, and automatically view private threads.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.UsePublicThreads">
            <summary>
            Create and participate in public threads.<para/>
            <strong>Note:</strong> Creating threads also requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.SendMessages"/>. See <see cref="F:EtiBotCore.Payloads.Data.Permissions.SendMessages"/> for more information on how threads may bypass the permission.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.UsePrivateThreads">
            <summary>
            Create and participate in private threads.<para/>
            <strong>Note:</strong> Creating threads also requires <see cref="F:EtiBotCore.Payloads.Data.Permissions.SendMessages"/>. See <see cref="F:EtiBotCore.Payloads.Data.Permissions.SendMessages"/> for more information on how threads may bypass the permission.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.Permissions.UseExternalStickers">
            <summary>
            Use custom stickers from other servers.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.PermissionState">
            <summary>
            The state of a permission.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionState.Allow">
            <summary>
            When configuring permissions, this means it is on.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionState.On">
            <summary>
            An alternative name for mnemonic purposes in role permissions.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionState.Inherit">
            <summary>
            When configuring permissions, this means that it will inherit the value within the associated role.<para/>
            Alternatively, if this applies to a user, it will inherit the total permissions of the user (whatever their top role sets).<para/>
            It is important to note that permissions are calculated via a <strong>bit-wise OR</strong>. In Layman's terms, in your role configuration menu (the one for the entire server), once it's on, it will *stay* on for all higher roles (of course, this is based on what roles someone actually has, not what roles exist). For example, if I have a role called "Member" that allows viewing channels, and above it a role called "Muted" that has the little switch turned off, if someone has both of those roles, they will still be able to see channels because Member turned it on, and once it's on, it stays on. The only way to overwrite this is to change channel permissions.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionState.Deny">
            <summary>
            When configuring permissions, this means it is off.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PermissionState.Off">
            <summary>
            An alternative name for mnemonic purposes in role permissions, as turning off a permission for roles does not necessarily deny it - if a different role turns it on and a user has both roles, then it will be on.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.PremiumTier">
            <summary>
            Nitro boost tiers for servers.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumTier.None">
            <summary>
            This server is not boosted.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumTier.Tier1">
            <summary>
            This server has achieved tier 1 rewards.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumTier.Tier2">
            <summary>
            This server has achieved tier 2 rewards.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumTier.Tier3">
            <summary>
            This server has achieved tier 3 rewards.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.PremiumType">
            <summary>
            The type of premium (nitro) on a User's account.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumType.None">
            <summary>
            This user does not have a Nitro subscription.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumType.NitroClassic">
            <summary>
            The user has Nitro Classic.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.PremiumType.Nitro">
            <summary>
            This user has full Nitro.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.StatusType">
            <summary>
            Represents a presence status, e.g. online, away, etc.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StatusType.Online">
            <summary>
            The user is online right now.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StatusType.DoNotDisturb">
            <summary>
            The user is online, but has Do Not Disturb enabled.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StatusType.Idle">
            <summary>
            The user is online, but away from their device.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StatusType.Invisible">
            <summary>
            The user is online, but appears to be offline.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StatusType.Offline">
            <summary>
            The user is offline.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.StickerFormatType">
            <summary>
            Represents the formats used for stickers.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StickerFormatType.PNG">
            <summary>
            This sticker is a PNG file.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StickerFormatType.APNG">
            <summary>
            This sticker is an Animated PNG file.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.StickerFormatType.LOTTIE">
            <summary>
            Your guess is as good as mine.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.SystemChannelFlags">
            <summary>
            The settings for a server's system channel, if applicable.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.SystemChannelFlags.SuppressNone">
            <summary>
            Nothing is suppressed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.SystemChannelFlags.SuppressJoinNotifications">
            <summary>
            Join notifications will not be sent in the system channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.SystemChannelFlags.SuppressPremiumSubscriptions">
            <summary>
            Nitro boost notifications will not be sent in the system channel.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.UserFlags">
            <summary>
            Flags associated with a Discord user.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.None">
            <summary>
            This user has no flags.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.DiscordEmployee">
            <summary>
            This user is an employee of Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.PartneredServerOwner">
            <summary>
            This user owns a partnered server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.HypeSquadEvents">
            <summary>
            This user was present at a HypeSquad event.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.BugHunterL1">
            <summary>
            This user is a Level 1 Bug Hunter
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.HypesquadHouseBravery">
            <summary>
            This user is in the Bravery House of HypeSquad.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.HypesquadHouseBrilliance">
            <summary>
            This user is in the Brilliance House of HypeSquad.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.HypesquadHouseBalance">
            <summary>
            This user is in the Balance House of HypeSquad.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.EarlySupporter">
            <summary>
            This user purchased Discord Nitro when it first launched and had only one available tier for $5.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.TeamUser">
            <summary>
            This is a developer team, which is registered as a type of user.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.System">
            <summary>
            This is Discord's system.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.BugHunterL2">
            <summary>
            This user is a Level 2 Bug Hunter
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.VerifiedBot">
            <summary>
            This user is a bot, and they are a verified bot too.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.UserFlags.EarlyVerifiedBotDev">
            <summary>
            This user was one of the people who were among the first to register a verified bot.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.VerificationLevel">
            <summary>
            The verification level of a server.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.VerificationLevel.None">
            <summary>
            The server is unrestricted.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.VerificationLevel.Low">
            <summary>
            Users that join must have a verified email.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.VerificationLevel.Medium">
            <summary>
            Users that join must be members of Discord for longer than 5 minutes.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.VerificationLevel.High">
            <summary>
            Users that join must be a member of the server for 10 minutes before they can do anything.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.VerificationLevel.VeryHigh">
            <summary>
            The user must have a verified phone number.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Data.WebhookType">
            <summary>
            The purpose, type, or function of a webhook.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.WebhookType.Incoming">
            <summary>
            This webhook is a general purpose incoming webhook that can post messages to a channel with a generated token.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.Data.WebhookType.ChannelFollower">
            <summary>
            This is an internal webhook type used when following a channel, and is used to actually post the message in a different server.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.IEvent">
            <summary>
            An empty interface that signifies this class is an event that can be received from Discord. This is also used to register it in <see cref="T:EtiBotCore.Data.PayloadEventRegistry"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.Events.IEvent.GetEventName">
            <summary>
            Returns the event name associated with this <see cref="T:EtiBotCore.Payloads.Events.IEvent"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.Events.IEvent.Execute(EtiBotCore.Client.DiscordClient)">
            <summary>
            Executes any code that this event should perform.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.IgnoreEventAttribute">
            <summary>
            This event derives from another and should not be registered as it shares an ID and usage context.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.Events.IgnoreEventAttribute.#ctor">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Payloads.Events.IgnoreEventAttribute"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildBans.GuildBanAddEvent">
            <summary>
            Fired when a member is banned from a guild.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildBans.GuildBanRemoveEvent">
            <summary>
            Fired when a member is unbanned from a guild.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildBans.GuildGenericBanEvent">
            <summary>
            Since both the ban add and remove events share a structure, this provides the structure to both of them.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildBans.GuildGenericBanEvent.GuildID">
            <summary>
            The ID of the server that this ban or pardon occurred in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildBans.GuildGenericBanEvent.User">
            <summary>
            The user that was affected.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildEmojis.GuildEmojisUpdateEvent">
            <summary>
            Fired when the emojis in a guild are changed, either added, removed, or renamed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildEmojis.GuildEmojisUpdateEvent.GuildID">
            <summary>
            The ID of the server that this emoji change occurred in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildEmojis.GuildEmojisUpdateEvent.Emojis">
            <summary>
            The emojis in this server.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildIntegrations.GuildIntegrationsUpdateEvent">
            <summary>
            Fires when a guild integration is added, removed, or changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildIntegrations.GuildIntegrationsUpdateEvent.GuildID">
            <summary>
            The ID of the server that this change occurred in.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent">
            <summary>
            Fires when a guild invite is created.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.CreatedAt">
            <summary>
            When this invite was created.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.Inviter">
            <summary>
            The user who created the invite.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.MaxAge">
            <summary>
            The time that the invite is valid for in seconds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.MaxUses">
            <summary>
            The maximum amount of times the invite can be used.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.TargetUser">
            <summary>
            The user this invite was sent to (partial), or <see langword="null"/> if this invite was not created for someone in specific.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.TargetUserType">
            <summary>
            The target user type, or <see langword="null"/> if <see cref="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.TargetUser"/> is <see langword="null"/>.<para/>
            Right now, the only user type is 1.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.Temporary">
            <summary>
            Whether or not this invite grants a temporary membership - If the user logs off and has no roles, they will be removed from the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteCreateEvent.Uses">
            <summary>
            The amount of times this invite has been used.<para/>
            <strong>This is always 0.</strong>
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteDeleteEvent">
            <summary>
            Fired when an invite is deleted from a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteDeleteEvent.ChannelID">
            <summary>
            The channel that the invite leads to, or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteDeleteEvent.GuildID">
            <summary>
            The server that the invite leads to, or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildInvites.InviteDeleteEvent.InviteCode">
            <summary>
            The unique code of the invite.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberAddEvent">
            <summary>
            Fired when someone joins a guild. Identical to a standard <see cref="T:EtiBotCore.Payloads.PayloadObjects.Member"/> but with an extra field, <see cref="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberAddEvent.GuildID"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberAddEvent.GuildID">
            <summary>
            The ID of the server that this member was added to.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberRemoveEvent">
            <summary>
            Fired when a member leaves a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberRemoveEvent.GuildID">
            <summary>
            The ID of the server that this member was removed from.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberRemoveEvent.User">
            <summary>
            The user that was removed.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent">
            <summary>
            Fired when a member changes in a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent.GuildID">
            <summary>
            The ID of the server that this change occurred in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent.Roles">
            <summary>
            The IDs of the roles this user now has.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent.User">
            <summary>
            The user that was changed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent.Nickname">
            <summary>
            The user's nickname, or <see langword="null"/> if they don't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent.JoinedAt">
            <summary>
            When this user joined the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMembers.GuildMemberUpdateEvent.PremiumSince">
            <summary>
            When this user started boosting the server, or <see langword="null"/> if they are not boosting it.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildMessageTyping.TypingStartEvent">
            <summary>
            Fires when typing starts in a channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMessageTyping.TypingStartEvent.ChannelID">
            <summary>
            The channel that they started typing in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMessageTyping.TypingStartEvent.GuildID">
            <summary>
            The server they started typing in, or <see langword="null"/> if it's a DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMessageTyping.TypingStartEvent.UserID">
            <summary>
            The ID of the user that started typing.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMessageTyping.TypingStartEvent.Timestamp">
            <summary>
            The unix time (in seconds) of when they started typing.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildMessageTyping.TypingStartEvent.Member">
            <summary>
            The member who started typing if this occurred in a server, or <see langword="null"/> if this occurred in a DM.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionAddEvent">
            <summary>
            Fired when a reaction is added to a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionAddEvent.Member">
            <summary>
            The member who added the reaction, or <see langword="null"/> if this reaction was added in a DM channel.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveAllEvent">
            <summary>
            Fires when all reactions are removed from a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveAllEvent.ChannelID">
            <summary>
            The ID of the channel that the message exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveAllEvent.MessageID">
            <summary>
            The ID of the message that was reacted to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveAllEvent.GuildID">
            <summary>
            The ID of the guild this reaction was added in, or <see langword="null"/> if it was done in a DM.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEmojiEvent">
            <summary>
            Fires when a specific emoji is removed from a message's reactions (all instances of that emoji at once)
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEmojiEvent.Emoji">
            <summary>
            The Emoji that was removed. This is a lightweight emoji containing only its name.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEvent">
            <summary>
            Fires when a reaction is removed from a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEvent.UserID">
            <summary>
            The ID of the user that added this reaction.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEvent.ChannelID">
            <summary>
            The ID of the channel that the message exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEvent.MessageID">
            <summary>
            The ID of the message that was reacted to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEvent.GuildID">
            <summary>
            The ID of the guild this reaction was added in, or <see langword="null"/> if it was done in a DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessageReactions.MessageReactionRemoveEvent.Emoji">
            <summary>
            The emoji that was added. It is a minimal representation with only its name.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageCreateEvent">
            <summary>
            Fires when a message is sent. It is identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Message"/> object.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteBulkEvent">
            <summary>
            Fired when messages are deleted in bulk.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteBulkEvent.IDs">
            <summary>
            The IDs of the messages.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteBulkEvent.ChannelID">
            <summary>
            The ID of the channel this message is in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteBulkEvent.GuildID">
            <summary>
            The ID of the server that the channel is in, or <see langword="null"/> if this occurred in a DM.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteEvent">
            <summary>
            Fires when a message is deleted.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteEvent.ID">
            <summary>
            The ID of the message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteEvent.ChannelID">
            <summary>
            The ID of the channel this message is in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageDeleteEvent.GuildID">
            <summary>
            The ID of the server that the channel is in, or <see langword="null"/> if this is in a DM.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildOrDirectMessages.MessageUpdateEvent">
            <summary>
            Fired when a message is updated (edited). Identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Message"/>, but only a fraction of the data is contained. ID and channel ID will always exist.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildPresences.PresenceUpdateEvent">
            <summary>
            Fired when the presence of a user changes.<para/>
            This event is unique in that it may not have any given field populated. Additionally, the user may be partial (only the ID field set)
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelCreateEvent">
            <summary>
            Run when a channel is created in a guild. This is identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Channel"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelDeleteEvent">
            <summary>
            Run when a channel is deleted in a guild. This is identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Channel"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelPinsUpdateEvent">
            <summary>
            Run when a message is pinned or unpinned in a channel. This does not fire if a pinned message is deleted.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelPinsUpdateEvent.GuildID">
            <summary>
            The ID of the server that the message was pinned in, or <see langword="null"/> if this is is a DM channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelPinsUpdateEvent.ChannelID">
            <summary>
            The ID of the channel that the message was pinned in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelPinsUpdateEvent.LastPinTimestamp">
            <summary>
            The timestamp of when the latest message was pinned in this channel.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.ChannelUpdateEvent">
            <summary>
            Run when a channel is updated or changed in a guild. This is identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Channel"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.GuildCreateEvent">
            <summary>
            Run when a server has been created. This is identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> object.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.GuildDeleteEvent">
            <summary>
            Runs when a guild has been deleted, a guild becomes available due to an outage, or when this bot leaves said guild. Identical to an unavailable guild.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleCreateEvent">
            <summary>
            Run when a role is added to a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleCreateEvent.GuildID">
            <summary>
            The ID of the server this event occurred in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleCreateEvent.Role">
            <summary>
            The role that was created.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleDeleteEvent">
            <summary>
            Run when a role is deleted in a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleDeleteEvent.GuildID">
            <summary>
            The ID of the server this event occurred in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleDeleteEvent.RoleID">
            <summary>
            The ID of the role that was deleted.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleUpdateEvent">
            <summary>
            Run when a role is changed in a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleUpdateEvent.GuildID">
            <summary>
            The ID of the server this event occurred in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.Guilds.GuildRoleUpdateEvent.Role">
            <summary>
            The the role that was changed (which has its new properties)
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.Guilds.GuildUpdateEvent">
            <summary>
            Run when the settings of a guild are changed. It is identical to a <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> object.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildVoiceStates.VoiceStateUpdateEvent">
            <summary>
            Fired when the voice state of a member updates due to joining or leaving a channel.<para/>
            It is a <see cref="T:EtiBotCore.Payloads.PayloadObjects.VoiceState"/> object.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Intents.GuildWebhooks.GuildWebhookUpdateEvent">
            <summary>
            Fired when a webhook is created, removed, or changed in a guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildWebhooks.GuildWebhookUpdateEvent.GuildID">
            <summary>
            The ID of the guild that the webhook changed in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Intents.GuildWebhooks.GuildWebhookUpdateEvent.ChannelID">
            <summary>
            The channel that the webhook is associated with.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent">
            <summary>
            A response to the guild request members event.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.GuildID">
            <summary>
            The ID of the guild these members are a part of.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.Members">
            <summary>
            The members being sent with this chunk. At most, this will contain 1000 members.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.ChunkIndex">
            <summary>
            The index of this chunk.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.ChunkCount">
            <summary>
            The total amount of chunks that will be returned by the member request.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.NotFound">
            <summary>
            Any IDs that were invalid in the request that warranted this response will be in this array. <see langword="null"/> if all IDs were valid.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.Presences">
            <summary>
            If passing <see langword="true"/> into the member request to get presences, they will be listed here. It is <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.GuildMembersChunkEvent.Nonce">
            <summary>
            A unique string that you defined, specifically the one sent in the member request that warranted this response.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Passthrough.HelloEvent">
            <summary>
            The "Hello" payload, which stores the heartbeat interval.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.HelloEvent.HeartbeatInterval">
            <summary>
            The interval in which Discord expects heartbeats.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Passthrough.ReadyEvent">
            <summary>
            An event that fires when Discord is ready to receive payloads.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.ReadyEvent.Version">
            <summary>
            The gateway version being implemented.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.ReadyEvent.User">
            <summary>
            Information about the bot user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.ReadyEvent.Guilds">
            <summary>
            An array of guilds that this bot is in as incomplete objects.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.ReadyEvent.SessionID">
            <summary>
            The ID of the current session, which is used for resume calls.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.ReadyEvent.Shard">
            <summary>
            The shard information associated with this session, if sent in the identification packet.<para/>
            It will have two values: Its first value is the ID of the shard. The second value is the amount of shards.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Passthrough.ReconnectEvent">
            <summary>
            The server this bot is connected to is going away. The client should reconnect to the gateway and send a <see cref="T:EtiBotCore.Payloads.Commands.ResumeCommand"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Passthrough.ResumedEvent">
            <summary>
            A response to a <see cref="T:EtiBotCore.Payloads.Commands.ResumeCommand"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Events.Passthrough.VoiceServerUpdateEvent">
            <summary>
            Run when the voice server location of the guild changes.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.VoiceServerUpdateEvent.Token">
            <summary>
            The voice connection token.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.VoiceServerUpdateEvent.GuildID">
            <summary>
            The ID of the guild this applies to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Events.Passthrough.VoiceServerUpdateEvent.Endpoint">
            <summary>
            The endpoint of the new host. 
            A <see langword="null"/> endpoint means that the voice server allocated has gone away and is trying to be reallocated. You should attempt to disconnect from the currently connected voice server, and not attempt to reconnect until a new voice server is allocated.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.Payload">
            <summary>
            The base class for a payload. All payloads follow this format.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Payload.Operation">
            <summary>
            The opcode for the payload.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Payload.Data">
            <summary>
            The data included with the payload. When reading from this property, it will likely be a <see cref="T:Newtonsoft.Json.Linq.JObject"/> 
            unless specifically set to something else.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Payload.Sequence">
            <summary>
            The sequence number, used for resuming sessions and heartbeats.<para/>
            This is <see langword="null"/> (not sent) unless <see cref="P:EtiBotCore.Payloads.Payload.Operation"/> is <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.Dispatch"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.Payload.EventName">
            <summary>
            The name of the transmitted event.<para/>
            This is <see langword="null"/> (not sent) unless <see cref="P:EtiBotCore.Payloads.Payload.Operation"/> is <see cref="F:EtiBotCore.Payloads.Data.PayloadOpcode.Dispatch"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.Payload.GetObjectFromData``1">
            <summary>
            Calls JObject.ToObject on <see cref="P:EtiBotCore.Payloads.Payload.Data"/> and returns its value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Payloads.Payload.ToJson">
            <summary>
            An alias to easily convert this Payload to json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Payloads.Payload.ToJsonBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Calls <see cref="M:EtiBotCore.Payloads.Payload.ToJson"/> but populates the <see cref="T:System.ArraySegment`1"/> with the string in the form of UTF8 text.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:EtiBotCore.Payloads.Payload.ToJsonBytes">
            <summary>
            Calls <see cref="M:EtiBotCore.Payloads.Payload.ToJson"/> and returns the string as a byte array encoded as UTF8.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.Payload.ToString">
            <summary>
            Returns a lightweight representation of this payload, excluding its data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadDataObject">
            <summary>
            Treats this class as payload data, which means it will be an object in the data field of <see cref="T:EtiBotCore.Payloads.Payload"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.PayloadDataObject.GetEventName">
            <summary>
            Calls <see cref="M:EtiBotCore.Payloads.Events.IEvent.GetEventName"/> if this <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/> implements <see cref="T:EtiBotCore.Payloads.Events.IEvent"/>, or <see langword="null"/> otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Payloads.PayloadDataObject.ToString">
            <summary>
            Converts this <see cref="T:EtiBotCore.Payloads.PayloadDataObject"/> into its json string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Payloads.PayloadDataObject.ToJson">
            <inheritdoc cref="M:EtiBotCore.Payloads.PayloadDataObject.ToString"/>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Activity">
            <summary>
            The activity payload.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Name">
            <summary>
            The activity's name. This is the name of the game or content in activities like Playing, Listening To, etc.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Type">
            <summary>
            The type of activity.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.URL">
            <summary>
            The URL of the stream, which is validated if <see cref="P:EtiBotCore.Payloads.PayloadObjects.Activity.Type"/> is <see cref="F:EtiBotCore.Payloads.Data.ActivityType.Streaming"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.CreatedAt">
            <summary>
            Unix timestamp of when the activity was added to the user's session.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Timestamps">
            <summary>
            Applicable time information for this activity (start/end)
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Details">
            <summary>
            The details of what the current user is doing. Upper text.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.State">
            <summary>
            The current party status. Lower text.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Emoji">
            <summary>
            A lightweight Emoji associated with the status.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Party">
            <summary>
            Information about the current party. <see langword="null"/> if this is not a joinable game.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Assets">
            <summary>
            The assets of this activity, namely its small and large images. <see langword="null"/> if these fields are irrelevant.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Secrets">
            <summary>
            Keys needed to join, spectate, or find the match related to this activity. <see langword="null"/> if this is not a joinable game.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Instance">
            <summary>
            Whether or not this is an instanced game session. <see langword="null"/> if this is not a joinable game.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Activity.Flags">
            <summary>
            Flags about this activity. <see langword="null"/> if this is not a joinable game or music stream.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.PayloadObjects.Activity.#ctor">
            <summary>
            For JSON ONLY
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.ActivityAssets">
            <summary>
            The large/small image assets for an <see cref="T:EtiBotCore.Payloads.PayloadObjects.Activity"/>, and their tooltips.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.ActivityAssets.LargeImageKey">
            <summary>
            The key of the large image.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.ActivityAssets.LargeImageText">
            <summary>
            The tooltip when the large image is hovered.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.ActivityAssets.SmallImageKey">
            <summary>
            The key of the small image.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.ActivityAssets.SmallImageText">
            <summary>
            The tooltip when the small image is hovered.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.EmojiObject">
            <summary>
            A lightweight emoji representation for use in statuses.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.EmojiObject.Name">
            <summary>
            The name of the emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.EmojiObject.ID">
            <summary>
            The ID of the emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.EmojiObject.Animated">
            <summary>
            Whether or not this emoji is animated.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.PartyObject">
            <summary>
            Information about the current party.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.PartyObject.ID">
            <summary>
            The ID of the party.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.PartyObject.Size">
            <summary>
            The size of the party, <c>[current size, max size]</c>
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.SecretObject">
            <summary>
            Secrets for the <see cref="T:EtiBotCore.Payloads.PayloadObjects.Activity"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.SecretObject.Join">
            <summary>
            The secret needed to join.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.SecretObject.Spectate">
            <summary>
            The secret needed to spectate.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.SecretObject.Match">
            <summary>
            The secret referring to the current match.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.TimestampObject">
            <summary>
            Represents a timestamp for an <see cref="T:EtiBotCore.Payloads.PayloadObjects.Activity"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.TimestampObject.Start">
            <summary>
            The time at which this activity started.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ActivityObjects.TimestampObject.End">
            <summary>
            The time at which this activity will end.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Attachment">
            <summary>
            Represents an attachment to a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.ID">
            <summary>
            The ID of this attachment.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.FileName">
            <summary>
            The name of the file in this attachment.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.Size">
            <summary>
            The size of this attachment in bytes.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.URL">
            <summary>
            The URL linking to this attachment.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.ProxyURL">
            <summary>
            Alternative, proxied variant of <see cref="P:EtiBotCore.Payloads.PayloadObjects.Attachment.URL"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.Height">
            <summary>
            The height of this attachment if it is an image, or <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Attachment.Width">
            <summary>
            The width of this attachment if it is an image, or <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.AuditLog">
            <summary>
            A server's audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLog.Webhooks">
            <summary>
            The webhooks found in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLog.Users">
            <summary>
            The users found in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLog.Entries">
            <summary>
            The entries in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLog.Integrations">
            <summary>
            The list of partial integrations in this log.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange">
            <summary>
            A change made to an object in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Name">
            <summary>
            Guild, name
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.IconHash">
            <summary>
            Guild, icon
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.SplashHash">
            <summary>
            Guild, splash image
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.OwnerID">
            <summary>
            Guild, owner
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Region">
            <summary>
            Guild, voice region
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.AFKChannelID">
            <summary>
            Guild, afk channel
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.AFKTimeout">
            <summary>
            Guild, afk timeout
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.MFALevel">
            <summary>
            Guild, 2fa level
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.VerificationLevel">
            <summary>
            Guild, verification
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.ExplicitFilterLevel">
            <summary>
            Guild, nsfw filter
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.MessageNotifications">
            <summary>
            Guild, notif settings
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.VanityURL">
            <summary>
            Guild, vanity role
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.AddedRoles">
            <summary>
            Guild, roles created
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.RemovedRoles">
            <summary>
            Guild, roles removed
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.PruneDeleteDays">
            <summary>
            Guild, age of pruned members
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.WidgetEnabled">
            <summary>
            Guild, widget state
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.WidgetChannelID">
            <summary>
            Guild, id of widget channel
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.SystemChannelID">
            <summary>
            Guild, id of system channel
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Position">
            <summary>
            Channel, position in list
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Topic">
            <summary>
            Channel, description
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Bitrate">
            <summary>
            Voice channel, bitrate
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.PermissionOverwrites">
            <summary>
            Channel, custom permissions changed
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.NSFW">
            <summary>
            Channel, nsfw state
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.ApplicationID">
            <summary>
            Channel, app ID of added/removed webhook or bot
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.SlowModeSpeed">
            <summary>
            Channel, slow-mode
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Permissions">
            <summary>
            Role, permissions
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Color">
            <summary>
            Role, color
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Hoist">
            <summary>
            Role, display separately from other members
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Mentionable">
            <summary>
            Role, mentionable
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Allowed">
            <summary>
            Role, this permission (number) was allowed for a role
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Denied">
            <summary>
            Role, this permission (number) was denied for a role
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Code">
            <summary>
            Invite, code
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.ChannelID">
            <summary>
            Invite, target channel
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.InviterID">
            <summary>
            Invite, inviter ID
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.MaxUses">
            <summary>
            Invite, max uses
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Uses">
            <summary>
            Invite, number of times used
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.MaxAge">
            <summary>
            Invite, expiration time
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.TemporaryMembership">
            <summary>
            Invite, grant temp. membership
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Deaf">
            <summary>
            User, server deafened
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Mute">
            <summary>
            User, server muted
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Nickname">
            <summary>
            User, nickname
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.AvatarHash">
            <summary>
            User, avatar
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.ID">
            <summary>
            Universal. The ID of the thing that got changed
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.Type">
            <summary>
            Universal. The type of thing that was created (int for channel type, or string)
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.EnableEmoticons">
            <summary>
            Integration: enable emotes
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.ExpireBehavior">
            <summary>
            Integration: expiring subscriber behavior changed
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogChange.ExpireGracePeriod">
            <summary>
            Integration: Expiration grace period changed
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry">
            <summary>
            An entry in the audit log.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.TargetID">
            <summary>
            The ID of the affected entity (user, role, etc.)
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.Changes">
            <summary>
            The changes made in this entry.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.UserID">
            <summary>
            The user ID of whoever did the thingy.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.ID">
            <summary>
            The ID of this entry itself.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.ActionType">
            <summary>
            The type of action that occurred.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.Options">
            <summary>
            Additional info for certain specific action types.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.AuditLogEntry.Reason">
            <summary>
            The reason this action was performed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.DeleteMemberDays">
            <summary>
            The number of days after which inactive members were kicked.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_PRUNE"/>. It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.MembersRemoved">
            <summary>
            The number of members removed by the prune.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_PRUNE"/>. It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.ChannelID">
            <summary>
            The ID of the channel in which things were targeted.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_MOVE"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_PIN"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_UNPIN"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_DELETE"/>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.MessageID">
            <summary>
            The ID of the message that was targeted.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_PIN"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_UNPIN"/>
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.Count">
            <summary>
            The amount of entities that were targeted.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_DELETE"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MESSAGE_BULK_DELETE"/>, <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_DISCONNECT"/>, or <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.MEMBER_MOVE"/>. It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.ID">
            <summary>
            The ID of the thing that has its permissions changed (user or role)
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE"/> (and update/delete). It is a number as a string.
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.Type">
            <summary>
            The type of overwrite that it is.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE"/> (and update/delete). It is a number as a string.<para/>
            It is 0 for a role and 1 for a member.
            </remarks>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.RoleName">
            <summary>
            The name of the role that was changed.
            </summary>
            <remarks>
            Only present if the type is <see cref="F:EtiBotCore.Payloads.Data.AuditLogActionType.CHANNEL_OVERWRITE_CREATE"/> (and update/delete).<para/>
            Only present if <see cref="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.Type"/> is <c>"0"</c>, and null if <see cref="P:EtiBotCore.Payloads.PayloadObjects.AuditLogObjects.OptionalEntryInfo.Type"/> is <c>"1"</c>
            </remarks>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Ban">
            <summary>
            Represents a ban object.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Ban.Reason">
            <summary>
            The reason for the ban.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Ban.BanUser.Username">
            <summary>
            The username of this banned user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Ban.BanUser.Discriminator">
            <summary>
            The discriminator of this banned user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Ban.BanUser.ID">
            <summary>
            The ID of this banned user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Ban.BanUser.AvatarHash">
            <summary>
            The hash of this user's avatar.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Channel">
            <summary>
            Represents a Discord Channel
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.ID">
            <summary>
            The ID of this channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Type">
            <summary>
            The type of channel that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.GuildID">
            <summary>
            The ID of the server that this channel is in, or <see langword="null"/> if this is a DM channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Position">
            <summary>
            The position of this channel in the list, or <see langword="null"/> if this is a DM channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.PermissionOverwrites">
            <summary>
            The permission overwrites this channel applies, or <see langword="null"/> if this is a DM channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Name">
            <summary>
            The name of this channel, or <see langword="null"/> if this is a DM channel. Can be anywhere from 2 to 100 characters.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Topic">
            <summary>
            The topic or description of this channel, or <see langword="null"/> if this is a DM channel. Can be anywhere from 0 to 1024 characters.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.NSFW">
            <summary>
            Whether or not this channel is flagged as NSFW, or <see langword="null"/> if this is a DM channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.LastMessageID">
            <summary>
            The ID of the latest message. This may point to a message that no longer exists.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Bitrate">
            <summary>
            The bitrate of the channel (in bits). Does not apply to DMs.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.UserLimit">
            <summary>
            The maximum number of users in the channel. Does not apply to DMs.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.RateLimitPerUser">
            <summary>
            The slow-mode duration timer on this channel in seconds. Bots are unaffected, as are users with the manage mesasges/channel permissions.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Recipients">
            <summary>
            The members of this DM.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Icon">
            <summary>
            The icon hash if this is a group DM. <see cref="F:EtiBotCore.Data.Constants.UNSENT_STRING_DEFAULT"/> if this is not sent in the payload.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.OwnerID">
            <summary>
            If this is a group DM, this is the ID of the person who made it. If this is a thread, this is the creator of the thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.ApplicationID">
            <summary>
            If this is a group DM, this is the ID of the application who made it if they are a bot.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.ParentID">
            <summary>
            If this channel is in a category, this is the ID of the category object.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.LastPinTimestamp">
            <summary>
            The timestamp of when the latest message was pinned.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Metadata">
            <summary>
            The metadata for this thread, if this is a thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.Member">
            <summary>
            For every thread message, a channel object is sent. This will be populated for messages received in a thread.
            Hell of a method. Yeah.
            So if this is a channel from a thread message, then this is the member.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Channel.DefaultAutoArchiveDuration">
            <summary>
            The default auto-archive duration. May differ from that of <see cref="P:EtiBotCore.Payloads.PayloadObjects.Channel.Metadata"/>, but is otherwise still restricted to being 60, 1440, 4320, or 10080.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.PayloadObjects.Channel.permissions">
            <summary>
            Only useful for slash commands, not implementing these yet.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ChannelMention">
            <summary>
            Represents a link specifically to a channel, &lt;#ID&gt;
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ChannelMention.ID">
            <summary>
            The ID of the channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ChannelMention.GuildID">
            <summary>
            The ID of the server that the channel exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ChannelMention.Type">
            <summary>
            The type of channel that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ChannelMention.Name">
            <summary>
            The name of this channel.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.ClientPlatformStatus">
            <summary>
            Represents a client's status across their devices that could be logged into Discord.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ClientPlatformStatus.Desktop">
            <summary>
            The status of this user if they are on Desktop, or <see langword="null"/> if they are not logged in on Desktop anywhere.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ClientPlatformStatus.Mobile">
            <summary>
            The status of this user if they are on their phone or tablet, or <see langword="null"/> if they are not logged in on mobile anywhere.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ClientPlatformStatus.Web">
            <summary>
            The status of this user if they are on the website, or <see langword="null"/> if they are not logged in on web anywhere.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed">
            <summary>
            Represents an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Title">
            <summary>
            The title of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Type">
            <summary>
            The type of embed that this is. This value type is deprecated but must be implemented for API compliance. Always <see cref="F:EtiBotCore.Payloads.Data.EmbedType.Rich"/> for webhook embeds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Description">
            <summary>
            The description of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.URL">
            <summary>
            The URL of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Timestamp">
            <summary>
            The timestamp of the content.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Color">
            <summary>
            The color code for the embed's side strip.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Footer">
            <summary>
            The footer of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Image">
            <summary>
            The image in this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Thumbnail">
            <summary>
            The thumbnail of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Video">
            <summary>
            The video in of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Provider">
            <summary>
            The provider of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Author">
            <summary>
            The author of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.Fields">
            <summary>
            Fields in this embed.
            </summary>
        </member>
        <member name="M:EtiBotCore.Payloads.PayloadObjects.Embed.#ctor(EtiBotCore.DiscordObjects.Universal.Embed)">
            <summary>
            Constructs a new payload embed from the given embed.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.FooterComponent">
            <summary>
            The footer of an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.FooterComponent.Text">
            <summary>
            The text on the footer of this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.FooterComponent.IconURL">
            <summary>
            The URL of the icon on this footer, if applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.FooterComponent.ProxyIconURL">
            <summary>
            A proxied variant of <see cref="P:EtiBotCore.Payloads.PayloadObjects.Embed.FooterComponent.IconURL"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.ImageComponent">
            <summary>
            The image on an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.ImageComponent.URL">
            <summary>
            The URL of the image. HTTPS only.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.ImageComponent.ProxyURL">
            <summary>
            A proxied variant of <see cref="P:EtiBotCore.Payloads.PayloadObjects.Embed.ImageComponent.URL"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.ImageComponent.Height">
            <summary>
            The height of this image.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.ImageComponent.Width">
            <summary>
            The width of this image.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.ThumbnailComponent">
            <summary>
            The thumbnail of an embed. Identical to an image.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.VideoComponent">
            <summary>
            A video in an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.VideoComponent.URL">
            <summary>
            The URL to the video.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.VideoComponent.Height">
            <summary>
            The height of the video.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.VideoComponent.Width">
            <summary>
            The width of the video.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.ProviderComponent">
            <summary>
            The provider for an embed. Yeah you know as well as I do.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.ProviderComponent.Name">
            <summary>
            The name of the provider for this embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.ProviderComponent.URL">
            <summary>
            The URL of the provider.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.AuthorComponent">
            <summary>
            The author of an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.AuthorComponent.Name">
            <summary>
            The name of the author.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.AuthorComponent.URL">
            <summary>
            The URL to the author.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.AuthorComponent.IconURL">
            <summary>
            The URL to the author's icon. HTTPS only.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.AuthorComponent.ProxyIconURL">
            <summary>
            A proxied variant of <see cref="P:EtiBotCore.Payloads.PayloadObjects.Embed.AuthorComponent.IconURL"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Embed.FieldComponent">
            <summary>
            A field of an embed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.FieldComponent.Name">
            <summary>
            The title of this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.FieldComponent.Value">
            <summary>
            The content of this field.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Embed.FieldComponent.Inline">
            <summary>
            Whether or not this field displays inline.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Emoji">
            <summary>
            Represents an emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.ID">
            <summary>
            The ID of this emoji, or <see langword="null"/> if this is a unicode emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.Name">
            <summary>
            The name of this emoji. Can be <see langword="null"/> in reaction emoji objects, but only if it's a custom emoji and it was deleted from the guild (from which case ID will be used to identify it)
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.Roles">
            <summary>
            The IDs of the roles that are allowed to use this emoji (as strings), or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.Creator">
            <summary>
            The user that uploaded this emoji, or <see langword="null"/> if it is a stock emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.RequiresColons">
            <summary>
            Whether or not this emoji must be surrounded in colons to use, or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.Managed">
            <summary>
            Whether or not this emoji is managed by an integration, or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.Animated">
            <summary>
            Whether or not this emoji is animated, or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Emoji.Available">
            <summary>
            Whether or not this emoji is usable right now (which may be false if a boost is lost, for instance), or <see langword="null"/> if this is not applicable.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Guild">
            <summary>
            Represents a server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.ID">
            <summary>
            The ID of this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Name">
            <summary>
            The name of this server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.IconHash">
            <summary>
            The hash of the server's icon.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.SplashHash">
            <summary>
            The hash of the server's splash image (on the invite page).
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.DiscoverySplash">
            <summary>
            The hash of the server's discovery page image.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Owner">
            <summary>
            Whether or not the current client receiving this <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> is the owner of the server.<para/>
            <strong>This is only sent when this <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> was acquired via the GET Current User Guilds endpoint.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.OwnerID">
            <summary>
            The user ID of the owner of the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.MyPermissions">
            <summary>
            The permissions that the current client receiving this <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> has (excluding overwrites)<para/>
            <strong>This is only sent when this <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> was acquired via the GET Current User Guilds endpoint.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.VoiceRegion">
            <summary>
            The voice region ID for the guild. This corresponds to the ID field of a voice region object.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.AFKChannelID">
            <summary>
            The ID of the afk channel, or <see langword="null"/> if it is not set.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.AFKTimeout">
            <summary>
            The timeout for AFK in seconds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.WidgetEnabled">
            <summary>
            Whether or not the server has its widget enabled.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.WidgetChannelID">
            <summary>
            The channel ID that the widget will generate an invite to, or <see langword="null"/> if it's set to no invite.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.VerificationLevel">
            <summary>
            The verification level required to enter the guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.NotificationLevel">
            <summary>
            The default message notifications level.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.ExplicitFilterLevel">
            <summary>
            The explicit content filter level.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Roles">
            <summary>
            The roles in this guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Emojis">
            <summary>
            The emojis in this guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Features">
            <summary>
            The features this guild can use. See <see cref="T:EtiBotCore.Payloads.Data.GuildFeatures"/> for possible entries.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.MFALevel">
            <summary>
            The 2FA level required for this guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.ApplicationID">
            <summary>
            If a bot created this guild, this is the application's ID.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.SystemChannelID">
            <summary>
            If the guild has system messages enabled (e.g. join/leave, boost) this is the channel ID that they are sent to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.SystemChannelFlags">
            <summary>
            What types of messages are not sent in <see cref="P:EtiBotCore.Payloads.PayloadObjects.Guild.SystemChannelID"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.RulesChannelID">
            <summary>
            The ID of the rules channel for guilds with the PUBLIC feature enabled.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.JoinedGuildAt">
            <summary>
            The ISO8601 timestamp for when this server was joined.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.IsLarge">
            <summary>
            Whether or not this boolean is considered a large guild.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Unavailable">
            <summary>
            Whether or not this guild is unavailable due to an outage.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.MemberCount">
            <summary>
            The amount of members in this server.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.VoiceStates">
            <summary>
            An array of partial voice state objects. They all lack the guild_id key.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Members">
            <summary>
            The users who are in this server.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Channels">
            <summary>
            The channels in this server.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Presences">
            <summary>
            An array of partial presence updates. If this guild has more members than the large threshold, this will only include members that aren't offline and skip all offline members.<para/>
            <strong>This is only sent in the GUILD_CREATE event.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.MaxPresences">
            <summary>
            The maximum number of presences for the guild.<para/>
            <strong>Default:</strong> <c>25000</c>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.MaxMembers">
            <summary>
            The amount of members this guild can hold.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.VanityURLCode">
            <summary>
            The vanity URL code for the guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Description">
            <summary>
            The description of the guild, if it's discoverable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.BannerHash">
            <summary>
            The hash of the banner image for this guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.PremiumTier">
            <summary>
            The server's boost level.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.PremiumSubscriberCount">
            <summary>
            The amount of server boosters.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.PreferredLocale">
            <summary>
            The preferred locale for the server if it's public.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.PublicUpdatesChannelID">
            <summary>
            The ID where adminstrators of guilds recieve updates from Discord in public servers.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.MaxVideoChannelUsers">
            <summary>
            The maximum amount of users in a video channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.ApproxMemberCount">
            <summary>
            The approximate amount of members in the guild, which is returned when this <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> is acquired with <c>GET /guild/&lt;id&gt;</c> when <c>with_counts</c> is <see langword="true"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.ApproxPresenceCount">
            <summary>
            The approximate number of non-offline members in thsi guild, which is returned when this <see cref="T:EtiBotCore.Payloads.PayloadObjects.Guild"/> is acquired with <c>GET /guild/&lt;id&gt;</c> when <c>with_counts</c> is <see langword="true"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.NSFWLevel">
            <summary>
            The NSFW level of this server, which describes age restrictions and whatnot.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Guild.Stickers">
            <summary>
            The stickers in this server.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.IdentifyConnectionProperties">
            <summary>
            Used to identify the source of the connection to Discord
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.IdentifyConnectionProperties.OS">
            <summary>
            The OS this system is running on.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.IdentifyConnectionProperties.Browser">
            <summary>
            The library this is running on.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.IdentifyConnectionProperties.Device">
            <summary>
            The library this is running on.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Member">
            <summary>
            Represents a member in a server rather than just a user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.User">
            <summary>
            The underlying <see cref="P:EtiBotCore.Payloads.PayloadObjects.Member.User"/> that this member is built on. <strong>Not included in MESSAGE_CREATE and MESSAGE_UPDATE events.</strong>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.Nickname">
            <summary>
            This member's nickname in this server, or <see langword="null"/> if they don't have one.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.Roles">
            <summary>
            The roles this member has by ID.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.JoinedAt">
            <summary>
            When this member joined the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.PremiumSince">
            <summary>
            When this member subscribed to Nitro, or <see langword="null"/> if they are not subscribed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.Deafened">
            <summary>
            Whether or not this user is deafened in voice chat.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.Muted">
            <summary>
            Whether or not this user is muted in voice chat.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Member.Pending">
            <summary>
            Whether or not this member has passed the rules screening step.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Message">
            <summary>
            Represents a message in a server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.ID">
            <summary>
            The ID of this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.ChannelID">
            <summary>
            The channel this message exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.GuildID">
            <summary>
            The server the channel exists in. For direct messages, this is <see langword="null"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Author">
            <summary>
            The user that created the message. Will be invalid if the message is a webhook, which can be determined via checking if <see cref="P:EtiBotCore.Payloads.PayloadObjects.Message.WebhookID"/> is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Member">
            <summary>
            A partial member object. Will be <see langword="null"/> if this was sent by a webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Content">
            <summary>
            The content of the message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Timestamp">
            <summary>
            When this message was sent.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.EditedTimestamp">
            <summary>
            When this message was edited, or <see langword="null"/> if it has not been edited.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.TTS">
            <summary>
            Whether or not this message uses text to speech.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.MentionsEveryone">
            <summary>
            Whether or not this message contains @everyone
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Mentions">
            <summary>
            The users this message pings.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.MentionedRoles">
            <summary>
            The roles pinged by this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.MentionedChannels">
            <summary>
            An array of mentioned channels, which will be <see langword="null"/> if there are no visible mentioned channels.<para/>
            Channels in this array must be visible to everyone in a lurkable server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Attachments">
            <summary>
            The attachments on this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Embeds">
            <summary>
            The embeds in this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Reactions">
            <summary>
            The reactions that have been added to this message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Nonce">
            <summary>
            Used for validating that a message was sent.<para/>
            Discord may send this as an integer or a string. It is classified as an object to allow ambiguity between these two types.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Pinned">
            <summary>
            Whether or not this message is pinned.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.WebhookID">
            <summary>
            The ID of the webhook, or <see langword="null"/> if this was not sent by a webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Type">
            <summary>
            The type of message that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Activity">
            <summary>
            The message activity, used for when someone presses that little invite button to send that channel embed that lets you join, or <see langword="null"/> if the message does not use the assoociated feature.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Application">
            <summary>
            The application in the message, used in conjunction with <see cref="P:EtiBotCore.Payloads.PayloadObjects.Message.Activity"/>. This is <see langword="null"/> if the message does not have an embed with an application.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Reference">
            <summary>
            If this is an announcement message, this is the original message that relayed this announcement.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Flags">
            <summary>
            Extra information about what kind of message this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Thread">
            <summary>
            If this is a message in a thread, here's the whole freakin channel again for you.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Message.Stickers">
            <summary>
            Stickers sent in the message.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.MessageActivity">
            <summary>
            A message activity.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageActivity.Type">
            <summary>
            The type of message that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageActivity.PartyID">
            <summary>
            The ID of the party.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.MessageApplication">
            <summary>
            An application embedded in a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageApplication.ID">
            <summary>
            The ID of the application.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageApplication.CoverImage">
            <summary>
            ID of the embed's image asset.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageApplication.Description">
            <summary>
            The description of this application.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageApplication.Icon">
            <summary>
            The ID of this application's icon.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageApplication.Name">
            <summary>
            The name of this application.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.MessageReference">
            <summary>
            A reference to an original message, used in announcement channels.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageReference.MessageID">
            <summary>
            The ID of the original message, if applicable.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageReference.ChannelID">
            <summary>
            The ID of the channel that this message came from.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageReference.GuildID">
            <summary>
            The server that this message came from, or <see langword="null"/> if there is no associated guild.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.PartialIntegration">
            <summary>
            A partial integration used in audit logs.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.ID">
            <summary>
            The ID of the integration.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.Name">
            <summary>
            The name of this integration.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.Type">
            <summary>
            The type of integration that this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.Account">
            <summary>
            The account that handles this integration.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.AccountObject">
            <summary>
            An account object.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.AccountObject.Name">
            <summary>
            The name of this account.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PartialIntegration.AccountObject.ID">
            <summary>
            The ID of this account.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite">
            <summary>
            Represents a permission setting that overrides role permissions on a channel.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.ID">
            <summary>
            The role or user ID that this overwrite applies to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.Type">
            <summary>
            The thing that this permission overwrite applies to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.Allow">
            <summary>
            The numeric flags for the permissions that are explicitly allowed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.Deny">
            <summary>
            The numeric flags for the permissions that are explicitly denied.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.AllowPermissions">
            <inheritdoc cref="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.Allow"/>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.DenyPermissions">
            <inheritdoc cref="P:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.Deny"/>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.OverwriteTarget">
            <summary>
            Describes what this overwrite applies to.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.OverwriteTarget.Role">
            <summary>
            This overwrite applies to a role.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.PayloadObjects.PermissionOverwrite.OverwriteTarget.Member">
            <summary>
            This overwrite applies to a member.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Presence.User">
            <summary>
            The user associated with this event. This may be partial, in which just the ID is populated.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Presence.GuildID">
            <summary>
            The ID of the server that this event has fired from.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Presence.Status">
            <summary>
            The status of this user. Will never be <see cref="F:EtiBotCore.Payloads.Data.StatusType.Invisible"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Presence.Activities">
            <summary>
            The user's current activities.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Presence.ClientStatus">
            <summary>
            The status of this client across multiple devices.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.PresenceUser">
            <summary>
            A bare-bones user seen in presence objects. It only contains the user's ID.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.PresenceUser.UserID">
            <summary>
            The user's unique ID.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Reaction">
            <summary>
            A reaction on a message.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Reaction.Count">
            <summary>
            The amount of times this reaction has been added.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Reaction.Me">
            <summary>
            Whether or not the current user reacted with this emoji.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Reaction.Emoji">
            <summary>
            A partial <see cref="P:EtiBotCore.Payloads.PayloadObjects.Reaction.Emoji"/> object.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Role">
            <summary>
            Represents a role.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.ID">
            <summary>
            The ID of this role.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Name">
            <summary>
            The name of this role.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Color">
            <summary>
            The color of this role stored in an integer as <c>0RGB</c>
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Hoisted">
            <summary>
            Whether or not this role is displayed uniquely in the member list.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Position">
            <summary>
            The position of this role in the list.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.PermissionsString">
            <summary>
            The permissions of this role that are specifically set to allow.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Permissions">
            <inheritdoc cref="P:EtiBotCore.Payloads.PayloadObjects.Role.PermissionsString"/>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Managed">
            <summary>
            Whether or not the role is managed by an integration.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Role.Mentionable">
            <summary>
            Whether or not the role can be pinged.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Sticker">
            <summary>
            Represents a sticker item.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Sticker.ID">
            <summary>
            The ID of this sticker.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Sticker.Name">
            <summary>
            The name of this sticker
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Sticker.Format">
            <summary>
            The type of file this sticker uses.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMember.ThreadID">
            <summary>
            The ID of the thread. Not included if this was received in a GUILD_CREATE event.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMember.UserID">
            <summary>
            The ID of the member. Not included if this was received in a GUILD_CREATE event.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMember.JoinTimestamp">
            <summary>
            When this member joined the thread. If they left and rejoined, this is the latest join time.
            </summary>
        </member>
        <member name="F:EtiBotCore.Payloads.PayloadObjects.ThreadMember.flags">
            <summary>
            Irrelevant to bots. User-thread settings for notifications.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMembersUpdatePacket.ID">
            <summary>
            The ID of the thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMembersUpdatePacket.ServerID">
            <summary>
            The ID of the server this thread exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMembersUpdatePacket.AddedMembers">
            <summary>
            The thread members that were added to the thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMembersUpdatePacket.RemovedMemberIDs">
            <summary>
            The IDs of all members that were removed from this thread.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMetadata.Archived">
            <summary>
            Whether or not this thread is archived. Anyone can unarchive it unless <see cref="P:EtiBotCore.Payloads.PayloadObjects.ThreadMetadata.Locked"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMetadata.AutoArchiveDuration">
            <summary>
            The amount of time until this thread is auto-archived in minutes. Can be 60, 1440, 4320, or 10080.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMetadata.ArchiveTimestamp">
            <summary>
            The timestamp of when the thread was archived.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadMetadata.Locked">
            <summary>
            Whether or not this thread has been locked, which means only users with the ManageThreads permission can unarchive it.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadSyncData.ServerID">
            <summary>
            The ID of the server
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadSyncData.UpdatedParents">
            <summary>
            The parent channel IDs whose threads are being synced, or null for every single thread in the entire server. This may also contain
            channels without any threads, from which you should use this to dispose of the data.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadSyncData.Threads">
            <summary>
            All active threads in the given channels (<see cref="P:EtiBotCore.Payloads.PayloadObjects.ThreadSyncData.UpdatedParents"/>) that this user can access.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.ThreadSyncData.Members">
            <summary>
            All thread member objects representing the current user, which indicate the threads this user has been added to.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.UnavailableGuild">
            <summary>
            Represents a partial guild object which is an offline guild or a guild that has not been provided through the gateway connect guild create events.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.UnavailableGuild.ID">
            <summary>
            The ID of this guild.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.UnavailableGuild.Unavailable">
            <summary>
            Whether or not this guild object is unavailable.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.User">
            <summary>
            Represents a Discord User.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.UserID">
            <summary>
            The user's unique ID.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.Username">
            <summary>
            The user's username.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.Discriminator">
            <summary>
            The user's discriminator, or, the four digits after their name.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.AvatarHash">
            <summary>
            The user's avatar hash. The location of the image is at /avatars/userID/THIS_HASH.fileformat. <see langword="null"/> if they do not have an avatar. The string <c>%NULL%</c> if this is not sent (used to differentiate between "data wasn't sent" and "user has no avatar")
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.IsBot">
            <summary>
            Whether or not this user is a bot.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.IsSystem">
            <summary>
            Whether or not this is a system user, which is used in the urgent message system.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.MFAEnabled">
            <summary>
            Whether or not this user has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.Locale">
            <summary>
            This user's chosen language option.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.EmailVerified">
            <summary>
            Whether or not this user has a verified email. This will be <see langword="null"/> if the bot does not have the email oauth2 grant.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.Email">
            <summary>
            This user's email, or <see langword="null"/> if the bot does not have the email oauth2 grant.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.PrivateFlags">
            <summary>
            Identical to <see cref="P:EtiBotCore.Payloads.PayloadObjects.User.Flags"/> -- Would presumably contain undocumented flags (e.g. <c>1 &lt;&lt; 4</c>), but it does not.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.PremiumType">
            <summary>
            The type of Nitro subscription this user has.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.User.Flags">
            <summary>
            The attributes this user has.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.MessageUserExtension">
            <summary>
            Identical to <see cref="T:EtiBotCore.Payloads.PayloadObjects.User"/>, but it has a partial member object as a field.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.MessageUserExtension.Member">
            <summary>
            A partial member that is sent with this user.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.VoiceState">
            <summary>
            Represents a user who is connected to voice chat.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.GuildID">
            <summary>
            The ID of the server, or <see langword="null"/> if this is a DM call.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.ChannelID">
            <summary>
            The ID of the channel, or <see langword="null"/> if they are not connected.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.UserID">
            <summary>
            The ID of the user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.Member">
            <summary>
            The member that this voice state represents, if this has occurred in a server. <see langword="null"/> for DM calls.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.SessionID">
            <summary>
            The ID of this voice session.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.ServerDeafened">
            <summary>
            Whether or not this member is server deafened.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.ServerMuted">
            <summary>
            Whether or not this member is server muted.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.Deafened">
            <summary>
            Whether or not this member has deafened themselves.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.Muted">
            <summary>
            Whether or not this member has muted themselves.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.Streaming">
            <summary>
            Whether or not this member is using "Go Live". <see langword="null"/> for DM calls.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.WebcamOn">
            <summary>
            Whether or not this member has their webcam on.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.Suppressed">
            <summary>
            Whether or not this member us muted by me.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.VoiceState.RequestedToSpeakAt">
            <summary>
            When this user last requested to speak.
            </summary>
        </member>
        <member name="T:EtiBotCore.Payloads.PayloadObjects.Webhook">
            <summary>
            Represents a webhook. 
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.ID">
            <summary>
            The ID of this webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.Type">
            <summary>
            What type of webhook this is.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.GuildID">
            <summary>
            The server this webhook exists in.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.ChannelID">
            <summary>
            The channel this webhook targets.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.User">
            <summary>
            The user that created this webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.Name">
            <summary>
            The default name of the webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.Avatar">
            <summary>
            The default avatar of this webhook.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.Token">
            <summary>
            The secure token of this webhook, only returned for Incoming Webhooks.
            </summary>
        </member>
        <member name="P:EtiBotCore.Payloads.PayloadObjects.Webhook.ApplicationID">
            <summary>
            The bot/OAuth2 application that created this webhook
            </summary>
        </member>
        <member name="T:EtiBotCore.Utility.Attributes.AssociatedDefaultAttribute">
            <summary>
            Intended for use where this enum is going to be a key in a dictionary or other lookup, this provides the default value for the associated value.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Attributes.AssociatedDefaultAttribute.DefaultValue">
            <summary>
            The default value that is associated with this enum.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Attributes.AssociatedDefaultAttribute.As``1">
            <summary>
            Returns the default value as the given type <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Attributes.AssociatedDefaultAttribute.#ctor(System.Object)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Attributes.AssociatedDefaultAttribute"/>, setting the associated default to the given value.
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="T:EtiBotCore.Utility.Attributes.ConvertEnumByNameAttribute">
            <summary>
            Tells this enum to convert by serializing its elements' names instead of their numeric values when handled by <see cref="T:EtiBotCore.Data.JsonConversion.EnumConverter"/>.
            </summary>
        </member>
        <member name="T:EtiBotCore.Utility.Attributes.EnumConversionNameAttribute">
            <summary>
            When implemented on an enum, this changes the name that it is serialized to and from should its type use <see cref="T:EtiBotCore.Utility.Attributes.ConvertEnumByNameAttribute"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Attributes.EnumConversionNameAttribute.Name">
            <summary>
            The name to use for this Enum entry.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Attributes.EnumConversionNameAttribute.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Attributes.EnumConversionNameAttribute"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Attributes.EnumConversionNameAttribute.GetNameFrom(System.Reflection.FieldInfo)">
            <summary>
            When given a <see cref="T:System.Reflection.FieldInfo"/>, this will return the Name value stored in this attribute on that given field.
            </summary>
            <param name="field">The field to check.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the field does not have this attribute.</exception>
        </member>
        <member name="T:EtiBotCore.Utility.Counting.BudgetedValue">
            <summary>
            A value with a limited quantity. These items are restored on an as-used basis.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BudgetedValue.RestoreTimeMillis">
            <summary>
            The amount of time it takes for the values value to be restored.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BudgetedValue.Size">
            <summary>
            The total amount of values possible.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining">
            <summary>
            The amount of values remaining.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BudgetedValue.Depleted">
            <summary>
            <see langword="true"/> if there are no values remaining, and <see langword="false"/> if there are.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BudgetedValue.Source">
            <summary>
            A resuable source for <see cref="T:System.Threading.CancellationToken"/>s used to stop the timer.
            </summary>
        </member>
        <member name="T:EtiBotCore.Utility.Counting.BudgetedValue.Restored">
            <summary>
            A delegate used when a value is restored.
            </summary>
        </member>
        <member name="E:EtiBotCore.Utility.Counting.BudgetedValue.OnRestored">
            <summary>
            An event that fires when a value taken from the budget has been restored.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BudgetedValue.Live">
            <summary>
            Whether or not the timer is live.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Counting.BudgetedValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Counting.BulkBudgetedValue"/> that will restore the values every <paramref name="restoreTimeMillis"/> milliseconds, and has a budget of <paramref name="objectBudget"/> values.<para/>
            This will not automatically start the timer. Once the timer is started, the system will loop until it is stopped, setting <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining"/> to <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Size"/> (<paramref name="objectBudget"/>) once every <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.RestoreTimeMillis"/> milliseconds.
            </summary>
            <param name="restoreTimeMillis">The amount of time it takes for <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining"/> to be replenished.</param>
            <param name="objectBudget">The amount of values that can be taken at once.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="restoreTimeMillis"/> or <paramref name="objectBudget"/> are less than or equal to zero.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Counting.BudgetedValue.Decrement">
            <summary>
            Decrements <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining"/>. Throws a <see cref="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException"/> if <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining"/> == 0.<para/>
            Awaiting this <see cref="T:System.Threading.Tasks.Task"/> will delay until the value that was taken is restored.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException">If <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining"/> == 0</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Counting.BudgetedValue.Reset">
            <summary>
            Resets <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Remaining"/> to <see cref="P:EtiBotCore.Utility.Counting.BudgetedValue.Size"/> and cancels all ongoing restoration tasks.
            </summary>
        </member>
        <member name="T:EtiBotCore.Utility.Counting.BulkBudgetedValue">
            <summary>
            A value with a limited quantity. These items are simultaneously restored after a given time.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Epoch">
            <summary>
            The current epoch in milliseconds.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.RestoreTimeMillis">
            <summary>
            The amount of time it takes for the values value to be restored.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Size">
            <summary>
            The total amount of values possible.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining">
            <summary>
            The amount of values remaining.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Depleted">
            <summary>
            <see langword="true"/> if there are no values remaining, and <see langword="false"/> if there are.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.Counting.BulkBudgetedValue.RestoredEvent">
            <summary>
            An event that will fire every time the budget is restored.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.Counting.BulkBudgetedValue.NextRestoreOccursAt">
            <summary>
            The epoch of the next restoration.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Counting.BulkBudgetedValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Counting.BulkBudgetedValue"/> that will restore the values every <paramref name="restoreTimeMillis"/> milliseconds, and has a budget of <paramref name="objectBudget"/> values.<para/>
            </summary>
            <param name="restoreTimeMillis">The amount of time it takes for <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/> to be replenished.</param>
            <param name="objectBudget">The amount of values that can be taken at once.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="restoreTimeMillis"/> or <paramref name="objectBudget"/> are less than or equal to zero.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Counting.BulkBudgetedValue.Spend">
            <summary>
            Decrements <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/>. Throws a <see cref="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException"/> if <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/> == 0.
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.BudgetExceededException">If <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/> == 0</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Counting.BulkBudgetedValue.WaitForNextRestore">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that delays until the next occurrence of <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/> being reset to <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Size"/>, assuming <see cref="P:EtiBotCore.Utility.Counting.BulkBudgetedValue.Remaining"/> is 0.
            </summary>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.DictionaryExtensions">
            <summary>
            Provides extensions to dictionaries.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Attempts to get the entry for the specified key within this dictionary. Returns <paramref name="defaultValue"/> if the key has not been populated.
            </summary>
            <typeparam name="TKey">The key value type for this <see cref="T:System.Collections.Generic.Dictionary`2"/></typeparam>
            <typeparam name="TValue">The value type corresponding to the keys in this <see cref="T:System.Collections.Generic.Dictionary`2"/></typeparam>
            <param name="dictionary">The target dictionary.</param>
            <param name="key">The key to search for.</param>
            <param name="defaultValue">The default value to return.</param>
            <param name="populateIfNull">If <see langword="true"/>, the default value will be put into the dictionary with the given key if it was not found.</param>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.DictionaryExtensions.KeyOf``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Attempts to do a reverse-lookup on the specified <paramref name="value"/>, returning the first key that corresponds to this value.
            </summary>
            <typeparam name="TKey">The key value type for this <see cref="T:System.Collections.Generic.Dictionary`2"/></typeparam>
            <typeparam name="TValue">The value type corresponding to the keys in this <see cref="T:System.Collections.Generic.Dictionary`2"/></typeparam>
            <param name="dictionary">The target dictionary to search from.</param>
            <param name="value">The value to find the corresponding key of.</param>
            <exception cref="T:EtiBotCore.Exceptions.ValueNotFoundException"/>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.DictionaryExtensions.KeyOf``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1)">
            <inheritdoc cref="M:EtiBotCore.Utility.Extension.DictionaryExtensions.KeyOf``2(System.Collections.Generic.Dictionary{``0,``1},``1)"/>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1,System.Boolean)">
            <inheritdoc cref="M:EtiBotCore.Utility.Extension.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Boolean)"/>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.EnumerableExtensions">
            <summary>
            Extends the functionality of List<![CDATA[>]]>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.AddRangeFrom``1(System.Collections.Generic.List{``0},``0[],System.Int32)">
            <summary>
            Adds <paramref name="count"/> elements from <paramref name="array"/> to this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.Reset``1(``0[])">
            <summary>
            Resets all elements in this array to the <see langword="default"/> value for their type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Returns the integer index of the given element in this array, or -1 if it could not be found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.ToType``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Given an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of a given type, this will convert it to the new type <typeparamref name="TOut"/> granted the type <typeparamref name="TIn"/> can be cast into it.
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.SliceInto``1(``0[],System.Int32)">
            <summary>
            Slices this array into a number of arrays of a given size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="sliceMaxSize"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects a random element out of <paramref name="enumerable"/>. Returns <see langword="default"/> if the enumerable is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Uses a lazy means of copying this list. The contents are identical, but it creates a separate list reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy``1(System.Collections.Generic.List{``0})">
            <summary>
            Uses a lazy means of copying this list. The contents are identical by reference, but it creates a separate reference for the list itself (so <c>RefrenceEquals(source, returnValueFromThis)</c> will return false, but <c>ReferenceEquals(source[n], returnValueFromThis[n])</c> will return true.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy``1(``0[])">
            <summary>
            Uses a lazy means of copying this list. The contents are identical by reference, but it creates a separate reference for the list itself (so <c>RefrenceEquals(source, returnValueFromThis)</c> will return false, but <c>ReferenceEquals(source[n], returnValueFromThis[n])</c> will return true.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy(System.Collections.IList)">
            <summary>
            Uses a lazy means of copying this list. The contents are identical by reference, but it creates a separate reference for the list itself (so <c>RefrenceEquals(source, returnValueFromThis)</c> will return false, but <c>ReferenceEquals(source[n], returnValueFromThis[n])</c> will return true.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy(System.Collections.IDictionary)">
            <summary>
            Uses a lazy means of copying this dictionary. The contents are identical references, but it creates a separate reference for the dictionary itself.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Uses a lazy means of copying this dictionary. The contents are identical references, but it creates a separate reference for the dictionary itself.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy``2(EtiBotCore.Utility.Threading.ThreadedDictionary{``0,``1})">
            <summary>
            Uses a lazy means of copying this dictionary. The contents are identical references, but it creates a separate reference for the dictionary itself.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumerableExtensions.LazyCopy``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1})">
            <summary>
            Uses a lazy means of copying this dictionary. The contents are identical references, but it creates a separate reference for the dictionary itself.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.EnumExtensions">
            <summary>
            Provides extra functionality to enums
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumExtensions.GetDefaultAssociatedValueOf``1(System.Enum,``0@)">
            <summary>
            If this enum has <see cref="T:EtiBotCore.Utility.Attributes.AssociatedDefaultAttribute"/> on it, this will provide the internal value. 
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="enumeration"></param>
            <param name="def"></param>
            <returns>Whether or not the attribute was present.</returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumExtensions.NameOfEach(System.Enum)">
            <summary>
            Returns the name of each individual flag that is enabled in this enum. Entries are separated by bars <c>|</c>
            </summary>
            <param name="enumeration"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumExtensions.WithoutFlags``1(System.Enum,``0)">
            <summary>
            Given the input enum value and flags, this will return said enum with those flags switched off.
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumeration"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumExtensions.GetStatusName(EtiBotCore.Payloads.Data.StatusType)">
            <summary>
            Returns the display name of the given status from its attribute.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EnumExtensions.IsThreadChannel(EtiBotCore.Payloads.Data.ChannelType)">
            <summary>
            Returns whether or not this channel type corresponds to that of a thread.
            </summary>
            <param name="type">The <see cref="T:EtiBotCore.Payloads.Data.ChannelType"/> to be tested.</param>
            <returns>Whether or not this channel type is a thread type.</returns>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.EtiTaskExtensions">
            <summary>
            Provides a number of extensions to <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.String)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task`1"/>, or aborts if the time specified by <paramref name="timeout"/> passes, throwing a <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="timeout"></param>
            <param name="timeoutMessage"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.Int32,System.String)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task`1"/>, or aborts if the time specified by <paramref name="timeoutMillis"/> passes, throwing a <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="timeoutMillis"></param>
            <param name="timeoutMessage"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan,System.String)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/>, or aborts if the time specified by <paramref name="timeout"/> passes, throwing a <see cref="T:System.TimeoutException"/>.
            </summary>
            <param name="task"></param>
            <param name="timeout"></param>
            <param name="timeoutMessage"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.Int32,System.String)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/>, or aborts if the time specified by <paramref name="timeoutMillis"/> passes, throwing a <see cref="T:System.TimeoutException"/>.
            </summary>
            <param name="task"></param>
            <param name="timeoutMillis"></param>
            <param name="timeoutMessage"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.Launch(System.Func{System.Threading.Tasks.Task},EtiLogger.Logging.Logger,EtiBotCore.Utility.Threading.ReusableCancellationTokenSource)">
            <summary>
            Launches a task with the given <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> to cancel it. This task should contain some infinite loop.
            </summary>
            <param name="taskFunc">A function that represents the async work.</param>
            <param name="errorLogger">Something to log exceptions to.</param>
            <param name="source">A <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> that provides a <see cref="T:System.Threading.CancellationToken"/> to stop the task.</param>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.Launch``1(System.Func{System.Threading.Tasks.Task{``0}},EtiLogger.Logging.Logger,EtiBotCore.Utility.Threading.ReusableCancellationTokenSource)">
            <summary>
            Launches a task with the given <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> to cancel it. This task should contain some infinite loop.
            </summary>
            <param name="taskFunc">A function that represents the async work.</param>
            <param name="errorLogger">Something to log exceptions to.</param>
            <param name="source">A <see cref="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource"/> that provides a <see cref="T:System.Threading.CancellationToken"/> to stop the task.</param>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.RunSync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Synchronously runs the given <see cref="T:System.Threading.Tasks.Task`1"/> on the current thread (effectively stripping away the <see cref="T:System.Threading.Tasks.Task"/> part)<para/>
            Additionally, this will propagate any exceptions raised in this task.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException">Any exceptions raised in the task.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.RunSync(System.Threading.Tasks.Task)">
            <summary>
            Synchronously runs the given <see cref="T:System.Threading.Tasks.Task"/> on the current thread (effectively stripping away the <see cref="T:System.Threading.Tasks.Task"/> part)<para/>
            Additionally, this will propagate any exceptions raised in this task.
            </summary>
            <param name="task"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException">Any exceptions raised in the task.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes an <see langword="async"/> <see cref="T:System.Threading.Tasks.Task"/> synchronously.
            </summary>
            <param name="task"><see cref="T:System.Threading.Tasks.Task"/> to execute</param>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.EtiTaskExtensions.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an <see langword="async"/> <see cref="T:System.Threading.Tasks.Task`1"/> method which has a <typeparamref name="TResult"/> return type synchronously
            </summary>
            <typeparam name="TResult">Return Type</typeparam>
            <param name="task"><see cref="T:System.Threading.Tasks.Task`1"/> to execute</param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.IntegerExtensions">
            <summary>
            Provides extensions to integer classes to write them to streams in big endian.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.Byte)">
            <summary>
            use this to lose 8 intelligene
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.Int16)">
            <summary>
            Converts the given value to a big endian array of bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.UInt16)">
            <summary>
            Converts the given value to a big endian array of bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.Int32)">
            <summary>
            Converts the given value to a big endian array of bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.UInt32)">
            <summary>
            Converts the given value to a big endian array of bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.Int64)">
            <summary>
            Converts the given value to a big endian array of bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.IntegerExtensions.ToBigEndian(System.UInt64)">
            <summary>
            Converts the given value to a big endian array of bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.StringExtensions">
            <summary>
            Provides extensions to <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.StringExtensions.GetNullTerminatedString(System.Text.Encoding,System.Byte[])">
            <summary>
            Returns the string up to its first null byte (0). Expects the string to be ASCII encoded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.StringExtensions.GetStringBetween(System.String,System.Char,System.Char,System.Int32)">
            <summary>
            Given text, this method will find the first occurrence of <paramref name="start"/> and <paramref name="end"/>.<para/>
            If both exist and end is after start, it will return all characters between these two (NOT including them)<para/>
            If this case is not met, <see langword="null"/> is returned.<para/>
            Example: <c>GetStringBetween("[Hello, world!]", '[', ']')</c> returns <c>Hello, world!</c>
            </summary>
            <param name="text">The string to search.</param>
            <param name="start">The character that marks the start of the result.</param>
            <param name="end">The character that marks the end of the result.</param>
            <param name="after">Starts the search after this character index.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.StringExtensions.GetStringBetween(System.String,System.Char,System.Int32)">
            <summary>
            Given text, this method will find the first occurrence of <paramref name="ch"/>, and the second occurrence after that.<para/>
            If both exist, it will return all characters between these two (NOT including them)<para/>
            If this case is not met, <see langword="null"/> is returned.<para/>
            Example: <c>GetStringBetween(":Hello, world!:", ':')</c> returns <c>Hello, world!</c>
            </summary>
            <param name="text">The string to search.</param>
            <param name="ch">The character that marks the start and end of the result.</param>
            <param name="after">Starts the search after this character index.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.StringExtensions.IsPaddedWith(System.String,System.Char,System.Char)">
            <summary>
            Checks if <paramref name="start"/> and <paramref name="end"/> are the first and last characters of this string.
            </summary>
            <param name="text">The text to test.</param>
            <param name="start">The character that should be at the start of the string.</param>
            <param name="end">The character that should be at the end of the string.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.StringExtensions.IsPaddedWith(System.String,System.Char)">
            <summary>
            Checks if <paramref name="ch"/> makes up the first and last character of this string.
            </summary>
            <param name="text">The text to test.</param>
            <param name="ch">The character that should be at the start and end of this string.</param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.TypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.TypeExtensions.HasAttribute``1(System.Type)">
            <summary>
            Returns whether or not this type has an attribute of the given class present.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Attribute"/>.</typeparam>
            <param name="type">The type to search on.</param>
            <returns>Whether or not this type has an attribute of the given class present.</returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.TypeExtensions.GetJsonName(System.Reflection.PropertyInfo)">
            <summary>
            Specifically for <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>, this will return the name of the associated property via looking for a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.TypeExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns whether or not this member has an attribute of the given class present.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Attribute"/>.</typeparam>
            <param name="member">The type to search on.</param>
            <param name="inherited">Whether or not this attribute can be inherited</param>
            <returns>Whether or not this type has an attribute of the given class present.</returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.TypeExtensions.Implements(System.Type,System.Type)">
            <summary>
            Returns whether or not this type implements the given interface.
            </summary>
            <param name="type">The type to search on.</param>
            <param name="interfaceType">The type of the interface that might be implemented on this <see cref="T:System.Type"/></param>
            <returns>Whether or not this type implements the given interface.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="interfaceType"/> is not an interface type.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="interfaceType"/> is null</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Returns whether or not this type is an instance of the given generic type.
            </summary>
            <param name="toCheck"></param>
            <param name="generic"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.TypeExtensions.IsNumericType(System.Type)">
            <summary>
            Returns whether or not this type is one of the stock numeric types. This works for nullables as well.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Extension.WebSocketExtensions">
            <summary>
            Provides utilities for reading from and writing to <see cref="T:System.Net.WebSockets.ClientWebSocket"/>s.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.WebSocketExtensions.ReceiveBytesAsync(System.Net.WebSockets.ClientWebSocket,System.Threading.CancellationToken)">
            <summary>
            Receives data from this <see cref="T:System.Net.WebSockets.ClientWebSocket"/> and returns it as a byte array.
            </summary>
            <param name="socket"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.WebSocketErroredException">If something closed the socket.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.WebSocketExtensions.ReceiveBytesAndResultAsync(System.Net.WebSockets.ClientWebSocket,System.Threading.CancellationToken)">
            <summary>
            Receives data from this <see cref="T:System.Net.WebSockets.ClientWebSocket"/> and returns it as a byte array. Additionally returns the <see cref="T:System.Net.WebSockets.WebSocketReceiveResult"/>.<para/>
            This will receive until the end of the message is received, merging the results of all packets together neatly.
            </summary>
            <param name="socket"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:EtiBotCore.Exceptions.WebSocketErroredException">If something closed the socket.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Extension.WebSocketExtensions.SendBytesAsync(System.Net.WebSockets.ClientWebSocket,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sends the given <see cref="T:System.Byte"/> arary through the socket, and supports splitting the messages into a given packet size.<para/>
            This automatically splits it into 4096 byte packets for the sending process.
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.HashToUriConverter">
            <summary>
            Takes in hashes (among other potentially necessary information) and returns a URL to the associated resource on Discord.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.HashToUriConverter.BASE_URL">
            <summary>
            The base URL that all assets on Discord are at.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.HashToUriConverter.FMT_ID_HASH">
            <summary>
            A format string for if a URL has an endpoint, ID, a hash, and an extension.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.HashToUriConverter.FMT_ID_HASH_PNG">
            <summary>
            A format string for if a URL has an endpoint, ID, a hash, and an extension.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetCustomEmojiImage(System.String)">
            <summary>
            Given the emoji has, this will return a URL to the Emoji image. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="emojiHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetGuildIcon(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given the guild ID and its icon hash, this will return a URL to the icon's image. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="guildID"></param>
            <param name="iconHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetGuildSplash(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given the guild ID and its splash's hash, this will return a URL to the splash image. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="guildID"></param>
            <param name="splashHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetGuildDiscoverySplash(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given the guild ID and its discovery image hash, this will return a URL to the discovery image. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="guildID"></param>
            <param name="discoverySplashHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetGuildBanner(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given the guild ID and its banner hash, this will return a URL to the banner image. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="guildID"></param>
            <param name="bannerHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetUserDefaultAvatar(System.Int32)">
            <summary>
            Given a user's discriminator, this will return their default avatar.
            </summary>
            <param name="discriminator"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If discriminator is less than 1 or greater than 9999</exception>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetUserAvatar(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given a user's ID and their avatar's hash, this will return the URL to their avatar. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="userID"></param>
            <param name="avatarHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetApplicationIcon(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given an app's ID and its icon's hash, this will return the URL to the icon. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="appID"></param>
            <param name="iconHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetApplicationAsset(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given an app's ID and an asset's hash, this will return the URL to the asset. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="appID"></param>
            <param name="assetHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetAchievementIcon(EtiBotCore.Data.Structs.Snowflake,EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given an app's ID, an achievement's ID, and the hash to the achievement, this will return the URL to the achievement. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="appID"></param>
            <param name="achievementID"></param>
            <param name="iconHash"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.HashToUriConverter.GetTeamIcon(EtiBotCore.Data.Structs.Snowflake,System.String)">
            <summary>
            Given a team's ID and their icon's hash, this will return the URL to the team's icon. If the hash is <see langword="null"/> then this will return <see langword="null"/>.
            </summary>
            <param name="teamID"></param>
            <param name="teamHash"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.ICommandArg`1">
            <summary>
            Provides an interface that allows returning the given type from the given other type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.ICommandArg`1.From(System.String,System.Object)">
            <summary>
            Converts the given string (presumably a command argument) into a <strong>new instance</strong> (this does not populate this instance!) of <typeparamref name="T"/>, or null if it is not convertible.
            </summary>
            <param name="instance"></param>
            <param name="inContext"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.ICommandArg">
            <summary>
            Provides an interface that allows returning an object from the given other type.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.ICommandArg.From(System.String,System.Object)">
            <summary>
            Converts the given string (presumably a command argument) into an <strong>new instance</strong> (this does not populate this instance!) of this object, or null if it is not convertible.
            </summary>
            <param name="instance"></param>
            <param name="inContext"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1">
            <summary>
            A list that has a maximum size.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.MaxCapacity">
            <summary>
            The maximum number of elements this can have.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.List`1.Count"/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.#ctor(System.Int32)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1"/> with the given capacity.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.Add(`0)">
            <summary>
            Attempts to add the given object to the end of the list. Throws <see cref="T:System.InvalidOperationException"/> if the list is full.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the list is full.</exception>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Remove(`0)"/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.RemoveAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.LimitedSpaceList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.ManagedSetter`1">
            <summary>
            A utility that allows locking/unlocking a property's setter.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.Value">
            <summary>
            The value stored within this <see cref="T:EtiBotCore.Utility.Marshalling.ManagedSetter`1"/>
            </summary>
            <exception cref="T:EtiBotCore.Exceptions.Marshalling.PropertyLockedException">If this is locked.</exception>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.Locked">
            <summary>
            Whether or not the setter is locked.<para/>
            Attempting to call <see cref="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.Locked"/>.<see langword="set"/> while <see cref="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.LockedDelegate"/> is not <see langword="null"/> will raise an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the setter is called and <see cref="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.LockedDelegate"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.LockedDelegate">
            <summary>
            A delegate that is used to tell this object whether or not it's locked. Set to <see langword="null"/> to use the property <see cref="P:EtiBotCore.Utility.Marshalling.ManagedSetter`1.Locked"/> instead.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.ManagedSetter`1.#ctor(`0,System.Boolean)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Marshalling.ManagedSetter`1"/> with the given settings.
            </summary>
            <param name="defaultValue">The value that the field will store.</param>
            <param name="startLocked">Whether or not this starts out as locked.</param>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.ManagedSetter`1.#ctor(System.Func{System.Boolean},`0)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Marshalling.ManagedSetter`1"/> with the given settings.
            </summary>
            <param name="defaultValue">The value that the field will store.</param>
            <param name="lockedDelegate">The delegate to use to determine whether or not this is locked.</param>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.Singleton`1">
            <summary>
            A singleton object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Singleton`1.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.Variant">
            <summary>
            A container for a value whose type could be a number of possible options that are not necessarily interchangeable nor convertible.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant.ArgIndex">
            <summary>
            The index of type argument that this variant contains.<br/>
            <em>This is a one-based value</em>, that is, the number that this is will reflect the property it's set to. <see cref="P:EtiBotCore.Utility.Marshalling.Variant.ArgIndex"/>=1 means Value<strong>1</strong> is in use, <see cref="P:EtiBotCore.Utility.Marshalling.Variant.ArgIndex"/>=2 means Value<strong>2</strong> is in use, so on.
            <br/><br/>
            <see cref="P:EtiBotCore.Utility.Marshalling.Variant.ArgIndex"/>=0 means this variant is malformed.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant.#ctor(System.Int32)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/> with the given argument index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant.TryParseComponentAs``1(System.String,System.Object,``0@)">
            <summary>
            Attempts to parse the given string in the given BotContext (from OriBotV3) into the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="inContext"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant.TryParseComponentAs(System.Type,System.String,System.Object,System.Object@)">
            <summary>
            Attempts to parse the given string in the given BotContext (from OriBotV3) into the given type.
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="inContext"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.Variant`2">
            <summary>
            A value that could be either a(n) <typeparamref name="T1"/> or a(n) <typeparamref name="T2"/>.<para/>
            When automatically translating args, they are parsed in the order the types are defined. This means more precise types (such as a numeric type) should always be put before a string type when converting from a string.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`2.Value1">
            <summary>
            The <typeparamref name="T1"/> component of this <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`2.Value2">
            <summary>
            The <typeparamref name="T2"/> component of this <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`2.#ctor">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`2.#ctor(System.Int32)">
            <summary>
            Intended for superclases.
            </summary>
            <param name="argIdx"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`2.#ctor(`0)">
            <summary>
            Create a new <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/> containing a(n) <typeparamref name="T1"/> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`2.#ctor(`1)">
            <summary>
            Create a new <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/> containing a(n) <typeparamref name="T2"/> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`2.Type1">
            <summary>
            The type of <typeparamref name="T1"/>
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`2.Type2">
            <summary>
            The type of <typeparamref name="T2"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`2.From(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`2.EtiBotCore#Utility#Marshalling#ICommandArg#From(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.Variant`3">
            <summary>
            A value that could be either a(n) <typeparamref name="T1"/>, a(n) <typeparamref name="T2"/>, or a(n) <typeparamref name="T3"/>.<para/>
            When automatically translating args, they are parsed in the order the types are defined. This means more precise types (such as a numeric type) should always be put before a string type when converting from a string.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`3.Value3">
            <summary>
            The <typeparamref name="T3"/> component of this <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.#ctor(System.Int32)">
            <summary>
            Intended for superclases.
            </summary>
            <param name="argIdx"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.#ctor(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.#ctor(`1)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.#ctor(`2)">
            <summary>
            Create a new <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/> containing a(n) <typeparamref name="T3"/> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`3.Type3">
            <summary>
            The type of <typeparamref name="T1"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.From(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`3.EtiBotCore#Utility#Marshalling#ICommandArg#From(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Marshalling.Variant`4">
            <summary>
            A value that could be either a(n) <typeparamref name="T1"/>, a(n) <typeparamref name="T2"/>, a(n) <typeparamref name="T3"/>, or a(n) <typeparamref name="T4"/>.<para/>
            When automatically translating args, they are parsed in the order the types are defined. This means more precise types (such as a numeric type) should always be put before a string type when converting from a string.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`4.Value4">
            <summary>
            The <typeparamref name="T4"/> component of this <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/>.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.#ctor(System.Int32)">
            <summary>
            Intended for superclases.
            </summary>
            <param name="argIdx"></param>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.#ctor(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.#ctor(`1)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.#ctor(`2)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.#ctor(`3)">
            <summary>
            Create a new <see cref="T:EtiBotCore.Utility.Marshalling.Variant"/> containing a(n) <typeparamref name="T3"/> value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:EtiBotCore.Utility.Marshalling.Variant`4.Type4">
            <summary>
            The type of <typeparamref name="T1"/>
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.From(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Marshalling.Variant`4.EtiBotCore#Utility#Marshalling#ICommandArg#From(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Networking.DiscordRateLimitHeader">
            <summary>
            Represents the header returned when Discord replies to the bot, which contains the limitations.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.Empty">
            <summary>
            Whether or not the Http Response was missing the data here.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.WasRateLimited">
            <summary>
            Whether or not this response was accompanied with HTTP 429, meaning the bot was rate limited and needs to stop all outgoing network requests for a while.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.Global">
            <summary>
            Whether or not this limit is global. This should only be parsed if <see cref="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.WasRateLimited"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.Limit">
            <summary>
            The number of requests that can be made to this endpoint in total.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.Remaining">
            <summary>
            The number of remaining requests that can be made.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.Reset">
            <summary>
            Epoch time at which the rate limit resets. This should only be parsed if <see cref="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.WasRateLimited"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.ResetAfter">
            <summary>
            Total time (in seconds) of when the current rate limit bucket will reset. Can have decimals to match previous millisecond ratelimit precision.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.Bucket">
            <summary>
            A unique string denoting the rate limit being encountered. This is a bucket. (Dear god).
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Networking.DiscordRateLimitHeader.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Constructs a new <see cref="T:EtiBotCore.Utility.Networking.DiscordRateLimitHeader"/> from the given <see cref="T:System.Net.Http.HttpResponseMessage"/>
            </summary>
            <param name="from"></param>
        </member>
        <member name="T:EtiBotCore.Utility.Networking.DiscordRateLimitResponse">
            <summary>
            A json response for a rate limit.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitResponse.Message">
            <summary>
            A message saying you are being rate limited.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitResponse.RetryAfter">
            <summary>
            The amount of seconds to wait before sending another request.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Networking.DiscordRateLimitResponse.IsGlobal">
            <summary>
            Whether or not this limit is global.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Networking.DiscordRateLimitResponse.Yield(System.Int32)">
            <summary>
            Returns a task that will delay <em><see cref="P:EtiBotCore.Utility.Networking.DiscordRateLimitResponse.RetryAfter"/></em> seconds, optionally adding the given padding time afterwards.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EtiBotCore.Utility.Threading.ConcurrentStorage`1">
            <summary>
            A multi-threaded collection that allows looking for specific items. This does not guarantee any specific order of elements.<para/>
            This does not support duplicates.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:EtiBotCore.Utility.Threading.ConcurrentStorage`1.FAKE_NULL">
            <summary>
            A placeholder object instance representing a null key. It is possible to add null to this storage, and the dictionary does not support null keys.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.Threading.ConcurrentStorage`1.BackingDictionary">
            <summary>
            The backing <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> that this <see cref="T:EtiBotCore.Utility.Threading.ConcurrentStorage`1"/> wraps around.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ConcurrentStorage`1.Replace(`0,`0)">
            <summary>
            Replaces the given <paramref name="item"/> with the given <paramref name="replacement"/>. Does nothing if the item is not a member of this <see cref="T:EtiBotCore.Utility.Threading.ConcurrentStorage`1"/>.
            </summary>
            <param name="item"></param>
            <param name="replacement"></param>
            <returns>Whether or not the item was replaced.</returns>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ConcurrentStorage`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ConcurrentStorage`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource">
            <summary>
            A variant of <see cref="T:System.Threading.CancellationTokenSource"/> that provides tokens as needed without needing to be reconstructed.
            </summary>
        </member>
        <member name="F:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource.LatestSource">
            <summary>
            When a <see cref="T:System.Threading.CancellationTokenSource"/> is cancelled, it becomes useless and must be disposed of. This is the latest available <see cref="T:System.Threading.CancellationTokenSource"/> that can provide a new token.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource.CurrentToken">
            <summary>
            Returns the current <see cref="T:System.Threading.CancellationToken"/> that is available right now.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource.Cancel">
            <summary>
            Cancels the underlying <see cref="T:System.Threading.CancellationTokenSource"/> and then creates a new instance, updating the value of <see cref="P:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource.CurrentToken"/> in the process.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ReusableCancellationTokenSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Threading.ThreadedDictionary`2">
            <summary>
            A thread-safe <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.GetOrDefault(`0,`1)">
            <summary>
            Attempts to return the value associated with <paramref name="key"/>, or <paramref name="def"/> if the key does not exist.
            </summary>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.GetValueOrDefault(`0)">
            <summary>
            Attempts to return the value associated with <paramref name="key"/>, or <see langword="default"/> if the key does not exist.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.Item(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.System#Collections#IDictionary#Keys">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.System#Collections#IDictionary#Values">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Utility.Threading.ThreadedDictionary`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:EtiBotCore.Utility.Threading.ThreadedDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:EtiBotCore.Utility.Timing.RateLimiter">
            <summary>
            A utility designed to throttle events and yield if needed.
            </summary>
        </member>
        <member name="P:EtiBotCore.Utility.Timing.RateLimiter.DelayTimeMillis">
            <summary>
            The shortest amount of time between actions that can be made.
            </summary>
        </member>
        <member name="M:EtiBotCore.Utility.Timing.RateLimiter.RequestPerformAction">
            <summary>
            Request that an action be performed. This returns a task that will yield depending on the number of pending actions.
            </summary>
        </member>
        <member name="T:EtiBotCore.Voice.VoiceConnectionMarshaller">
            <summary>
            A utility class that assists in creating, maintaining, and utilizing a connection to a voice channel.
            </summary>
        </member>
        <member name="F:EtiBotCore.Voice.VoiceConnectionMarshaller.Log">
            <summary>
            The log associated with the system.
            </summary>
        </member>
        <member name="F:EtiBotCore.Voice.VoiceConnectionMarshaller.VOICE_GATEWAY_VERSION">
            <summary>
            The current voice gateway version.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.MyExternalIP">
            <summary>
            This machine's external IP.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.Current">
            <summary>
            The current active <see cref="T:EtiBotCore.Voice.VoiceConnectionMarshaller"/>.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.Connected">
            <summary>
            Whether or not the voice socket is connected.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceSocket">
            <summary>
            The socket used to maintain voice connections.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceClient">
            <summary>
            The actual UDP client used to send and receive voice packets.
            </summary>
        </member>
        <member name="F:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceTokenSource">
            <summary>
            A supplier for voice cancellation tokens.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SSRC">
            <summary>
            The current SSRC
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.TargetIP">
            <summary>
            The IP of Discord's voice gateway right now.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.TargetPort">
            <summary>
            The port of Discord's voice gateway right now.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SecretKey">
            <summary>
            The current secret key.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.CurrentSessionID">
            <summary>
            The current session's ID. Used only for resuming.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.CurrentToken">
            <summary>
            The current session's token. Used only for resuming.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceEndpoint">
            <summary>
            The endpoint that Discord will send and receive data to and from. A <see langword="null"/> endpoint means that the voice server allocated has gone away and is trying to be reallocated. You should attempt to disconnect from the currently connected voice server, and not attempt to reconnect until a new voice server is allocated.
            </summary>
        </member>
        <member name="F:EtiBotCore.Voice.VoiceConnectionMarshaller.SequenceNumberOffset">
            <summary>
            A sequence number offset for when the stream nukes itself and has to restart.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.Faulted">
            <summary>
            Whether or not the system has suffered a problem that requires it to be recreated.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.Paused">
            <summary>
            Whether or not to pause transmission.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.EmulateFailure">
            <summary>
            If true, the next voice packet will emulate a connection failure.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.Channel">
            <summary>
            The channel this <see cref="T:EtiBotCore.Voice.VoiceConnectionMarshaller"/> exists for.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.RadioTextChannel">
            <summary>
            The channel used for music-related information.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.CurrentMusicTime">
            <summary>
            The current timestamp of the song.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.MusicLength">
            <summary>
            The length of the song.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.MusicControllerReset">
            <summary>
            A method used to stop the music from the MusicController.
            </summary>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.DisconnectIfExists">
            <summary>
            Disconnects <see cref="P:EtiBotCore.Voice.VoiceConnectionMarshaller.Current"/> if it is not <see langword="null"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.FalseFail">
            <summary>
            Simulates a network failure.
            </summary>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.#ctor(EtiBotCore.DiscordObjects.Guilds.VoiceChannel,EtiBotCore.DiscordObjects.Guilds.TextChannel)">
            <summary>
            Construct a new <see cref="T:EtiBotCore.Voice.VoiceConnectionMarshaller"/> in the given channel. This will set up all necessary data and prepare the system for connection.
            </summary>
            <param name="inChannel">The Spirit Radio voice channel.</param>
            <param name="radioTextChannel">The #spirit-radio-chat channel.</param>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.InitializeConnectionAsync">
            <summary>
            Initiates the connection to Discord. This will yield until Discord replies with both necessary events. Propagates any exceptions that occur, but also logs them.
            </summary>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.TransmitAll(System.Collections.Generic.List{System.Byte[]},System.Threading.CancellationToken)">
            <summary>
            Send the entire audio file. Returns a <see cref="T:System.Threading.Tasks.Task"/> that runs until the transmission has completed. This will not disconnect the transmission.
            </summary>
            <param name="rawOpusPackets">An array of opus packets acquired from <see cref="T:SaltyPiss.Opus.TransmitHelper"/>.</param>
            <param name="token">A token that can be used to stop transmission.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.ConstructRawOpusPacket(System.Collections.Generic.List{System.Byte[]},System.Int32)">
            <summary>
            Constructs an opus packet from the given packet array and sequence number.
            </summary>
            <param name="packets"></param>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.SendVoice(EtiBotCore.Payloads.Payload)">
            <summary>
            Sends the given <see cref="T:EtiBotCore.Payloads.Payload"/> to Discord. This is strictly for voice connections and uses a different socket.
            </summary>
            <param name="payload">The <see cref="T:EtiBotCore.Payloads.Payload"/> to send.</param>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.ReceiveVoice">
            <summary>
            Recieves a <see cref="T:EtiBotCore.Payloads.Payload"/> from Discord's voice connection and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.SendVoiceHeartbeat">
            <summary>
            Sends a heartbeat when called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.StartVoiceHeartbeatTask(System.Int32)">
            <summary>
            Begins the heartbeat loop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EtiBotCore.Voice.VoiceConnectionMarshaller.SendSpeaking(System.Boolean,System.Boolean)">
            <summary>
            Update the speaking status of the bot.
            </summary>
            <param name="speaking">If true, the bot will be signified as speaking.</param>
            <param name="priority">If true, the bot will also lower the volume of other members.</param>
            <returns></returns>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.EmbedForDisconnection">
            <summary>
            An embed for when error 4014 (Disconnected) is sent.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.EmbedForInvalidSession">
            <summary>
            An embed for when error 4006 (Session no longer valid) is sent.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceIdentifyPayload.ServerID">
            <summary>
            The ID of the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceIdentifyPayload.UserID">
            <summary>
            The ID of the bot user.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceIdentifyPayload.SessionID">
            <summary>
            The ID of the voice session.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceIdentifyPayload.Token">
            <summary>
            The voice connection's token.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceReadyPayload.SSRC">
            <summary>
            da magic numba or something idk
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceReadyPayload.IP">
            <summary>
            The IP Address of the server.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceReadyPayload.Port">
            <summary>
            The port this connection is on.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceReadyPayload.Modes">
            <summary>
            The valid modes of encryption that can be used.
            </summary>
        </member>
        <member name="F:EtiBotCore.Voice.VoiceConnectionMarshaller.VoiceReadyPayload.heartbeat_interval">
            <summary>
            This is an erroneous field.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SelectProtocolPayload.Protocol">
            <summary>
            The protocol used when connecting.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SelectProtocolPayload.Data">
            <summary>
            Information about this connection.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SelectProtocolPayload.SelectProtocolData.IP">
            <summary>
            The IP address of my machine that Discord will send data to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SelectProtocolPayload.SelectProtocolData.Port">
            <summary>
            The port that Discord will send data to.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SelectProtocolPayload.SelectProtocolData.Mode">
            <summary>
            The encryption mode.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.ReceiveProtocolPayload.Mode">
            <summary>
            The encryption mode.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.ReceiveProtocolPayload.SecretKey">
            <summary>
            The secret key as a byte array.
            </summary>
        </member>
        <member name="P:EtiBotCore.Voice.VoiceConnectionMarshaller.SpeakingPayload.Speaking">
            <summary>
            0b001 for mic<para/>
            0b010 for soundshare<para/>
            0b100 for priority<para/>
            </summary>
        </member>
    </members>
</doc>
